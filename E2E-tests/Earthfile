VERSION 0.7
FROM python:3.10
WORKDIR /test

COPY --dir ./config ./secrets ./tests ./src ./requirements.txt ./pytest.ini ./tox.ini .

ARG AWS_DEFAULT_REGION=eu-central-1
ARG blockchain=substrate
ARG env=staging
ARG stack=staging
ARG log_level=info
ARG keyword=test_
ARG markers
IF [ -n "$markers" ]
  ARG markers_switch="-m \"${markers}\""
END
ARG node_host
IF [ -n "$node_host" ]
  ARG node_host_switch="--node-host ${node_host}"
END
ARG node_port
IF [ -n "$node_port" ]
  ARG node_port_switch="--node-port ${node_port}"
END
ARG latest_mc_epoch=false
IF $latest_mc_epoch
  ARG latest_mc_epoch_switch="--latest-mc-epoch"
END
ARG decrypt=false
IF $decrypt
  ARG decrypt_switch="--decrypt"
END
ARG --global pytest_cmd=pytest --blockchain $blockchain --env $env --stack $stack --log-cli-level $log_level -k $keyword $latest_mc_epoch_switch $markers_switch $node_host_switch $node_port_switch $decrypt_switch --json-report --json-report-summary --junitxml=junit_report.xml --ctrf ctrf-report.json

build:
  ARG USERARCH
  RUN mkdir -m 0700 ~/.ssh && cat config/substrate/known_hosts >> ~/.ssh/known_hosts
  RUN curl -L --silent https://github.com/getsops/sops/releases/download/v3.7.3/sops_3.7.3_${USERARCH}.deb > sops.deb && dpkg -i sops.deb && rm sops.deb
  RUN pip install -r requirements.txt

test:
  # ATTENTION! +test target saves exit code to a file and returns success even when tests fail.
  # TODO TRY FINALLY
  # More info: https://docs.earthly.dev/docs/guides/best-practices#future-saving-an-artifact-even-if-the-build-fails
  FROM +build
  ARG CI_RUN
  IF [ "$CI_RUN" = "true" ]
    RUN --secret AWS_SECRET_ACCESS_KEY --secret AWS_ACCESS_KEY_ID --secret AWS_SESSION_TOKEN --no-cache --ssh eval $pytest_cmd --ci-run || true
  ELSE
    RUN --mount=type=secret,target=/root/.aws/credentials,id=aws --no-cache --ssh eval $pytest_cmd || true
  END

test-artifacts:
  FROM +test
  SAVE ARTIFACT .report.json
  SAVE ARTIFACT debug.log
  SAVE ARTIFACT junit_report.xml
  SAVE ARTIFACT ctrf-report.json

report:
  FROM alpine:3.19
  COPY +test-artifacts/.report.json .
  COPY +test-artifacts/debug.log .
  COPY +test-artifacts/ctrf-report.json .
  SAVE ARTIFACT debug.log AS LOCAL debug.log
  SAVE ARTIFACT ctrf-report.json AS LOCAL ctrf-report.json
  COPY ./report_slack.sh ./report_xray.sh .
  RUN apk add --no-cache curl jq bash
  RUN cat .report.json | jq
  ARG exitcode=$(cat .report.json | jq '.exitcode')
  ARG summary=$(cat .report.json | jq '.summary')
  ARG job_url
  ARG repository=unknown
  ARG plan
  ARG execution
  IF [ -n "$plan" ]
    ARG xray_switch="-p ${plan}"
  ELSE
    ARG xray_switch="-e ${execution}"
  END
  COPY +test-artifacts/junit_report.xml .
  ARG xray_report_name=junit_report.xml
  ARG report_to_xray=false
  IF $report_to_xray
    RUN --secret XRAY_API_BASE_URL --secret XRAY_CLIENT_ID --secret XRAY_CLIENT_SECRET ./report_xray.sh -r $xray_report_name $xray_switch
    ARG xray_id=$(cat xray_id.txt)
  END
  ARG report_to_slack=false
  ARG github_actor_username
  ARG env
  ARG slack_ref_name
  IF $report_to_slack
    RUN --secret SLACK_WEBHOOK_URL --secret JIRA_URL ./report_slack.sh $repository $slack_ref_name $job_url $env $github_actor_username $xray_id
  END
  IF [[ $exitcode -eq 0 ]]
    RUN echo SUCCESS! All tests passed.
  ELSE IF [[ $exitcode -eq 1 ]]
    RUN echo ERROR: Some tests failed.
  ELSE IF [[ $exitcode -eq 2 ]]
    RUN echo ERROR: Test execution was interrupted by the user.
  ELSE IF [[ $exitcode -eq 3 ]]
    RUN echo ERROR: Internal error happened while executing tests.
  ELSE IF [[ $exitcode -eq 4 ]]
    RUN echo ERROR: pytest command line usage error.
  ELSE IF [[ $exitcode -eq 5 ]]
    RUN echo ERROR: No tests were executed.
  ELSE
    RUN echo ERROR: Unknown error.
  END
  RUN echo $summary
  RUN exit $exitcode