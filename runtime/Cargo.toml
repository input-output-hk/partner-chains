[package]
name = "sidechain-runtime"
version = "1.0.0"
description = "A reference implementation of a partner chain runtime"
authors = ["IOG"]
edition = "2021"
license = "Unlicense"
publish = false

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
log = { workspace = true }
parity-scale-codec = { workspace = true }
scale-info = { workspace = true }
derive-new = { workspace = true }

pallet-aura = { workspace = true }
pallet-balances = { workspace = true }
frame-support = { workspace = true }
pallet-grandpa = { workspace = true }
pallet-partner-chains-session = { workspace = true }
pallet-sudo = { workspace = true }
frame-system = { workspace = true }
frame-try-runtime = { workspace = true, optional = true }
pallet-timestamp = { workspace = true }
pallet-transaction-payment = { workspace = true }
frame-executive = { workspace = true }
sp-api = { workspace = true }
sp-block-builder = { workspace = true }
sp-consensus-aura = { workspace = true }
sp-consensus-grandpa = { workspace = true }
sp-consensus-slots = { workspace = true }
sp-core = { workspace = true }
sp-genesis-builder = { workspace = true }
sp-inherents = { workspace = true }
sp-offchain = { workspace = true }
sp-runtime = { workspace = true }
sp-session = { workspace = true }
sp-partner-chains-session = { workspace = true }
sp-staking = { workspace = true }
sp-std = { workspace = true }
sp-transaction-pool = { workspace = true }
sp-version = { workspace = true }
sp-storage = { workspace = true }
sp-weights = { workspace = true }
authority-selection-inherents = { workspace = true }

hex-literal = { workspace = true }
const-decoder = { workspace = true }

# Used for the node template's RPCs
frame-system-rpc-runtime-api = { workspace = true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true }

# Used for runtime benchmarking
frame-benchmarking = { workspace = true, optional = true }
frame-system-benchmarking = { workspace = true, optional = true }

# Local Dependencies
sp-block-rewards = { workspace = true }
pallet-block-rewards = { workspace = true }
sp-sidechain = { workspace = true }
pallet-sidechain = { workspace = true }
pallet-session-validator-management = { workspace = true }
sp-session-validator-management = { workspace = true, features = ["serde"] }
pallet-session-validator-management-benchmarking = { workspace = true, optional = true }
sidechain-domain = { workspace = true, features = ["serde"] }
chain-params = { workspace = true, features = ["serde"] }
sidechain-slots = { workspace = true }
session-manager = { workspace = true }
pallet-native-token-management = { workspace = true }
sp-native-token-management = { workspace = true, features = ["serde"] }

[dev-dependencies]
sp-io = { workspace = true }
sp-keyring = { workspace = true }
# we actually don't need it, cause in dev we can use full sp-keyring, but its usage gives a good example of how to create accountIds in WASM
hex = { workspace = true }
sp-consensus-slots = { workspace = true }
minicbor = { workspace = true }
plutus = { workspace = true }
pretty_assertions = { workspace = true }
serde_json = { workspace = true }

[build-dependencies]
substrate-wasm-builder = { workspace = true, optional = true }

[features]
default = ["std"]
std = [
	"authority-selection-inherents/std",
	"sp-block-rewards/std",
	"frame-try-runtime?/std",
	"frame-system-benchmarking?/std",
	"frame-system-rpc-runtime-api/std",
	"frame-benchmarking?/std",
	"parity-scale-codec/std",
	"scale-info/std",
	"frame-executive/std",
	"frame-support/std",
	"frame-system-rpc-runtime-api/std",
	"frame-system/std",
	"frame-executive/std",
	"frame-try-runtime/std",
	"pallet-aura/std",
	"pallet-balances/std",
	"pallet-block-rewards/std",
	"pallet-grandpa/std",
	"pallet-sudo/std",
	"pallet-partner-chains-session/std",
	"pallet-session-validator-management/std",
	"pallet-session-validator-management-benchmarking?/std",
	"pallet-timestamp/std",
	"pallet-transaction-payment-rpc-runtime-api/std",
	"pallet-transaction-payment/std",
	"session-manager/std",
	"sp-api/std",
	"sp-block-builder/std",
	"sp-consensus-aura/std",
	"sp-consensus-grandpa/std",
	"sp-consensus-slots/std",
	"sp-core/std",
	"sp-genesis-builder/std",
	"sp-keyring/std",
	"sp-inherents/std",
	"sp-offchain/std",
	"sp-runtime/std",
	"sp-session/std",
	"sp-partner-chains-session/std",
	"sp-staking/std",
	"sp-std/std",
	"sp-transaction-pool/std",
	"sp-version/std",
	"sp-storage/std",
	"sp-io/std",
	"sp-weights/std",
	"substrate-wasm-builder",
	"pallet-sidechain/std",
	"sidechain-slots/std",
	"sidechain-domain/std",
	"sp-inherents/std",
	"chain-params/std",
	"pallet-native-token-management/std",
	"sp-native-token-management/std"
]

runtime-benchmarks = [
	"frame-benchmarking/runtime-benchmarks",
	"frame-support/runtime-benchmarks",
	"frame-system-benchmarking/runtime-benchmarks",
	"frame-system/runtime-benchmarks",
	"pallet-balances/runtime-benchmarks",
	"pallet-grandpa/runtime-benchmarks",
	"pallet-sudo/runtime-benchmarks",
	"pallet-timestamp/runtime-benchmarks",
	"sp-runtime/runtime-benchmarks",
	"pallet-session-validator-management-benchmarking/runtime-benchmarks",
]
try-runtime = [
	"frame-try-runtime/try-runtime",
	"frame-executive/try-runtime",
	"frame-system/try-runtime",
	"frame-support/try-runtime",
	"pallet-aura/try-runtime",
	"pallet-balances/try-runtime",
	"pallet-grandpa/try-runtime",
	"pallet-sudo/try-runtime",
	"pallet-timestamp/try-runtime",
	"pallet-transaction-payment/try-runtime",
]
