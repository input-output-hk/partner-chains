searchState.loadedDescShard("pallet_partner_chains_session", 0, "Session Pallet\nAll the key type ids this session handler can process.\nHandler for session life cycle events.\nA trait for managing creation of new validator set.\nDecides whether the session should be ended.\nEnd the session.\nPlan a new session, and optionally provide the new …\nSame as <code>new_session</code>, but it this should only be called at …\nA notification for end of the session.\nA validator got disabled. Act accordingly until a new …\nThe given validator set will be used for the genesis …\nSession set has changed; act appropriately. Note that this …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nReturn <code>true</code> if the session should be ended.\nStart an already planned session.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nCurrent index of the session.\nIndices of disabled validators.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nThe keys.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNew session has happened. Note that the argument is the …\nSomething that can predict the next session rotation. This …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe overarching event type.\nHandler when a session has changed.\nHandler for managing new session.\nIndicator for when to end the session.\nA stable ID for a validator.\nStorage type is <code>StorageValue</code> with value type …\nStorage type is <code>StorageValue</code> with value type …\nPublic function to access the current session index.\nDisable the validator identified by <code>c</code>. (If using with the …\nDisable the validator of index <code>i</code>, returns <code>false</code> if the …\nPublic function to access the disabled validators.\nAuto-generated docs-only module listing all defined …\nThis session pallet always calls new_session and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalled when a block is initialized. Will rotate session if …\nMove on to next session. Register new validator set with …\nAuto-generated docs-only module listing all (public and …\nPublic function to access the current set of validators.\nCurrent index of the session.\nIndices of disabled validators.\nWarning: Doc-Only\nWarning: Doc-Only\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")