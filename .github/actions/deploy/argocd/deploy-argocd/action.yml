name: "Deploy ArgoCD Node"
description: "Deploys an ArgoCD node using a specified commit SHA."
inputs:
  sha:
    description: "Commit SHA"
    required: true

outputs: {}

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install kubectl and awscli
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" > /dev/null 2>&1 || { echo "❌ Failed to download kubectl"; exit 1; }
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

        # Install or update AWS CLI v2
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" > /dev/null 2>&1 || { echo "❌ Failed to download AWS CLI"; exit 1; }
        unzip -o awscliv2.zip > /dev/null 2>&1 || { echo "❌ Failed to unzip AWS CLI"; exit 1; }
        sudo ./aws/install --update > /dev/null 2>&1 || { echo "❌ Failed to install AWS CLI"; exit 1; }
      shell: bash

    - name: Configure kubectl
      env:
        KUBECONFIG_BASE64: ${{ env.kubeconfig_base64 }}
        K8S_SERVER: ${{ env.K8S_SERVER }}
        K8S_SA_TOKEN: ${{ env.K8S_SA_TOKEN }}
      run: |
        echo "${KUBECONFIG_BASE64}" | base64 --decode > ${{ runner.temp }}/kubeconfig.yaml || { echo "❌ Failed to decode kubeconfig"; exit 1; }
        kubectl config set-cluster my-cluster --server=${K8S_SERVER} --insecure-skip-tls-verify=true > /dev/null 2>&1 || { echo "❌ Failed to set cluster"; exit 1; }
        kubectl config set-credentials github-actions --token=${K8S_SA_TOKEN} > /dev/null 2>&1 || { echo "❌ Failed to set credentials"; exit 1; }
        kubectl config set-context my-context --cluster=my-cluster --user=github-actions --namespace=default > /dev/null 2>&1 || { echo "❌ Failed to set context"; exit 1; }
        kubectl config use-context my-context > /dev/null 2>&1 || { echo "❌ Failed to use context"; exit 1; }
      shell: bash

    - name: Render and Apply Kubernetes Manifest
      run: |
        sed "s|{{SHA}}|${{ inputs.sha }}|g; s|{{SUBSTRATE_NODE_IMAGE}}|689191102645.dkr.ecr.eu-central-1.amazonaws.com/substrate-node:${{ inputs.sha }}|g" .github/actions/deploy/argocd/manifest.yaml > manifest-sha-${{ inputs.sha }}.yaml
        kubectl apply -f manifest-sha-${{ inputs.sha }}.yaml
      shell: bash

    - name: Wait for Deployment to be Ready
      run: |
        kubectl wait --for=condition=available deployment/substrate-node-sha-${{ inputs.sha }} -n integration-testing --timeout=5m
        kubectl rollout status deployment/substrate-node-sha-${{ inputs.sha }} -n integration-testing
      shell: bash 

    - name: Upload Manifest as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: manifest-sha-${{ inputs.sha }}
        path: manifest-sha-${{ inputs.sha }}.yaml

