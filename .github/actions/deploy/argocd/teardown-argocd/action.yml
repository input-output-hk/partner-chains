name: "Teardown ArgoCD Environment"
description: "Tears down an ArgoCD environment by removing an ephemeral environment file and cleaning up old files."
inputs:
  sha:
    description: "SHA of the commit"
    required: true

outputs: {}

runs:
  using: "composite"
  steps:
    - name: Checkout ArgoCD Repository
      uses: actions/checkout@v4
      with:
        repository: input-output-hk/sidechains-argocd
        token: ${{ env.ACTIONS_PAT }}
        path: sidechains-argocd

    - name: Delete Ephemeral Environment File and Cleanup Old Files
      uses: actions/github-script@v7
      with:
        github-token: ${{ env.ACTIONS_PAT }}
        script: |
          const fs = require('fs');
          const path = require('path');

          // Define the target directory
          const directory = 'sidechains-argocd/integration-testing';
          
          // Define the specific file to delete based on the input SHA
          const targetFile = `manifest-sha-${{ inputs.sha }}.yaml`;
          
          // Full path to the target file
          const targetFilePath = path.join(directory, targetFile);

          // Function to delete a file via GitHub API
          async function deleteFile(owner, repo, filePath, commitMessage, branch) {
            try {
              const fileResponse = await github.rest.repos.getContent({
                owner,
                repo,
                path: filePath,
                ref: branch
              });

              const fileSha = fileResponse.data.sha;

              await github.rest.repos.deleteFile({
                owner,
                repo,
                path: filePath,
                message: commitMessage,
                sha: fileSha,
                branch: branch
              });

              console.log(`Deleted file: ${filePath}`);
            } catch (error) {
              console.error(`Failed to delete file ${filePath}:`, error);
            }
          }

          // Delete the specific target file if it exists
          if (fs.existsSync(targetFilePath)) {
            console.log(`Deleting target file: ${targetFile}`);
            await deleteFile(
              'input-output-hk',
              'sidechains-argocd',
              `integration-testing/${targetFile}`,
              `ci: Tear down integration-testing environment for SHA ${{ inputs.sha }}`,
              'main'
            );
          } else {
            console.log(`Target file not found: ${targetFile}`);
          }

          // Get the current time in ISO format and calculate the cutoff time (24 hours ago)
          const currentTime = new Date();
          const cutoffTime = new Date(currentTime.getTime() - (24 * 60 * 60 * 1000));

          // List all files in the target directory
          const listResponse = await github.rest.repos.getContent({
            owner: 'input-output-hk',
            repo: 'sidechains-argocd',
            path: directory,
            ref: 'main'
          });

          if (Array.isArray(listResponse.data)) {
            for (const file of listResponse.data) {
              const fileName = file.name;
              
              // Skip the target file since it's already handled
              if (fileName === targetFile) {
                continue;
              }

              // Only process YAML files (optional, based on your file types)
              if (path.extname(fileName) !== '.yaml' && path.extname(fileName) !== '.yml') {
                continue;
              }

              // Get the commits that modified the file, limit to the latest one
              const commitsResponse = await github.rest.repos.listCommits({
                owner: 'input-output-hk',
                repo: 'sidechains-argocd',
                path: `integration-testing/${fileName}`,
                per_page: 1,
                page: 1
              });

              if (commitsResponse.data.length === 0) {
                console.log(`No commits found for file: ${fileName}. Skipping.`);
                continue;
              }

              const lastCommit = commitsResponse.data[0];
              const commitDate = new Date(lastCommit.commit.author.date);

              // Check if the last commit was older than 24 hours
              if (commitDate < cutoffTime) {
                console.log(`File ${fileName} is older than 24 hours (last commit: ${commitDate.toISOString()}). Deleting.`);
                await deleteFile(
                  'input-output-hk',
                  'sidechains-argocd',
                  `integration-testing/${fileName}`,
                  `ci: Cleanup old integration-testing file ${fileName}`,
                  'main'
                );
              } else {
                console.log(`File ${fileName} is not older than 24 hours (last commit: ${commitDate.toISOString()}). Keeping.`);
              }
            }
          } else {
            console.error(`The path ${directory} is not a directory or could not be accessed.`);
          }