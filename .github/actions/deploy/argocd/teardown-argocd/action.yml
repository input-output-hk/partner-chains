name: "Teardown ArgoCD Environment"
description: "Tears down an ArgoCD environment by removing an ephemeral environment file and cleaning up old files."
inputs:
  sha:
    description: "SHA of the commit"
    required: true

outputs: {}

runs:
  using: "composite"
  steps:
    - name: Checkout ArgoCD Repository
      uses: actions/checkout@v4
      with:
        repository: input-output-hk/sidechains-argocd
        token: ${{ env.ACTIONS_PAT }}
        path: sidechains-argocd

    - name: Install kubectl and awscli
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl
        sudo apt update && sudo apt install -y awscli
      shell: bash

    - name: Configure kubectl
      env:
        KUBECONFIG_BASE64: ${{ env.kubeconfig_base64 }}
        K8S_SERVER: ${{ env.K8S_SERVER }}
        K8S_SA_TOKEN: ${{ env.K8S_SA_TOKEN }}
      run: |
        echo "${KUBECONFIG_BASE64}" | base64 --decode > ${{ runner.temp }}/kubeconfig.yaml
        kubectl config set-cluster my-cluster --server=${K8S_SERVER} --insecure-skip-tls-verify=true
        kubectl config set-credentials github-actions --token=${K8S_SA_TOKEN}
        kubectl config set-context my-context --cluster=my-cluster --user=github-actions --namespace=default
        kubectl config use-context my-context
      shell: bash

    - name: Download Manifest Artifact
      uses: actions/download-artifact@v4
      with:
        name: manifest-sha-${{ inputs.sha }}

    - name: Terminate Deployment 
      run: |
        kubectl delete -f manifest-sha-${{ inputs.sha }}.yaml 
      shell: bash 

    - name: Delete Deployments and Services Older Than 1 Hour
      run: |
        now=$(date +%s)
        kubectl get deployments -n integration-testing -o json | jq -r '.items[] | "\(.metadata.name) \(.metadata.creationTimestamp)"' | while read name ts; do
          age=$(( (now - $(date -d "$ts" +%s)) / 60 ))
          if [ "$age" -ge 60 ]; then
            echo "Deleting Deployment $name which is $age minutes old..."
            kubectl delete deployment "$name" -n integration-testing
            kubectl delete service "sha-${name#substrate-node-sha-}-service" -n integration-testing 2>/dev/null || true
          fi
        done
      shell: bash

    - name: Delete Ephemeral Environment File and Cleanup Old Files
      uses: actions/github-script@v7
      with:
        github-token: ${{ env.ACTIONS_PAT }}
        script: |
          const fs = require('fs');
          const path = require('path');

          // Inject the SHA from inputs
          const sha = '${{ inputs.sha }}';
          const targetFile = `manifest-sha-${sha}.yaml`;

          // Correct directory path relative to the repository root
          const directory = 'integration-testing';
          
          // Full path to the target file (local filesystem)
          const targetFilePath = path.join('sidechains-argocd', directory, targetFile);

          // Function to delete a file via GitHub API
          async function deleteFile(owner, repo, filePath, commitMessage, branch) {
            try {
              const fileResponse = await github.rest.repos.getContent({
                owner,
                repo,
                path: filePath,
                ref: branch
              });

              const fileSha = fileResponse.data.sha;

              await github.rest.repos.deleteFile({
                owner,
                repo,
                path: filePath,
                message: commitMessage,
                sha: fileSha,
                branch: branch
              });

              console.log(`Deleted file: ${filePath}`);
            } catch (error) {
              if (error.status === 404) {
                console.log(`File not found (already deleted or never existed): ${filePath}`);
              } else {
                console.error(`Failed to delete file ${filePath}:`, error);
                throw error; // Re-throw to fail the step if necessary
              }
            }
          }

          // Delete the specific target file if it exists locally
          if (fs.existsSync(targetFilePath)) {
            console.log(`Deleting target file: ${targetFile}`);
            await deleteFile(
              'input-output-hk',
              'sidechains-argocd',
              `${directory}/${targetFile}`,
              `ci: Tear down integration-testing environment for SHA ${sha}`,
              'main'
            );
          } else {
            console.log(`Target file not found: ${targetFile}`);
          }

          // Get the current time and calculate the cutoff time (1 hour ago)
          const currentTime = new Date();
          const cutoffTime = new Date(currentTime.getTime() - (1 * 60 * 60 * 1000)); // 1 hour in milliseconds

          // List all files in the target directory using GitHub API
          const listResponse = await github.rest.repos.getContent({
            owner: 'input-output-hk',
            repo: 'sidechains-argocd',
            path: directory,
            ref: 'main'
          });

          if (Array.isArray(listResponse.data)) {
            for (const file of listResponse.data) {
              const fileName = file.name;
              
              // Skip the target file since it's already handled
              if (fileName === targetFile) {
                continue;
              }

              // Only process YAML files
              if (path.extname(fileName) !== '.yaml' && path.extname(fileName) !== '.yml') {
                continue;
              }

              // Get the latest commit that modified the file
              const commitsResponse = await github.rest.repos.listCommits({
                owner: 'input-output-hk',
                repo: 'sidechains-argocd',
                path: `${directory}/${fileName}`,
                per_page: 1,
                page: 1
              });

              if (commitsResponse.data.length === 0) {
                console.log(`No commits found for file: ${fileName}. Skipping.`);
                continue;
              }

              const lastCommit = commitsResponse.data[0];
              const commitDate = new Date(lastCommit.commit.author.date);

              // Check if the last commit was older than 1 hour
              if (commitDate < cutoffTime) {
                console.log(`File ${fileName} is older than 1 hour (last commit: ${commitDate.toISOString()}). Deleting.`);
                await deleteFile(
                  'input-output-hk',
                  'sidechains-argocd',
                  `${directory}/${fileName}`,
                  `ci: Cleanup old integration-testing file ${fileName}`,
                  'main'
                );
              } else {
                console.log(`File ${fileName} is not older than 1 hour (last commit: ${commitDate.toISOString()}). Keeping.`);
              }
            }
          } else {
            console.error(`The path ${directory} is not a directory or could not be accessed.`);
            throw new Error(`Failed to list contents of directory: ${directory}`);
          }