name: "Deploy staging-preview"
description: "Deploys the staging-preview environment with chain-spec and image override using Kubernetes and Helm."
inputs:
  image:
    description: "Node Image"
    required: true
  sha:
    description: "Git SHA"
    required: true
  no-wipe:
    description: "Skip PVC wipe step"
    required: false
    default: false

outputs: {}

runs:
  using: "composite"
  steps:
    - name: Checkout sidechains-infra-priv repo
      uses: actions/checkout@v4
      with:
        repository: input-output-hk/sidechains-infra-priv
        token: ${{ env.ACTIONS_PAT }}
        path: sidechains-infra-priv

    - name: Acquire AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN_SECRET }}
        aws-region: eu-central-1

    - name: Login to ECR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.ECR_REGISTRY_SECRET }}

    - name: Install kubectl, helm, and awscli
      run: |
        set -euo pipefail
        sudo apt-get update -y
        sudo apt-get install -y ca-certificates curl python3-pip
        sudo update-ca-certificates

        # Install kubectl
        curl -fsSL -o kubectl "https://dl.k8s.io/release/$(curl -fsSL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/kubectl

        # Install Helm via APT (official repo)
        sudo apt-get update -y
        sudo apt-get install -y apt-transport-https ca-certificates curl gnupg
        curl https://baltocdn.com/helm/signing.asc | sudo gpg --dearmor -o /usr/share/keyrings/helm.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
        sudo apt-get update -y
        sudo apt-get install -y helm

        # Install AWS CLI
        pip3 install --upgrade awscli
      shell: bash

    - name: Configure kubectl
      run: |
        echo "${{ env.kubeconfig_base64 }}" | base64 --decode > ${{ runner.temp }}/kubeconfig.yaml
        kubectl config set-cluster my-cluster --server=${{ env.K8S_SERVER }} --insecure-skip-tls-verify=true
        kubectl config set-credentials github-actions --token=${{ env.K8S_SA_TOKEN }}
        kubectl config set-context my-context --cluster=my-cluster --user=github-actions --namespace=default
        kubectl config use-context my-context
      shell: bash

    - name: Delete pods
      continue-on-error: true
      run: |
        kubectl delete pod -n staging-preview staging-preview-validator-{1..5} || true
        echo "Waiting for pods to delete..."
        kubectl wait --for=delete pod/staging-preview-validator-{1..5} -n staging-preview --timeout=120s || true
      shell: bash

    - name: Delete substrate PVCs
      continue-on-error: true
      if: inputs.no-wipe != 'true'
      run: |
        kubectl delete pvc -n staging-preview staging-preview-validator-{1..5}-claim-substrate-node-data || true
        echo "Waiting for PVCs to delete..."
        kubectl wait --for=delete pvc/staging-preview-validator-{1..5}-claim-substrate-node-data -n staging-preview --timeout=120s || true
      shell: bash

    - name: Deploy with chain-spec and image override
      run: |
        cd sidechains-infra-priv/src/kube/helm/partner-chains-node-chart/
        for i in {1..5}; do
          helm upgrade --install staging-preview-validator-$i . \
            -f values/chains/staging-preview.yaml \
            -f values/nodes/staging-preview/validator/staging-preview-validator-$i \
            --set images.substrateNode="${{ inputs.image }}" \
            --set chain.chainspec_filename="staging-preview-chain-spec-${{ inputs.sha }}.json"
        done
      shell: bash

    - name: Wait
      run: |
        for i in {1..5}; do
          echo "Waiting for staging-preview-validator-$i..."
          kubectl wait --for=condition=ready pod staging-preview-validator-$i -n staging-preview --timeout=300s
        done
      shell: bash

    - name: Validate
      run: |
        for i in {1..5}; do
          echo "Checking staging-preview-validator-$i..."
          kubectl get pod staging-preview-validator-$i -n staging-preview -o jsonpath="{.status.containerStatuses[*].ready}"
        done

        kubectl get pods -n staging-preview -o custom-columns='NAME:.metadata.name,READY:.status.containerStatuses[*].ready' | \
          grep -E '^staging-preview-validator-[1-5]' | awk '{if ($2 != "true,true,true,true") exit 1}'
        echo "All pods are 5/5 up and ready"
      shell: bash
