name: "Create Draft Release"
description: "Creates a draft release and uploads partner-chains artifacts to GitHub."
inputs:
  tag:
    description: "Tag for the release"
    required: true

outputs: {}

runs:
  using: "composite"
  steps:
    - name: Set filename variables
      id: set-filenames
      run: |
        echo "PARTNER_CHAINS_NODE_X86_64_LINUX=partner-chains-node-${{ inputs.tag }}-x86_64-linux" >> $GITHUB_ENV
        echo "PARTNER_CHAINS_NODE_X86_64_APPLE_DARWIN=partner-chains-node-${{ inputs.tag }}-x86_64-apple-darwin" >> $GITHUB_ENV
        echo "PARTNER_CHAINS_NODE_AARCH64_APPLE_DARWIN=partner-chains-node-${{ inputs.tag }}-aarch64-apple-darwin" >> $GITHUB_ENV
      shell: bash

    - name: Download partner-chains-node-linux-artifact
      uses: actions/download-artifact@v4
      with:
        name: partner-chains-node-linux-artifact
        path: artifact-linux/

    - name: Download partner-chains-node-macos-x86_64-artifact
      uses: actions/download-artifact@v4
      with:
        name: partner-chains-node-macos-x86_64-artifact
        path: artifact-macos-x86_64/

    - name: Download partner-chains-node-macos-arm64-artifact
      uses: actions/download-artifact@v4
      with:
        name: partner-chains-node-macos-arm64-artifact
        path: artifact-macos-arm64/

    - name: Check if release already exists
      id: check_release
      run: |
        tag="${{ inputs.tag }}"
        echo "Checking if release with tag $tag exists..."
        release_response=$(curl -s -H "Authorization: token ${{ env.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/tags/$tag")

        if echo "$release_response" | grep -q '"message": "Not Found"'; then
          echo "Release with tag $tag does not exist. Proceeding to create a new draft release."
          echo "release_exists=false" >> $GITHUB_OUTPUT
          echo "release_id=" >> $GITHUB_OUTPUT
        else
          echo "Release with tag $tag already exists."
          echo "release_exists=true" >> $GITHUB_OUTPUT
          echo "release_id=$(echo $release_response | jq -r .id)" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Checkout specific SHA
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.sha }}
        path: release-sha

    - name: Create draft release
      id: create_release
      if: ${{ steps.check_release.outputs.release_exists == 'false' }}
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ inputs.tag }}
        name: "Partner Chains Node ${{ inputs.tag }}"
        draft: true
        prerelease: true
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

    - name: Upload artifacts to release
      if: ${{ steps.check_release.outputs.release_exists == 'true' || steps.create_release.outputs.id != '' }}
      run: |
        # Extract the release ID
        release_id="${{ steps.create_release.outputs.id }}"
        if [ -z "$release_id" ]; then
          release_id="${{ steps.check_release.outputs.release_id }}"
        fi
        echo "Uploading artifacts to release ID $release_id..."
    
        for artifact in "artifact-linux/${{ env.PARTNER_CHAINS_NODE_X86_64_LINUX }}" \
                        "artifact-macos-x86_64/${{ env.PARTNER_CHAINS_NODE_X86_64_APPLE_DARWIN }}" \
                        "artifact-macos-arm64/${{ env.PARTNER_CHAINS_NODE_AARCH64_APPLE_DARWIN }}"; do
          echo "Uploading artifact: $(basename $artifact)"
          chmod +x "$artifact"
          curl -s -X POST \
            -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$artifact" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=$(basename $artifact)"
        done
      shell: bash

        done
      shell: bash
