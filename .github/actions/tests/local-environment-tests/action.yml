name: "Deploy and Test Against Local Environment"
description: "Deploys a local environment and runs end-to-end tests."
inputs:
  sha:
    description: "SHA to checkout"
    required: true
  image:
    description: "Node Image"
    required: true
  tag:
    description: "PC Artifact Tag"
    required: true
  tests:
    description: "Test set to run (premerge or postmerge)"
    required: true    

outputs: {}

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.sha }}
    - name: Acquire AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN_SECRET }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to ECR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.ECR_REGISTRY_SECRET }}
    - name: Download partner-chains-cli artifact
      uses: actions/download-artifact@v4
      with:
        name: partner-chains-cli-artifact
        path: dev/local-environment/configurations/pc-contracts-cli/overrides/ 
    - name: Download partner-chains-node artifact
      uses: actions/download-artifact@v4
      with:
        name: partner-chains-node-artifact
        path: dev/local-environment/configurations/pc-contracts-cli/overrides/ 
    - name: Deploy local environment with overrides
      run: |
        mv dev/local-environment/configurations/pc-contracts-cli/overrides/partner-chains-cli-artifact dev/local-environment/configurations/pc-contracts-cli/overrides/partner-chains-cli
        mv dev/local-environment/configurations/pc-contracts-cli/overrides/partner-chains-node-artifact dev/local-environment/configurations/pc-contracts-cli/overrides/partner-chains-node
        cd dev/local-environment
        bash setup.sh --non-interactive --overrides --postgres-password azMpOp4mTqhlKDmgCVQr --node-image ${{ inputs.image }}
        docker compose up -d
        cd ../../
      shell: bash
    - name: checkout pc-tests ref_name branch
      id: pc-tests
      uses: actions/checkout@v4
      continue-on-error: true
      with:
        repository: input-output-hk/sidechains-tests
        token: ${{ env.ACTIONS_PAT }}
        ref: ${{ github.head_ref || github.ref_name }}
        path: e2e-tests
    - name: checkout pc-tests master (fallback)
      if: steps.pc-tests.outcome == 'failure'
      uses: actions/checkout@v4
      with:
        repository: input-output-hk/sidechains-tests
        token: ${{ env.ACTIONS_PAT }}
        ref: master
        path: e2e-tests
    - name: Setup python and dependencies
      run: |
        cd e2e-tests
        sudo apt update
        sudo apt install -y software-properties-common
        sudo add-apt-repository ppa:deadsnakes/ppa
        sudo apt update
        sudo apt install -y python3.10 python3.10-venv python3.10-dev
        sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1
        curl -L --silent https://github.com/getsops/sops/releases/download/v3.7.3/sops_3.7.3_amd64.deb > sops.deb && sudo dpkg -i sops.deb && rm sops.deb
        python -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt
        cd ..
      shell: bash
    - name: Wait for partner-chains-node-1 to start
      id: wait-pc-node
      continue-on-error: true
      run: |
        # Wait for the Cardano node to be ready
        while ! docker exec cardano-node-1 [ -e /shared/cardano.ready ]; do sleep 1; done
        echo "Cardano network is ready! Waiting for Partner Chain first node to start..."
        INIT_TIMESTAMP=$(docker exec cardano-node-1 cat /shared/cardano.start)
        echo "INIT_TIMESTAMP=$INIT_TIMESTAMP" >> $GITHUB_ENV
        epoch=0
        while ! docker exec partner-chains-node-1 [ -e /shared/partner-chains-node-1.ready ]; do
          epoch=$(docker exec cardano-node-1 cardano-cli query tip --testnet-magic 42 | jq -r .epoch)
          echo "Epoch: $epoch"
          if [ "$epoch" -ge 3 ]; then
            echo "MC has reached epoch 3 and partner-chains-node-1 is still not ready. Failing test and gathering logs."
            exit 1
          fi
          sleep 10
        done
      shell: bash
    - name: Fail the job
      if: ${{ steps.wait-pc-node.outcome == 'failure' }}
      run: exit 1
      shell: bash
    - name: Run smoke tests
      uses: ./.github/actions/tests/run-e2e-tests
      with:
        env: ${{ env.TEST_ENVIRONMENT }}
        keyword: "test_get_status or test_get_params"
        blockchain: substrate
    - name: Wait for epoch 2
      uses: ./.github/actions/tests/wait-for-epoch
      with:
        epoch: 2
        deployment: docker
        node: cardano-node-1
        environment:
    - name: Let PC warm up
      run: |
        sleep 30
      shell: bash
    - name: Run all tests (do not verify full MC epoch)
      uses: ./.github/actions/tests/run-e2e-tests
      with:
        env: ${{ env.TEST_ENVIRONMENT }}
        init_timestamp: ${{ env.INIT_TIMESTAMP }}
        blockchain: substrate
        markers: "not active_flow and not passive_flow and not probability and not rpc"
    - name: Wait for epoch 3
      if: ${{ inputs.tests == 'postmerge' }}
      uses: ./.github/actions/tests/wait-for-epoch
      with:
        epoch: 3
        deployment: docker
        node: cardano-node-1
        environment:
    - name: Run all tests (do not verify full MC epoch)
      if: ${{ inputs.tests == 'postmerge' }}
      uses: ./.github/actions/tests/run-e2e-tests
      with:
        env: ${{ env.TEST_ENVIRONMENT }}
        init_timestamp: ${{ env.INIT_TIMESTAMP }}
        blockchain: substrate
    - name: Wait for epoch 4
      if: ${{ inputs.tests == 'postmerge' }}
      uses: ./.github/actions/tests/wait-for-epoch
      with:
        epoch: 4
        deployment: docker
        node: cardano-node-1
        environment:
    - name: Run all tests
      if: ${{ inputs.tests == 'postmerge' }}
      uses: ./.github/actions/tests/run-e2e-tests
      with:
        env: ${{ env.TEST_ENVIRONMENT }}
        mc_epoch: 3
        init_timestamp: ${{ env.INIT_TIMESTAMP }}
        blockchain: substrate
    - name: Collect and zip container logs
      if: always()
      run: |
        mkdir -p local_environment_logs
        docker ps -a --format '{{.Names}}' | while read line; do
          echo "Collecting logs for container $line"
          docker logs "$line" > "local_environment_logs/$line.log" 2>&1 || true
        done
        zip -r local_environment_logs.zip local_environment_logs/
      shell: bash
    - name: Upload container logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: local_environment_logs
        path: local_environment_logs.zip
    - name: Stop partner-chains-demo
      run: |
        cd dev/local-environment
        docker compose down --volumes
      shell: bash
