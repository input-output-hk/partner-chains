name: "Deploy and Test Against Local Environment"
description: "Deploys a local environment and runs end-to-end tests."
inputs:
  sha:
    description: "SHA to checkout"
    required: true
  image:
    description: "Node Image"
    required: true
  tag:
    description: "PC Artifact Tag"
    required: true
  tests:
    description: "Test set to run (smoke, rpc, reserve, governed_map, delegator_rewards, ariadne, wizards, or full)"
    required: true

outputs: {}

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.sha }}

    - name: Acquire AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN_SECRET }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to ECR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.ECR_REGISTRY_SECRET }}

    - name: Deploy local environment
      run: |
        mkdir -p dev/local-environment/configurations/tests/e2e-tests
        cp -r e2e-tests/* dev/local-environment/configurations/tests/e2e-tests
        cd dev/local-environment
        if [ "${{ inputs.tests }}" = "wizards" ]; then
          bash setup.sh --non-interactive --postgres-password azMpOp4mTqhlKDmgCVQr --node-image ${{ inputs.image }} --tests -d 5
        else
          bash setup.sh --non-interactive --postgres-password azMpOp4mTqhlKDmgCVQr --node-image ${{ inputs.image }} --tests
        fi
        docker compose up -d
        cd ../../
      shell: bash

    - name: Wait for first node to start
      id: wait-pc-node
      continue-on-error: true
      run: |
        # Wait for the Cardano node to be ready
        while ! docker exec cardano-node-1 [ -e /shared/cardano.ready ]; do sleep 1; done
        echo "Cardano network is ready! Waiting for Partner Chain first node to start..."
        INIT_TIMESTAMP=$(docker exec cardano-node-1 cat /shared/cardano.start)
        echo "INIT_TIMESTAMP=$INIT_TIMESTAMP" >> $GITHUB_ENV

        epoch=0
        restart_count=0
        max_restarts=10

        # Set the container name based on test type
        if [ "${{ inputs.tests }}" = "wizards" ]; then
          CONTAINER_NAME="partner-chains-wizard-1"
        else
          CONTAINER_NAME="partner-chains-node-1"
        fi

        # Wait for the Partner Chain node to be ready or until max restarts or epoch 2 is reached
        while ! docker exec $CONTAINER_NAME [ -e /shared/$CONTAINER_NAME.ready ]; do
          epoch=$(docker exec cardano-node-1 cardano-cli latest query tip --testnet-magic 42 | jq -r .epoch)
          echo "Epoch: $epoch"
          container_status=$(docker inspect -f '{{.State.Status}}' $CONTAINER_NAME)
          echo "Container status: $container_status"
          if [ "$container_status" = "restarting" ]; then
            restart_count=$((restart_count + 1))
            echo "$CONTAINER_NAME is restarting ($restart_count/$max_restarts)"
            if [ "$restart_count" -ge "$max_restarts" ]; then
              echo "$CONTAINER_NAME has restarted $restart_count times. Failing early."
              exit 1
            fi
          else
            restart_count=0
          fi
          if [ "$epoch" -ge 1 ]; then
            echo "Epoch has reached 1 and $CONTAINER_NAME is still not ready."
            exit 1
          fi
          sleep 10
        done
      shell: bash

#    - name: Run wizards runtime migration
#      if: ${{ inputs.tests == 'wizards' }}
#      run: |
#        docker exec partner-chains-wizard-1 parter-chains-node wizards 
#      shell: bash

    - name: Collect Docker logs
      run: |
        mkdir -p local-environment-${{ inputs.tests }}-logs-initial
        docker ps -a --format '{{.Names}}' | while read line; do
          echo "Collecting logs for container $line"
          docker logs "$line" > "local-environment-${{ inputs.tests }}-logs-initial/$line.log" 2>&1 || true
        done
      shell: bash

    - name: Upload Docker logs artifact
      uses: actions/upload-artifact@v4
      with:
        name: local-environment-${{ inputs.tests }}-logs-initial
        path: local-environment-${{ inputs.tests }}-logs-initial/

    - name: Fail the job
      if: ${{ steps.wait-pc-node.outcome == 'failure' }}
      run: exit 1
      shell: bash

    - name: Run Epoch 1 Tests
      uses: ./.github/actions/tests/run-e2e-tests
      with:
        env: ${{ env.TEST_ENVIRONMENT }}
        keyword: "test_get_status or test_get_params"
        blockchain: substrate
        local-environment: "true"
        tests: ${{ inputs.tests }}

    - name: Wait for epoch 2
      if: ${{ inputs.tests == 'full' || inputs.tests == 'ariadne' }}
      uses: ./.github/actions/tests/wait-for-epoch
      with:
        epoch: 2
        deployment: docker
        node: cardano-node-1
        environment:

    - name: Let PC warm up
      if: ${{ inputs.tests == 'full' || inputs.tests == 'ariadne' }}
      run: |
        sleep 30
      shell: bash

    - name: Run Epoch 2 Tests
      if: ${{ inputs.tests == 'full' || inputs.tests == 'ariadne' }}
      uses: ./.github/actions/tests/run-e2e-tests
      with:
        env: ${{ env.TEST_ENVIRONMENT }}
        init_timestamp: ${{ env.INIT_TIMESTAMP }}
        blockchain: substrate
        markers: "not probability and not rpc"
        local-environment: "true"

    - name: Wait for epoch 3
      if: ${{ inputs.tests == 'full' || inputs.tests == 'ariadne' }}
      uses: ./.github/actions/tests/wait-for-epoch
      with:
        epoch: 3
        deployment: docker
        node: cardano-node-1
        environment:

    - name: Run Epoch 3 Tests
      if: ${{ inputs.tests == 'full' || inputs.tests == 'ariadne' }}
      uses: ./.github/actions/tests/run-e2e-tests
      with:
        env: ${{ env.TEST_ENVIRONMENT }}
        init_timestamp: ${{ env.INIT_TIMESTAMP }}
        blockchain: substrate
        markers: "not probability"
        local-environment: "true"

    - name: Wait for epoch 4
      if: ${{ inputs.tests == 'full' || inputs.tests == 'ariadne' }}
      uses: ./.github/actions/tests/wait-for-epoch
      with:
        epoch: 4
        deployment: docker
        node: cardano-node-1
        environment:

    - name: Run Epoch 4 Tests
      if: ${{ inputs.tests == 'full' || inputs.tests == 'ariadne' }}
      uses: ./.github/actions/tests/run-e2e-tests
      with:
        env: ${{ env.TEST_ENVIRONMENT }}
        mc_epoch: 3
        init_timestamp: ${{ env.INIT_TIMESTAMP }}
        blockchain: substrate
        markers: "not probability and not reserve"
        local-environment: "true"

    - name: Check if no skipped tests
      if: ${{ inputs.tests == 'full' || inputs.tests == 'ariadne' }}
      run: |
        skipped=$(jq -r .summary.skipped e2e-tests/logs/.report.json)
        if [ "$skipped" != "null" ]; then
          echo "Skipped tests found: $skipped. Check test logs for more information."
          exit 1
        fi
      shell: bash

    - name: Collect container logs
      if: always()
      run: |
        mkdir -p local-environment-${{ inputs.tests }}-logs-full
        docker ps -a --format '{{.Names}}' | while read line; do
          echo "Collecting logs for container $line"
          docker logs "$line" > "local-environment-${{ inputs.tests }}-logs-full/$line.log" 2>&1 || true
        done
      shell: bash

    - name: Upload container logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: local-environment-${{ inputs.tests }}-logs-full
        path: local-environment-${{ inputs.tests }}-logs-full/

    - name: Stop partner-chains-demo
      run: |
        cd dev/local-environment
        docker compose down --volumes
      shell: bash
