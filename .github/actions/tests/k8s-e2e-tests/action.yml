name: 'Run Pytest Tests'
description: 'Activate Python virtual environment and run end-to-end tests'

inputs:
  env:
    description: 'Test environment'
    required: true
  keyword:
    description: 'Run tests by keyword (-k)'
    required: false
    default: 'test_'
  markers:
    description: 'Run tests by markers (-m)'
    required: false
  mc_epoch:
    description: 'MC epoch to test (committee tests)'
    required: false
  latest_mc_epoch:
    description: 'Parametrize committee tests to verify the whole last MC epoch'
    required: false
  deployment_mc_epoch:
    description: 'Deployment MC epoch'
    required: false
  log_level:
    description: 'Log CLI level'
    required: false
    default: 'info'
  init_timestamp:
    description: 'MC initialization timestamp in seconds'
    required: false
    default: '0'
  blockchain:
    description: 'Blockchain to test'
    required: true
  local-environment:
    description: 'Run tests in local environment (true or false)'
    required: false
    default: 'false'
  decrypt:
    description: 'Decrypt secrets'
    required: false
  threads:
    description: 'Number of threads to use'
    required: false
    default: '4'

runs:
  using: composite
  steps:
    - name: Install kubectl and awscli
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

        # Install or update AWS CLI v2
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -o awscliv2.zip
        sudo ./aws/install --update
      shell: bash

    - name: Configure kubectl
      env:
        KUBECONFIG_BASE64: ${{ env.kubeconfig_base64 }}
        K8S_SERVER: ${{ env.K8S_SERVER }}
        K8S_SA_TOKEN: ${{ env.K8S_SA_TOKEN }}
      run: |
        echo "${KUBECONFIG_BASE64}" | base64 --decode > ${{ runner.temp }}/kubeconfig.yaml
        kubectl config set-cluster my-cluster --server=${K8S_SERVER} --insecure-skip-tls-verify=true
        kubectl config set-credentials github-actions --token=${K8S_SA_TOKEN}
        kubectl config set-context my-context --cluster=my-cluster --user=github-actions --namespace=default
        kubectl config use-context my-context
      shell: bash

    - name: Run tests
      id: run-tests
      continue-on-error: true
      shell: bash
      run: |
        markers_switch=""
        if [ -n "${{ inputs.markers }}" ]; then
          markers_switch="-m '${{ inputs.markers }}'"
        fi
        
        mc_epoch_switch=""
        if [ -n "${{ inputs.mc_epoch }}" ]; then
          mc_epoch_switch="--mc-epoch '${{ inputs.mc_epoch }}'"
        fi

        latest_mc_epoch_switch=""
        if [ "${{ inputs.latest_mc_epoch }}" = "true" ]; then
          latest_mc_epoch_switch="--latest-mc-epoch"
        fi

        deployment_mc_epoch_switch=""
        if [ -n "${{ inputs.deployment_mc_epoch }}" ]; then
          deployment_mc_epoch_switch="--deployment-mc-epoch '${{ inputs.deployment_mc_epoch }}'"
        fi

        decrypt_switch=""
        if [ "${{ inputs.decrypt }}" = "true" ]; then
          decrypt_switch="--decrypt"
        fi

        pytest_cmd="pytest --blockchain '${{ inputs.blockchain }}' \
          --env '${{ inputs.env }}' \
          --log-cli-level '${{ inputs.log_level }}' \
          -k '${{ inputs.keyword }}' \
          ${markers_switch} \
          -n '${{ inputs.threads}}' \
          --dist=loadgroup \
          --ci-run \
          --init-timestamp '${{ inputs.init_timestamp }}' \
          ${mc_epoch_switch} \
          ${latest_mc_epoch_switch} \
          ${deployment_mc_epoch_switch} \
          ${decrypt_switch} \
          --json-report \
          --json-report-file=logs/.report.json \
          --json-report-summary \
          --junitxml=logs/junit_report.xml"

        if [[ "${{ inputs.local-environment }}" == "true" ]]; then
          echo "Running tests via docker exec"
          docker exec tests bash -c "
            cd /e2e-tests &&
            source venv/bin/activate &&
            $pytest_cmd
          "
        else
          echo "Running tests locally"
          cd e2e-tests
          source venv/bin/activate
          eval "$pytest_cmd"
        fi

    - name: Copy test results
      if: ${{ inputs.local-environment == 'true' }}
      shell: bash
      run: |
        echo "Copy test results from docker container"
        mkdir -p e2e-tests
        docker cp tests:/e2e-tests/logs e2e-tests

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: e2e-tests/logs
        overwrite: true
        if-no-files-found: error
        include-hidden-files: true

    - name: Fail the job
      if: ${{ steps.run-tests.outcome == 'failure' }}
      run: exit 1
      shell: bash
