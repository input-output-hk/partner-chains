name: "Deploy and Test Against Local Environment"
description: "Deploys a local environment and runs end-to-end tests."
inputs:
  sha:
    description: "SHA to checkout"
    required: true
  image:
    description: "Node Image"
    required: true
  tag:
    description: "PC Artifact Tag"
    required: true
  tests:
    description: "Test set to run (premerge or postmerge)"
    required: true

outputs: {}

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.sha }}
    - name: Acquire AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN_SECRET }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to ECR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.ECR_REGISTRY_SECRET }}
    - name: Deploy local environment
      run: |
        mkdir -p dev/local-environment/configurations/tests/e2e-tests
        cp -r e2e-tests/* dev/local-environment/configurations/tests/e2e-tests
        cd dev/local-environment
        bash setup.sh --non-interactive --postgres-password azMpOp4mTqhlKDmgCVQr --node-image ${{ inputs.image }} --tests -d 5
        docker compose up -d
        cd ../../
      shell: bash
    - name: Wait for partner-chains-wizard-1 to start
      id: wait-pc-node
      continue-on-error: true
      run: |
        # Wait for the Cardano node to be ready
        while ! docker exec cardano-node-1 [ -e /shared/cardano.ready ]; do sleep 1; done
        echo "Cardano network is ready! Waiting for Partner Chain first node to start..."
        INIT_TIMESTAMP=$(docker exec cardano-node-1 cat /shared/cardano.start)
        echo "INIT_TIMESTAMP=$INIT_TIMESTAMP" >> $GITHUB_ENV

        epoch=0
        restart_count=0
        max_restarts=10

        # Wait for the Partner Chain node to be ready or until max restarts or epoch 2 is reached
        while ! docker exec partner-chains-wizard-1 [ -e /shared/partner-chains-wizard-1.ready ]; do
          epoch=$(docker exec cardano-node-1 cardano-cli latest query tip --testnet-magic 42 | jq -r .epoch)
          echo "Epoch: $epoch"
          container_status=$(docker inspect -f '{{.State.Status}}' partner-chains-wizard-1)
          echo "Container status: $container_status"
          if [ "$container_status" = "restarting" ]; then
            restart_count=$((restart_count + 1))
            echo "partner-chains-wizard-1 is restarting ($restart_count/$max_restarts)"
            if [ "$restart_count" -ge "$max_restarts" ]; then
              echo "partner-chains-wizard-1 has restarted $restart_count times. Failing early."
              exit 1
            fi
          else
            restart_count=0
          fi
          if [ "$epoch" -ge 2 ]; then
            echo "Epoch has reached 2 and partner-chains-wizard-1 is still not ready."
            exit 1
          fi
          sleep 10
        done
      shell: bash
    - name: Collect Docker logs
      run: |
        mkdir -p local-environment-wizards-logs-initial
        docker ps -a --format '{{.Names}}' | while read line; do
          echo "Collecting logs for container $line"
          docker logs "$line" > "local-environment-wizards-logs-initial/$line.log" 2>&1 || true
        done
      shell: bash
    - name: Upload Docker logs artifact
      uses: actions/upload-artifact@v4
      with:
        name: local-environment-wizards-logs-initial
        path: local-environment-wizards-logs-initial/
    - name: Fail the job
      if: ${{ steps.wait-pc-node.outcome == 'failure' }}
      run: exit 1
      shell: bash
    - name: Collect container logs
      if: always()
      run: |
        mkdir -p local-environment-wizards-logs-full
        docker ps -a --format '{{.Names}}' | while read line; do
          echo "Collecting logs for container $line"
          docker logs "$line" > "local-environment-wizards-logs-full/$line.log" 2>&1 || true
        done
      shell: bash
    - name: Upload container logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: local-environment-wizards-logs-full
        path: local-environment-wizards-logs-full/
    - name: Setup python and dependencies
      run: |
        cd e2e-tests
        sudo apt update
        sudo apt install -y software-properties-common
        sudo add-apt-repository ppa:deadsnakes/ppa
        sudo apt update
        sudo apt install -y python3.12 python3.12-venv python3.12-dev
        sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 1
        curl -L --silent https://github.com/getsops/sops/releases/download/v3.7.3/sops_3.7.3_amd64.deb > sops.deb && sudo dpkg -i sops.deb && rm sops.deb
        python -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt
        cd ..
      shell: bash
    - name: Wait for epoch 3
      if: ${{ inputs.tests == 'postmerge' }}
      uses: ./.github/actions/tests/wait-for-epoch
      with:
        epoch: 3
        deployment: docker
        node: cardano-node-1
        environment:
    - name: Wait for partner-chains-wizard-3 to start
      id: wait-pc-node
      continue-on-error: true
      run: |
        # Wait for the Cardano node to be ready
        while ! docker exec cardano-node-1 [ -e /shared/cardano.ready ]; do sleep 1; done
        echo "Cardano network is ready! Waiting for Partner Chain first node to start..."
        INIT_TIMESTAMP=$(docker exec cardano-node-1 cat /shared/cardano.start)
        echo "INIT_TIMESTAMP=$INIT_TIMESTAMP" >> $GITHUB_ENV

        epoch=0
        restart_count=0
        max_restarts=10

        # Wait for the Partner Chain node to be ready or until max restarts or epoch 2 is reached
        while ! docker exec partner-chains-wizard-3 [ -e /shared/partner-chains-wizard-3.ready ]; do
          epoch=$(docker exec cardano-node-1 cardano-cli latest query tip --testnet-magic 42 | jq -r .epoch)
          echo "Epoch: $epoch"
          container_status=$(docker inspect -f '{{.State.Status}}' partner-chains-wizard-1)
          echo "Container status: $container_status"
          if [ "$container_status" = "restarting" ]; then
            restart_count=$((restart_count + 1))
            echo "partner-chains-wizard-3 is restarting ($restart_count/$max_restarts)"
            if [ "$restart_count" -ge "$max_restarts" ]; then
              echo "partner-chains-wizard-3 has restarted $restart_count times. Failing early."
              exit 1
            fi
          else
            restart_count=0
          fi
          if [ "$epoch" -ge 3 ]; then
            echo "Epoch has reached 3 and partner-chains-wizard-3 is still not ready."
            exit 1
          fi
          sleep 10
        done
      shell: bash
    - name: Run tests
      run: |
        cd e2e-tests
        pytest -m CD --env local
        cd ..
      shell: bash
    - name: Stop partner-chains-demo
      run: |
        cd dev/local-environment
        docker compose down --volumes
      shell: bash
