name: "Run RPC Tests against K8s Node"
description: "Run end-to-end tests against the ArgoCD node"
inputs:
  namespace:
    description: "K8s namespace"
    required: true
  pod:
    description: "K8s pod name"
    required: true

outputs: {}

runs:
  using: "composite"
  steps:
    - name: Install kubectl and awscli
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

        # Install or update AWS CLI v2
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -o awscliv2.zip
        sudo ./aws/install --update
      shell: bash

    - name: Configure kubectl
      env:
        KUBECONFIG_BASE64: ${{ env.kubeconfig_base64 }}
        K8S_SERVER: ${{ env.K8S_SERVER }}
        K8S_SA_TOKEN: ${{ env.K8S_SA_TOKEN }}
      run: |
        echo "${KUBECONFIG_BASE64}" | base64 --decode > ${{ runner.temp }}/kubeconfig.yaml
        kubectl config set-cluster my-cluster --server=${K8S_SERVER} --insecure-skip-tls-verify=true
        kubectl config set-credentials github-actions --token=${K8S_SA_TOKEN}
        kubectl config set-context my-context --cluster=my-cluster --user=github-actions --namespace=default
        kubectl config use-context my-context
      shell: bash

    - name: Fetch Sidechain Status
      shell: bash
      run: |
        kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"sidechain_getStatus","params":[],"id":1}' \
          http://localhost:9933 > status.json

    - name: Test Block Production
      shell: bash
      run: |
        BLOCK1=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"chain_getHeader","params":[],"id":1}' \
          http://localhost:9933 | jq '.result.number | tonumber')

        sleep 30

        BLOCK2=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"chain_getHeader","params":[],"id":1}' \
          http://localhost:9933 | jq '.result.number | tonumber')

        [[ "$BLOCK2" -gt "$BLOCK1" ]] || { echo "❌ Block number did not increase"; exit 1; }
        echo "✅ Block producing test passed."

    - name: Test Node Status
      shell: bash
      run: |
        jq -e '
          .result.mainchain.epoch and
          .result.mainchain.slot and
          .result.mainchain.nextEpochTimestamp and
          .result.sidechain.nextEpochTimestamp and
          .result.sidechain.epoch and
          .result.sidechain.slot
        ' status.json || { echo "❌ Invalid status data"; exit 1; }

        echo "✅ Node status test passed."

    - name: Test Params
      shell: bash
      run: |
        kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"partner_chain_getParams","params":[],"id":1}' \
          http://localhost:9933 | tee /dev/stderr | jq -e '.result.genesis_utxo' || { echo "❌ Missing or invalid genesis UTXO"; exit 1; }

        echo "✅ Params test passed."

    - name: Test Ariadne Parameters
      shell: bash
      run: |
        MC_EPOCH=$(jq '.result.mainchain.epoch' status.json)

        kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getAriadneParameters\",\"params\":[$MC_EPOCH],\"id\":1}" \
          http://localhost:9933 | tee /dev/stderr | jq -e '
            .result.dParameter.numPermissionedCandidates and
            .result.dParameter.numRegisteredCandidates and
            (.result.permissionedCandidates | type == "array") and
            all(.result.permissionedCandidates[]; .sidechainPublicKey and .keys.aura and .keys.gran) and
            (.result.candidateRegistrations | type == "object")
          ' || { echo "❌ Invalid Ariadne parameters"; exit 1; }

        echo "✅ Ariadne parameters valid."

    - name: Test Epoch Committee
      shell: bash
      run: |
        EPOCH=$(jq '.result.sidechain.epoch' status.json)

        kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getEpochCommittee\",\"params\":[$EPOCH],\"id\":1}" \
          http://localhost:9933 | tee /dev/stderr | jq -e '
            .result.sidechainEpoch and
            (.result.committee | length > 0) and
            all(.result.committee[]; .sidechainPubKey)
          ' || { echo "❌ Invalid Epoch Committee response"; exit 1; }

        echo "✅ Epoch committee valid."

    - name: Test Registrations
      shell: bash
      run: |
        MC_EPOCH=$(jq '.result.mainchain.epoch' status.json)

        MAINCHAIN_KEY=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getAriadneParameters\",\"params\":[$MC_EPOCH],\"id\":1}" \
          http://localhost:9933 | jq -r '.result.candidateRegistrations | keys[0]')

        kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getRegistrations\",\"params\":[$MC_EPOCH,\"$MAINCHAIN_KEY\"],\"id\":1}" \
          http://localhost:9933 | tee /dev/stderr | jq -e '
            (.result | length > 0) and
            (.result[0] |
              .sidechainPubKey and
              .sidechainAccountId and
              .mainchainPubKey and
              .crossChainPubKey and
              .auraPubKey and
              .grandpaPubKey and
              .sidechainSignature and
              .mainchainSignature and
              .crossChainSignature and
              (.isValid | not == null) and
              .stakeDelegation and
              .utxo and
              .utxo.utxoId and
              .utxo.epochNumber and
              .utxo.blockNumber and
              .utxo.slotNumber and
              .utxo.txIndexWithinBlock
            )
          ' || { echo "❌ Invalid Registrations response"; exit 1; }

        echo "✅ Registrations valid."
