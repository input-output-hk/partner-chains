name: "Run RPC Tests against K8s Node"
description: "Run end-to-end tests against the ArgoCD node"
inputs:
  namespace:
    description: "K8s namespace"
    required: true
  pod:
    description: "K8s pod name"
    required: true

outputs: {}

runs:
  using: "composite"
  steps:
    - name: Install kubectl and awscli
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" > /dev/null 2>&1 || { echo "❌ Failed to download kubectl"; exit 1; }
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

        # Install or update AWS CLI v2
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" > /dev/null 2>&1 || { echo "❌ Failed to download AWS CLI"; exit 1; }
        unzip -o awscliv2.zip > /dev/null 2>&1 || { echo "❌ Failed to unzip AWS CLI"; exit 1; }
        sudo ./aws/install --update > /dev/null 2>&1 || { echo "❌ Failed to install AWS CLI"; exit 1; }
      shell: bash

    - name: Configure kubectl
      env:
        KUBECONFIG_BASE64: ${{ env.kubeconfig_base64 }}
        K8S_SERVER: ${{ env.K8S_SERVER }}
        K8S_SA_TOKEN: ${{ env.K8S_SA_TOKEN }}
      run: |
        echo "${KUBECONFIG_BASE64}" | base64 --decode > ${{ runner.temp }}/kubeconfig.yaml || { echo "❌ Failed to decode kubeconfig"; exit 1; }
        kubectl config set-cluster my-cluster --server=${K8S_SERVER} --insecure-skip-tls-verify=true > /dev/null 2>&1 || { echo "❌ Failed to set cluster"; exit 1; }
        kubectl config set-credentials github-actions --token=${K8S_SA_TOKEN} > /dev/null 2>&1 || { echo "❌ Failed to set credentials"; exit 1; }
        kubectl config set-context my-context --cluster=my-cluster --user=github-actions --namespace=default > /dev/null 2>&1 || { echo "❌ Failed to set context"; exit 1; }
        kubectl config use-context my-context > /dev/null 2>&1 || { echo "❌ Failed to use context"; exit 1; }
      shell: bash

    - name: Fetch Sidechain Status
      shell: bash
      run: |
        kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"sidechain_getStatus","params":[],"id":1}' \
          http://localhost:9933 > status.json

    #############################################
    # Smoke Tests / Node Health
    #############################################

    - name: Test Block Production Advances
      shell: bash
      continue-on-error: true
      run: |
        BLOCK1_HEX=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"chain_getHeader","params":[],"id":1}' \
          http://localhost:9933 | jq -r '.result.number')
        BLOCK1=$((BLOCK1_HEX))
    
        sleep 30
    
        BLOCK2_HEX=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"chain_getHeader","params":[],"id":1}' \
          http://localhost:9933 | jq -r '.result.number')
        BLOCK2=$((BLOCK2_HEX))
    
        [[ "$BLOCK2" -gt "$BLOCK1" ]] || { echo "❌ Block number did not increase"; exit 1; }
        echo "✅ Block producing test passed."

    - name: Test Basic Transaction Execution
      shell: bash
      continue-on-error: true
      run: |
        # Create a new wallet
        WALLET_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"author_createWallet","params":[],"id":1}' \
          http://localhost:9933)
        
        # Check if wallet creation was successful
        if ! echo "$WALLET_RESPONSE" | jq -e '.result' > /dev/null; then
          echo "❌ Failed to create wallet: $(echo "$WALLET_RESPONSE" | jq -r '.error.message // "Unknown error"')"
          exit 1
        fi
        
        WALLET_ADDRESS=$(echo "$WALLET_RESPONSE" | jq -r '.result.address')
        WALLET_SIGNATURE=$(echo "$WALLET_RESPONSE" | jq -r '.result.signature')
        
        if [ -z "$WALLET_ADDRESS" ] || [ "$WALLET_ADDRESS" = "null" ]; then
          echo "❌ Invalid wallet address received"
          exit 1
        fi
        
        # Get initial balances
        BALANCE_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"balances_getBalance\",\"params\":[\"$WALLET_ADDRESS\"],\"id\":1}" \
          http://localhost:9933)
        
        if ! echo "$BALANCE_RESPONSE" | jq -e '.result' > /dev/null; then
          echo "❌ Failed to get initial balance: $(echo "$BALANCE_RESPONSE" | jq -r '.error.message // "Unknown error"')"
          exit 1
        fi
        
        SENDER_BALANCE=$(echo "$BALANCE_RESPONSE" | jq -r '.result')
        
        if [ -z "$SENDER_BALANCE" ] || [ "$SENDER_BALANCE" = "null" ]; then
          echo "❌ Invalid initial balance received"
          exit 1
        fi
        
        # Send transaction
        TX_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"author_submitExtrinsic\",\"params\":[{\"address\":\"$WALLET_ADDRESS\",\"signature\":\"$WALLET_SIGNATURE\",\"call\":{\"module\":\"Balances\",\"function\":\"transfer\",\"params\":{\"dest\":\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\",\"value\":1000000000000}}},\"nonce\":0}],\"id\":1}" \
          http://localhost:9933)
        
        if ! echo "$TX_RESPONSE" | jq -e '.result' > /dev/null; then
          echo "❌ Failed to submit transaction: $(echo "$TX_RESPONSE" | jq -r '.error.message // "Unknown error"')"
          exit 1
        fi
        
        # Wait for transaction to be included
        sleep 10
        
        # Get final balances
        FINAL_BALANCE_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"balances_getBalance\",\"params\":[\"$WALLET_ADDRESS\"],\"id\":1}" \
          http://localhost:9933)
        
        if ! echo "$FINAL_BALANCE_RESPONSE" | jq -e '.result' > /dev/null; then
          echo "❌ Failed to get final balance: $(echo "$FINAL_BALANCE_RESPONSE" | jq -r '.error.message // "Unknown error"')"
          exit 1
        fi
        
        FINAL_SENDER_BALANCE=$(echo "$FINAL_BALANCE_RESPONSE" | jq -r '.result')
        
        if [ -z "$FINAL_SENDER_BALANCE" ] || [ "$FINAL_SENDER_BALANCE" = "null" ]; then
          echo "❌ Invalid final balance received"
          exit 1
        fi
        
        # Verify balance changes
        if [ "$FINAL_SENDER_BALANCE" -lt "$SENDER_BALANCE" ]; then
          echo "✅ Transaction execution test passed."
        else
          echo "❌ Transaction execution failed - balance did not decrease"
          echo "Initial balance: $SENDER_BALANCE"
          echo "Final balance: $FINAL_SENDER_BALANCE"
          exit 1
        fi

    - name: Test Chain Status Matches Cardano Tip
      shell: bash
      continue-on-error: true
      run: |
        jq -e '
          .result.mainchain.epoch and
          .result.mainchain.slot and
          .result.mainchain.nextEpochTimestamp and
          .result.sidechain.nextEpochTimestamp and
          .result.sidechain.epoch and
          .result.sidechain.slot
        ' status.json || { echo "❌ Invalid status data"; exit 1; }

        echo "✅ Node status test passed."

    - name: Test Genesis Params Returned
      shell: bash
      continue-on-error: true
      run: |
        kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"sidechain_getParams","params":[],"id":1}' \
          http://localhost:9933 | tee /dev/stderr | jq -e '.result.genesis_utxo' || { echo "❌ Missing or invalid genesis UTXO"; exit 1; }
    
        echo "✅ Params test passed."

    #############################################
    # RPC Interface Tests
    #############################################

    - name: Test Ariadne Parameters Structure
      shell: bash
      continue-on-error: true
      run: |
        MC_EPOCH=$(jq '.result.mainchain.epoch' status.json)

        kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getAriadneParameters\",\"params\":[$MC_EPOCH],\"id\":1}" \
          http://localhost:9933 | tee /dev/stderr | jq -e '
            .result.dParameter.numPermissionedCandidates and
            .result.dParameter.numRegisteredCandidates and
            (.result.permissionedCandidates | type == "array") and
            all(.result.permissionedCandidates[]; .sidechainPublicKey and .auraPublicKey and .grandpaPublicKey) and
            (.result.candidateRegistrations | type == "object")
          ' || { echo "❌ Invalid Ariadne parameters"; exit 1; }

        echo "✅ Ariadne parameters valid."

    - name: Test Epoch Committee Present
      shell: bash
      continue-on-error: true
      run: |
        EPOCH=$(jq '.result.sidechain.epoch' status.json)

        kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getEpochCommittee\",\"params\":[$EPOCH],\"id\":1}" \
          http://localhost:9933 | tee /dev/stderr | jq -e '
            .result.sidechainEpoch and
            (.result.committee | length > 0) and
            all(.result.committee[]; .sidechainPubKey)
          ' || { echo "❌ Invalid Epoch Committee response"; exit 1; }

        echo "✅ Epoch committee valid."

    - name: Test Candidate Registrations
      shell: bash
      continue-on-error: true
      run: |
        MC_EPOCH=$(jq '.result.mainchain.epoch' status.json)
    
        MAINCHAIN_KEY=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getAriadneParameters\",\"params\":[$MC_EPOCH],\"id\":1}" \
          http://localhost:9933 | jq -r '.result.candidateRegistrations | keys[0]')
    
        kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getRegistrations\",\"params\":[$MC_EPOCH,\"$MAINCHAIN_KEY\"],\"id\":1}" \
          http://localhost:9933 | tee /dev/stderr | jq -e '
            (.result | length > 0) and
            (.result[0] | 
              .sidechainPubKey and
              .sidechainAccountId and
              .mainchainPubKey and
              .crossChainPubKey and
              .auraPubKey and
              .grandpaPubKey and
              .sidechainSignature and
              .mainchainSignature and
              .crossChainSignature and
              (.isValid | type == "boolean") and
              .stakeDelegation and
              .utxo and
              .utxo.utxoId and
              .utxo.epochNumber and
              .utxo.blockNumber and
              .utxo.slotNumber and
              .utxo.txIndexWithinBlock
            )
          ' || { echo "❌ Invalid Registrations response"; exit 1; }
    
        echo "✅ Registrations valid."

    #############################################
    # Committee Tests
    #############################################

    - name: Test Committee Ratio Compliance
      shell: bash
      continue-on-error: true
      run: |
        # Get current MC epoch
        MC_EPOCH=$(jq '.result.mainchain.epoch' status.json)
        
        # Get Ariadne parameters
        ARIADNE_PARAMS=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getAriadneParameters\",\"params\":[$MC_EPOCH],\"id\":1}" \
          http://localhost:9933)
        
        # Get current committee
        COMMITTEE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getCommittee\",\"params\":[$MC_EPOCH],\"id\":1}" \
          http://localhost:9933)
        
        # Extract d-parameter values
        P_CANDIDATES=$(echo "$ARIADNE_PARAMS" | jq -r '.result.dParameter.numPermissionedCandidates')
        T_CANDIDATES=$(echo "$ARIADNE_PARAMS" | jq -r '.result.dParameter.numRegisteredCandidates')
        
        # Count committee members by type
        P_COUNT=$(echo "$COMMITTEE" | jq '.result | map(select(.type == "permissioned")) | length')
        T_COUNT=$(echo "$COMMITTEE" | jq '.result | map(select(.type == "trustless")) | length')
        
        # Calculate expected ratio
        EXPECTED_RATIO=$(echo "scale=4; $P_CANDIDATES / ($P_CANDIDATES + $T_CANDIDATES)" | bc)
        ACTUAL_RATIO=$(echo "scale=4; $P_COUNT / ($P_COUNT + $T_COUNT)" | bc)
        
        # Allow for some deviation (e.g., 10%)
        DEVIATION=$(echo "scale=4; $EXPECTED_RATIO - $ACTUAL_RATIO" | bc | tr -d '-')
        if (( $(echo "$DEVIATION > 0.1" | bc -l) )); then
          echo "❌ Committee ratio deviation too high. Expected: $EXPECTED_RATIO, Actual: $ACTUAL_RATIO"
          exit 1
        fi
        
        echo "✅ Committee ratio test passed."

    - name: Test Committee Members Rotate
      shell: bash
      continue-on-error: true
      run: |
        # Get current PC epoch
        PC_EPOCH=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"sidechain_getStatus","params":[],"id":1}' \
          http://localhost:9933 | jq -r '.result.sidechain.epoch')
        
        # Get committee for current epoch
        CURRENT_COMMITTEE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getEpochCommittee\",\"params\":[$PC_EPOCH],\"id\":1}" \
          http://localhost:9933)
        
        # Extract current committee member public keys
        CURRENT_KEYS=$(echo "$CURRENT_COMMITTEE" | jq -r '.result.committee[].sidechainPubKey')
        
        # Get committee for next epoch
        NEXT_PC_EPOCH=$((PC_EPOCH + 1))
        NEXT_COMMITTEE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getEpochCommittee\",\"params\":[$NEXT_PC_EPOCH],\"id\":1}" \
          http://localhost:9933)
        
        # Extract next committee member public keys
        NEXT_KEYS=$(echo "$NEXT_COMMITTEE" | jq -r '.result.committee[].sidechainPubKey')
        
        # Check if committees are different
        if [ "$CURRENT_KEYS" = "$NEXT_KEYS" ]; then
          echo "❌ Committee members did not rotate between epochs $PC_EPOCH and $NEXT_PC_EPOCH"
          exit 1
        else
          echo "✅ Committee rotation test passed. Members changed between epochs $PC_EPOCH and $NEXT_PC_EPOCH"
        fi

    - name: Test Authorities Match Committee
      shell: bash
      continue-on-error: true
      run: |
        # Get current PC epoch
        PC_EPOCH=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"sidechain_getStatus","params":[],"id":1}' \
          http://localhost:9933 | jq -r '.result.sidechain.epoch')
        
        # Get epoch committee for current epoch
        COMMITTEE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getEpochCommittee\",\"params\":[$PC_EPOCH],\"id\":1}" \
          http://localhost:9933)
        
        # Get authorities list
        AUTHORITIES=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"authority_set","params":[],"id":1}' \
          http://localhost:9933)
        
        # Extract committee member public keys
        COMMITTEE_KEYS=$(echo "$COMMITTEE" | jq -r '.result.committee[].sidechainPubKey')
        
        # Extract authority addresses
        AUTHORITY_ADDRESSES=$(echo "$AUTHORITIES" | jq -r '.result[]')
        
        # Check if all committee members are in authorities
        for KEY in $COMMITTEE_KEYS; do
          if ! echo "$AUTHORITY_ADDRESSES" | grep -q "$KEY"; then
            echo "❌ Committee member $KEY not found in authorities"
            exit 1
          fi
        done
        
        # Check if all authorities are in committee
        for ADDR in $AUTHORITY_ADDRESSES; do
          if ! echo "$COMMITTEE_KEYS" | grep -q "$ADDR"; then
            echo "❌ Authority $ADDR not found in committee"
            exit 1
          fi
        done
        
        echo "✅ Authorities match committee test passed."

    #############################################
    # Delegator Rewards Tests
    #############################################

    - name: Test Delegator Address Association
      shell: bash
      continue-on-error: true
      run: |
        # Get a stake key hash
        STAKE_KEY_HASH=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"sidechain_getAriadneParameters","params":[],"id":1}' \
          http://localhost:9933 | jq -r '.result.permissionedCandidates[0].mainchainPublicKey')
        
        # Get address association
        ASSOCIATION=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getAddressAssociation\",\"params\":[\"$STAKE_KEY_HASH\"],\"id\":1}" \
          http://localhost:9933)
        
        # Verify association exists and has valid signature
        if echo "$ASSOCIATION" | jq -e '.result.address and .result.signature' > /dev/null; then
          echo "✅ Address association test passed."
        else
          echo "❌ Invalid address association"
          exit 1
        fi

    - name: Test Block Production Log
      shell: bash
      continue-on-error: true
      run: |
        # Get latest block hash
        BLOCK_HASH=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"chain_getHeader","params":[],"id":1}' \
          http://localhost:9933 | jq -r '.result.hash')
        
        # Get block production log
        BLOCK_PRODUCTION_LOG=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getBlockProductionLog\",\"params\":[\"$BLOCK_HASH\"],\"id\":1}" \
          http://localhost:9933)
        
        # Check if block production log exists and has entries
        if echo "$BLOCK_PRODUCTION_LOG" | jq -e '.result' > /dev/null; then
          LOG_ENTRIES=$(echo "$BLOCK_PRODUCTION_LOG" | jq '.result | length')
          if [ "$LOG_ENTRIES" -gt 0 ]; then
            echo "✅ Block production log test passed. Found $LOG_ENTRIES entries."
          else
            echo "❌ Block production log is empty"
            exit 1
          fi
        else
          echo "❌ Failed to get block production log"
          exit 1
        fi

    #############################################
    # Smart Contract Tests
    #############################################

    - name: Test Init Reserve
      shell: bash
      continue-on-error: true
      run: |
        # Get payment key
        PAYMENT_KEY=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"sidechain_getAriadneParameters","params":[],"id":1}' \
          http://localhost:9933 | jq -r '.result.permissionedCandidates[0].mainchainPublicKey')
        
        # Initialize reserve
        INIT_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_initReserve\",\"params\":[\"$PAYMENT_KEY\"],\"id\":1}" \
          http://localhost:9933)
        
        # Verify initialization
        if echo "$INIT_RESPONSE" | jq -e '.result.validatorScript and .result.policyScript' > /dev/null; then
          echo "✅ Reserve initialization test passed."
        else
          echo "❌ Failed to initialize reserve"
          exit 1
        fi

    - name: Test Create Reserve
      shell: bash
      continue-on-error: true
      run: |
        # Get required parameters
        V_FUNCTION_HASH=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"sidechain_getAriadneParameters","params":[],"id":1}' \
          http://localhost:9933 | jq -r '.result.permissionedCandidates[0].mainchainPublicKey')
        
        PAYMENT_KEY=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"sidechain_getAriadneParameters","params":[],"id":1}' \
          http://localhost:9933 | jq -r '.result.permissionedCandidates[0].mainchainPublicKey')
        
        # Create reserve
        CREATE_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_createReserve\",\"params\":[\"$V_FUNCTION_HASH\",1000000,\"token\",\"$PAYMENT_KEY\"],\"id\":1}" \
          http://localhost:9933)
        
        # Verify creation
        if echo "$CREATE_RESPONSE" | jq -e '.result.success' > /dev/null; then
          echo "✅ Reserve creation test passed."
        else
          echo "❌ Failed to create reserve"
          exit 1
        fi

    - name: Test Release Funds
      shell: bash
      continue-on-error: true
      run: |
        # Get required parameters
        REFERENCE_UTXO=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"sidechain_getAriadneParameters","params":[],"id":1}' \
          http://localhost:9933 | jq -r '.result.permissionedCandidates[0].mainchainPublicKey')
        
        PAYMENT_KEY=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"sidechain_getAriadneParameters","params":[],"id":1}' \
          http://localhost:9933 | jq -r '.result.permissionedCandidates[0].mainchainPublicKey')
        
        # Release funds
        RELEASE_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_releaseFunds\",\"params\":[\"$REFERENCE_UTXO\",1000000,\"$PAYMENT_KEY\"],\"id\":1}" \
          http://localhost:9933)
        
        # Verify release
        if echo "$RELEASE_RESPONSE" | jq -e '.result.success' > /dev/null; then
          echo "✅ Fund release test passed."
        else
          echo "❌ Failed to release funds"
          exit 1
        fi

    - name: Test Deposit Funds
      shell: bash
      continue-on-error: true
      run: |
        # Get payment key
        PAYMENT_KEY=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"sidechain_getAriadneParameters","params":[],"id":1}' \
          http://localhost:9933 | jq -r '.result.permissionedCandidates[0].mainchainPublicKey')
        
        # Deposit funds
        DEPOSIT_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_depositFunds\",\"params\":[1000000,\"$PAYMENT_KEY\"],\"id\":1}" \
          http://localhost:9933)
        
        # Verify deposit
        if echo "$DEPOSIT_RESPONSE" | jq -e '.result.success' > /dev/null; then
          echo "✅ Fund deposit test passed."
        else
          echo "❌ Failed to deposit funds"
          exit 1
        fi

    - name: Test Handover Reserve
      shell: bash
      continue-on-error: true
      run: |
        # Get payment key
        PAYMENT_KEY=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"sidechain_getAriadneParameters","params":[],"id":1}' \
          http://localhost:9933 | jq -r '.result.permissionedCandidates[0].mainchainPublicKey')
        
        # Handover reserve
        HANDOVER_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_handoverReserve\",\"params\":[\"$PAYMENT_KEY\"],\"id\":1}" \
          http://localhost:9933)
        
        # Verify handover
        if echo "$HANDOVER_RESPONSE" | jq -e '.result.success' > /dev/null; then
          echo "✅ Reserve handover test passed."
        else
          echo "❌ Failed to handover reserve"
          exit 1
        fi
    