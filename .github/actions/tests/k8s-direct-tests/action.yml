name: "Run RPC Tests against K8s Node"
description: "Run end-to-end tests against the ArgoCD node"
inputs:
  namespace:
    description: "K8s namespace"
    required: true
  pod:
    description: "K8s pod name"
    required: true
  env:
    description: "Environment name (e.g., ci-preview, devnet)"
    required: true

outputs: {}

runs:
  using: "composite"
  steps:
    - name: Install kubectl and awscli
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" > /dev/null 2>&1 || { echo "❌ Failed to download kubectl"; exit 1; }
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

        # Install or update AWS CLI v2
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" > /dev/null 2>&1 || { echo "❌ Failed to download AWS CLI"; exit 1; }
        unzip -o awscliv2.zip > /dev/null 2>&1 || { echo "❌ Failed to unzip AWS CLI"; exit 1; }
        sudo ./aws/install --update > /dev/null 2>&1 || { echo "❌ Failed to install AWS CLI"; exit 1; }
      shell: bash

    - name: Configure kubectl
      env:
        KUBECONFIG_BASE64: ${{ env.kubeconfig_base64 }}
        K8S_SERVER: ${{ env.K8S_SERVER }}
        K8S_SA_TOKEN: ${{ env.K8S_SA_TOKEN }}
      run: |
        echo "${KUBECONFIG_BASE64}" | base64 --decode > ${{ runner.temp }}/kubeconfig.yaml || { echo "❌ Failed to decode kubeconfig"; exit 1; }
        kubectl config set-cluster my-cluster --server=${K8S_SERVER} --insecure-skip-tls-verify=true > /dev/null 2>&1 || { echo "❌ Failed to set cluster"; exit 1; }
        kubectl config set-credentials github-actions --token=${K8S_SA_TOKEN} > /dev/null 2>&1 || { echo "❌ Failed to set credentials"; exit 1; }
        kubectl config set-context my-context --cluster=my-cluster --user=github-actions --namespace=default > /dev/null 2>&1 || { echo "❌ Failed to set context"; exit 1; }
        kubectl config use-context my-context > /dev/null 2>&1 || { echo "❌ Failed to use context"; exit 1; }
      shell: bash

    - name: Load Environment Variables
      shell: bash
      run: |
        # Load environment-specific variables
        if [ -f "dev/envs/${{ inputs.env }}/.envrc" ]; then
          set -a
          source "dev/envs/${{ inputs.env }}/.envrc"
          set +a
        else
          echo "❌ Environment file not found: dev/envs/${{ inputs.env }}/.envrc"
          exit 1
        fi
        
        # Load addresses
        if [ -f "dev/envs/${{ inputs.env }}/addresses.json" ]; then
          export COMMITTEE_CANDIDATE_ADDRESS=$(jq -r '.addresses.CommitteeCandidateValidator' "dev/envs/${{ inputs.env }}/addresses.json")
          export D_PARAMETER_POLICY_ID=$(jq -r '.policyIds.DParameter' "dev/envs/${{ inputs.env }}/addresses.json")
          export PERMISSIONED_CANDIDATES_POLICY_ID=$(jq -r '.policyIds.PermissionedCandidates' "dev/envs/${{ inputs.env }}/addresses.json")
          export RESERVE_VALIDATOR_ADDRESS=$(jq -r '.addresses.ReserveValidator' "dev/envs/${{ inputs.env }}/addresses.json")
        else
          echo "❌ Addresses file not found: dev/envs/${{ inputs.env }}/addresses.json"
          exit 1
        fi
        
        # Get genesis UTXO from the node
        echo "Getting genesis UTXO from the node..."
        GENESIS_UTXO_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"sidechain_getParams","params":[],"id":1}' \
          http://localhost:9933)
        
        if ! echo "$GENESIS_UTXO_RESPONSE" | jq -e '.result.genesis_utxo' > /dev/null; then
          echo "❌ Failed to get genesis UTXO: $(echo "$GENESIS_UTXO_RESPONSE" | jq -r '.error.message // "Unknown error"')"
          echo "Full genesis UTXO response: $GENESIS_UTXO_RESPONSE"
          exit 1
        fi
        
        export GENESIS_UTXO=$(echo "$GENESIS_UTXO_RESPONSE" | jq -r '.result.genesis_utxo')
        echo "Genesis UTXO: $GENESIS_UTXO"
        
        # Export other required variables for smart contract tests
        export REGISTRATION_UTXO="a52b139d9b6acfd73dfa2da05c023a7ab006b5656866db68c1d4ce58a56b818b#0"
        export REFERENCE_UTXO="a52b139d9b6acfd73dfa2da05c023a7ab006b5656866db68c1d4ce58a56b818b#0"
        export TRANSACTION_CBOR="0x1234"
        export WITNESSES="0x5678"

    - name: Fetch Sidechain Status
      shell: bash
      run: |
        kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"sidechain_getStatus","params":[],"id":1}' \
          http://localhost:9933 > status.json

    #############################################
    # Smoke Tests / Node Health
    #############################################

    - name: Test Block Production Advances
      shell: bash
      continue-on-error: true
      run: |
        BLOCK1_HEX=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"chain_getHeader","params":[],"id":1}' \
          http://localhost:9933 | jq -r '.result.number')
        BLOCK1=$((BLOCK1_HEX))
    
        sleep 30
    
        BLOCK2_HEX=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"chain_getHeader","params":[],"id":1}' \
          http://localhost:9933 | jq -r '.result.number')
        BLOCK2=$((BLOCK2_HEX))
    
        [[ "$BLOCK2" -gt "$BLOCK1" ]] || { echo "❌ Block number did not increase"; exit 1; }
        echo "✅ Block producing test passed."

    - name: Test Basic Transaction Execution
      shell: bash
      continue-on-error: true
      run: |
        # Get system properties to verify RPC is working
        SYSTEM_PROPERTIES=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"system_properties","params":[],"id":1}' \
          http://localhost:9933)
        
        # Check if system properties response is valid
        if ! echo "$SYSTEM_PROPERTIES" | jq -e '.result' > /dev/null; then
          echo "❌ Failed to get system properties: $(echo "$SYSTEM_PROPERTIES" | jq -r '.error.message // "Unknown error"')"
          exit 1
        fi
        
        # Get chain state to verify transaction processing
        CHAIN_STATE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"chain_getHeader","params":[],"id":1}' \
          http://localhost:9933)
        
        # Check if chain state response is valid
        if ! echo "$CHAIN_STATE" | jq -e '.result' > /dev/null; then
          echo "❌ Failed to get chain state: $(echo "$CHAIN_STATE" | jq -r '.error.message // "Unknown error"')"
          exit 1
        fi
        
        # Verify we can get block information
        if echo "$CHAIN_STATE" | jq -e '.result.number and .result.parentHash' > /dev/null; then
          echo "✅ Basic transaction execution test passed."
        else
          echo "❌ Invalid chain state response"
          echo "Response: $CHAIN_STATE"
          exit 1
        fi

    - name: Test Chain Status Matches Cardano Tip
      shell: bash
      continue-on-error: true
      run: |
        jq -e '
          .result.mainchain.epoch and
          .result.mainchain.slot and
          .result.mainchain.nextEpochTimestamp and
          .result.sidechain.nextEpochTimestamp and
          .result.sidechain.epoch and
          .result.sidechain.slot
        ' status.json || { echo "❌ Invalid status data"; exit 1; }

        echo "✅ Node status test passed."

    - name: Test Genesis Params Returned
      shell: bash
      continue-on-error: true
      run: |
        kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"sidechain_getParams","params":[],"id":1}' \
          http://localhost:9933 | tee /dev/stderr | jq -e '.result.genesis_utxo' || { echo "❌ Missing or invalid genesis UTXO"; exit 1; }
    
        echo "✅ Params test passed."

    #############################################
    # RPC Interface Tests
    #############################################

    - name: Test Ariadne Parameters Structure
      shell: bash
      continue-on-error: true
      run: |
        MC_EPOCH=$(jq '.result.mainchain.epoch' status.json)

        kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getAriadneParameters\",\"params\":[$MC_EPOCH],\"id\":1}" \
          http://localhost:9933 | tee /dev/stderr | jq -e '
            .result.dParameter.numPermissionedCandidates and
            .result.dParameter.numRegisteredCandidates and
            (.result.permissionedCandidates | type == "array") and
            all(.result.permissionedCandidates[]; .sidechainPublicKey and .auraPublicKey and .grandpaPublicKey) and
            (.result.candidateRegistrations | type == "object")
          ' || { echo "❌ Invalid Ariadne parameters"; exit 1; }

        echo "✅ Ariadne parameters valid."

    - name: Test Epoch Committee Present
      shell: bash
      continue-on-error: true
      run: |
        EPOCH=$(jq '.result.sidechain.epoch' status.json)

        kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getEpochCommittee\",\"params\":[$EPOCH],\"id\":1}" \
          http://localhost:9933 | tee /dev/stderr | jq -e '
            .result.sidechainEpoch and
            (.result.committee | length > 0) and
            all(.result.committee[]; .sidechainPubKey)
          ' || { echo "❌ Invalid Epoch Committee response"; exit 1; }

        echo "✅ Epoch committee valid."

    - name: Test Candidate Registrations
      shell: bash
      continue-on-error: true
      run: |
        MC_EPOCH=$(jq '.result.mainchain.epoch' status.json)
    
        MAINCHAIN_KEY=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getAriadneParameters\",\"params\":[$MC_EPOCH],\"id\":1}" \
          http://localhost:9933 | jq -r '.result.candidateRegistrations | keys[0]')
    
        kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getRegistrations\",\"params\":[$MC_EPOCH,\"$MAINCHAIN_KEY\"],\"id\":1}" \
          http://localhost:9933 | tee /dev/stderr | jq -e '
            (.result | length > 0) and
            (.result[0] | 
              .sidechainPubKey and
              .sidechainAccountId and
              .mainchainPubKey and
              .crossChainPubKey and
              .auraPubKey and
              .grandpaPubKey and
              .sidechainSignature and
              .mainchainSignature and
              .crossChainSignature and
              (.isValid | type == "boolean") and
              .stakeDelegation and
              .utxo and
              .utxo.utxoId and
              .utxo.epochNumber and
              .utxo.blockNumber and
              .utxo.slotNumber and
              .utxo.txIndexWithinBlock
            )
          ' || { echo "❌ Invalid Registrations response"; exit 1; }
    
        echo "✅ Registrations valid."

    #############################################
    # Committee Tests
    #############################################

    - name: Test Committee Ratio Compliance
      shell: bash
      continue-on-error: true
      run: |
        # Get current epoch committee
        echo "Getting current epoch committee..."
        COMMITTEE_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"sidechain_getEpochCommittee","params":[],"id":1}' \
          http://localhost:9933)
        
        # Check if committee response is valid
        if ! echo "$COMMITTEE_RESPONSE" | jq -e '.result' > /dev/null; then
          echo "❌ Failed to get epoch committee: $(echo "$COMMITTEE_RESPONSE" | jq -r '.error.message // "Unknown error"')"
          echo "Full committee response: $COMMITTEE_RESPONSE"
          exit 1
        fi
        
        # Get current d-parameter
        echo "Getting current d-parameter..."
        D_PARAM_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"sidechain_getDParameter","params":[],"id":1}' \
          http://localhost:9933)
        
        # Check if d-parameter response is valid
        if ! echo "$D_PARAM_RESPONSE" | jq -e '.result' > /dev/null; then
          echo "❌ Failed to get d-parameter: $(echo "$D_PARAM_RESPONSE" | jq -r '.error.message // "Unknown error"')"
          echo "Full d-parameter response: $D_PARAM_RESPONSE"
          exit 1
        fi
        
        D_PARAM=$(echo "$D_PARAM_RESPONSE" | jq -r '.result')
        
        if [ -z "$D_PARAM" ] || [ "$D_PARAM" = "null" ]; then
          echo "❌ Invalid d-parameter received"
          exit 1
        fi
        
        echo "Current d-parameter: $D_PARAM"
        
        # Calculate expected ratio
        EXPECTED_RATIO=$(echo "scale=4; $D_PARAM / 100" | bc)
        echo "Expected ratio: $EXPECTED_RATIO"
        
        # Get committee members and calculate actual ratio
        COMMITTEE_MEMBERS=$(echo "$COMMITTEE_RESPONSE" | jq -r '.result.committee | length')
        PERMISSIONED_MEMBERS=$(echo "$COMMITTEE_RESPONSE" | jq -r '.result.committee | map(select(.sidechainPubKey | startswith("0x02"))) | length')
        
        if [ "$COMMITTEE_MEMBERS" -eq 0 ]; then
          echo "❌ No committee members found"
          exit 1
        fi
        
        ACTUAL_RATIO=$(echo "scale=4; $PERMISSIONED_MEMBERS / $COMMITTEE_MEMBERS" | bc)
        echo "Actual ratio: $ACTUAL_RATIO"
        
        # Compare ratios with tolerance
        TOLERANCE=0.1
        RATIO_DIFF=$(echo "scale=4; $ACTUAL_RATIO - $EXPECTED_RATIO" | bc)
        RATIO_DIFF_ABS=$(echo "scale=4; if ($RATIO_DIFF < 0) -($RATIO_DIFF) else $RATIO_DIFF fi" | bc)
        
        if (( $(echo "$RATIO_DIFF_ABS <= $TOLERANCE" | bc -l) )); then
          echo "✅ Committee ratio compliance test passed."
          echo "Expected ratio: $EXPECTED_RATIO"
          echo "Actual ratio: $ACTUAL_RATIO"
          echo "Difference: $RATIO_DIFF (within tolerance of $TOLERANCE)"
        else
          echo "❌ Committee ratio compliance test failed."
          echo "Expected ratio: $EXPECTED_RATIO"
          echo "Actual ratio: $ACTUAL_RATIO"
          echo "Difference: $RATIO_DIFF (exceeds tolerance of $TOLERANCE)"
          exit 1
        fi

    - name: Test Committee Members Rotate
      shell: bash
      continue-on-error: true
      run: |
        # Get current PC epoch
        PC_EPOCH=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"sidechain_getStatus","params":[],"id":1}' \
          http://localhost:9933 | jq -r '.result.sidechain.epoch')
        
        # Get committee for current epoch
        CURRENT_COMMITTEE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getEpochCommittee\",\"params\":[$PC_EPOCH],\"id\":1}" \
          http://localhost:9933)
        
        # Extract current committee member public keys
        CURRENT_KEYS=$(echo "$CURRENT_COMMITTEE" | jq -r '.result.committee[].sidechainPubKey')
        
        # Get committee for next epoch
        NEXT_PC_EPOCH=$((PC_EPOCH + 1))
        NEXT_COMMITTEE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getEpochCommittee\",\"params\":[$NEXT_PC_EPOCH],\"id\":1}" \
          http://localhost:9933)
        
        # Extract next committee member public keys
        NEXT_KEYS=$(echo "$NEXT_COMMITTEE" | jq -r '.result.committee[].sidechainPubKey')
        
        # Check if committees are different
        if [ "$CURRENT_KEYS" = "$NEXT_KEYS" ]; then
          echo "❌ Committee members did not rotate between epochs $PC_EPOCH and $NEXT_PC_EPOCH"
          exit 1
        else
          echo "✅ Committee rotation test passed. Members changed between epochs $PC_EPOCH and $NEXT_PC_EPOCH"
        fi

    - name: Test Authorities Match Committee
      shell: bash
      continue-on-error: true
      run: |
        # Get current PC epoch
        PC_EPOCH=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"sidechain_getStatus","params":[],"id":1}' \
          http://localhost:9933 | jq -r '.result.sidechain.epoch')
        
        echo "Current PC epoch: $PC_EPOCH"
        
        if [ -z "$PC_EPOCH" ] || [ "$PC_EPOCH" = "null" ]; then
          echo "❌ Failed to get current PC epoch"
          exit 1
        fi
        
        # Get epoch committee for current epoch
        echo "Getting epoch committee for epoch $PC_EPOCH..."
        COMMITTEE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getEpochCommittee\",\"params\":[$PC_EPOCH],\"id\":1}" \
          http://localhost:9933)
        
        # Check if committee data is valid
        if ! echo "$COMMITTEE" | jq -e '.result' > /dev/null; then
          echo "❌ Failed to get committee data: $(echo "$COMMITTEE" | jq -r '.error.message // "Unknown error"')"
          echo "Full committee response: $COMMITTEE"
          exit 1
        fi
        
        # Get authorities list
        echo "Getting authorities list..."
        AUTHORITIES=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"authority_set","params":[],"id":1}' \
          http://localhost:9933)
        
        # Check if authorities data is valid
        if ! echo "$AUTHORITIES" | jq -e '.result' > /dev/null; then
          echo "❌ Failed to get authorities data: $(echo "$AUTHORITIES" | jq -r '.error.message // "Unknown error"')"
          echo "Full authorities response: $AUTHORITIES"
          echo "Available RPC methods:"
          kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
            curl -s -H "Content-Type: application/json" \
            -d '{"jsonrpc":"2.0","method":"rpc_methods","params":[],"id":1}' \
            http://localhost:9933 | jq '.result.methods'
          exit 1
        fi
        
        # Extract committee member public keys
        COMMITTEE_KEYS=$(echo "$COMMITTEE" | jq -r '.result.committee[].sidechainPubKey')
        
        if [ -z "$COMMITTEE_KEYS" ]; then
          echo "❌ No committee members found"
          echo "Committee data: $COMMITTEE"
          exit 1
        fi
        
        echo "Committee members: $COMMITTEE_KEYS"
        
        # Extract authority addresses
        AUTHORITY_ADDRESSES=$(echo "$AUTHORITIES" | jq -r '.result[]')
        
        if [ -z "$AUTHORITY_ADDRESSES" ]; then
          echo "❌ No authorities found"
          echo "Authorities data: $AUTHORITIES"
          exit 1
        fi
        
        echo "Authorities: $AUTHORITY_ADDRESSES"
        
        # Check if all committee members are in authorities
        for KEY in $COMMITTEE_KEYS; do
          if ! echo "$AUTHORITY_ADDRESSES" | grep -q "$KEY"; then
            echo "❌ Committee member $KEY not found in authorities"
            exit 1
          fi
        done
        
        # Check if all authorities are in committee
        for ADDR in $AUTHORITY_ADDRESSES; do
          if ! echo "$COMMITTEE_KEYS" | grep -q "$ADDR"; then
            echo "❌ Authority $ADDR not found in committee"
            exit 1
          fi
        done
        
        echo "✅ Authorities match committee test passed."

    #############################################
    # Delegator Rewards Tests
    #############################################

    - name: Test Delegator Address Association
      shell: bash
      continue-on-error: true
      run: |
        # Get current MC epoch
        MC_EPOCH=$(jq '.result.mainchain.epoch' status.json)
        echo "Current MC epoch: $MC_EPOCH"
        
        # Get Ariadne parameters with epoch
        echo "Getting Ariadne parameters for epoch $MC_EPOCH..."
        ARIADNE_PARAMS=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getAriadneParameters\",\"params\":[$MC_EPOCH],\"id\":1}" \
          http://localhost:9933)
        
        # Check if Ariadne parameters response is valid
        if ! echo "$ARIADNE_PARAMS" | jq -e '.result' > /dev/null; then
          echo "❌ Failed to get Ariadne parameters: $(echo "$ARIADNE_PARAMS" | jq -r '.error.message // "Unknown error"')"
          echo "Full Ariadne parameters response: $ARIADNE_PARAMS"
          exit 1
        fi
        
        # Get stake key hash from the first permissioned candidate
        echo "Extracting stake key hash from first permissioned candidate..."
        STAKE_KEY_HASH=$(echo "$ARIADNE_PARAMS" | jq -r '.result.permissionedCandidates[0].sidechainPublicKey')
        
        if [ -z "$STAKE_KEY_HASH" ] || [ "$STAKE_KEY_HASH" = "null" ]; then
          echo "❌ Failed to get stake key hash from Ariadne parameters"
          echo "Permissioned candidates: $(echo "$ARIADNE_PARAMS" | jq -r '.result.permissionedCandidates')"
          exit 1
        fi
        
        echo "Stake key hash: $STAKE_KEY_HASH"
        
        # Get address association
        echo "Getting address association for stake key hash $STAKE_KEY_HASH..."
        ASSOCIATION=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getAddressAssociation\",\"params\":[\"$STAKE_KEY_HASH\"],\"id\":1}" \
          http://localhost:9933)
        
        # Check if association response is valid
        if ! echo "$ASSOCIATION" | jq -e '.result' > /dev/null; then
          echo "❌ Failed to get address association: $(echo "$ASSOCIATION" | jq -r '.error.message // "Unknown error"')"
          echo "Full association response: $ASSOCIATION"
          exit 1
        fi
        
        # Verify association exists and has valid signature
        if echo "$ASSOCIATION" | jq -e '.result.address and .result.signature' > /dev/null; then
          echo "✅ Address association test passed."
        else
          echo "❌ Invalid address association response format"
          echo "Response: $ASSOCIATION"
          exit 1
        fi

    - name: Test Block Production Log
      shell: bash
      continue-on-error: true
      run: |
        # Get latest block hash
        echo "Getting latest block hash..."
        BLOCK_HASH_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"chain_getHeader","params":[],"id":1}' \
          http://localhost:9933)
        
        # Check if block hash response is valid
        if ! echo "$BLOCK_HASH_RESPONSE" | jq -e '.result' > /dev/null; then
          echo "❌ Failed to get block hash: $(echo "$BLOCK_HASH_RESPONSE" | jq -r '.error.message // "Unknown error"')"
          echo "Full block hash response: $BLOCK_HASH_RESPONSE"
          exit 1
        fi
        
        # Extract the block hash from the response
        BLOCK_HASH=$(echo "$BLOCK_HASH_RESPONSE" | jq -r '.result.parentHash')
        
        if [ -z "$BLOCK_HASH" ] || [ "$BLOCK_HASH" = "null" ]; then
          echo "❌ Invalid block hash received"
          exit 1
        fi
        
        echo "Block hash: $BLOCK_HASH"
        
        # Get block production log
        echo "Getting block production log for block hash $BLOCK_HASH..."
        PRODUCTION_LOG=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          curl -s -H "Content-Type: application/json" \
          -d "{\"jsonrpc\":\"2.0\",\"method\":\"sidechain_getBlockProductionLog\",\"params\":[\"$BLOCK_HASH\"],\"id\":1}" \
          http://localhost:9933)
        
        # Check if production log response is valid
        if ! echo "$PRODUCTION_LOG" | jq -e '.result' > /dev/null; then
          echo "❌ Failed to get block production log: $(echo "$PRODUCTION_LOG" | jq -r '.error.message // "Unknown error"')"
          echo "Full production log response: $PRODUCTION_LOG"
          exit 1
        fi
        
        # Verify production log exists and has valid format
        if echo "$PRODUCTION_LOG" | jq -e '.result.blockHash and .result.producer and .result.timestamp' > /dev/null; then
          echo "✅ Block production log test passed."
        else
          echo "❌ Invalid block production log response format"
          echo "Response: $PRODUCTION_LOG"
          exit 1
        fi

    #############################################
    # Smart Contract Tests
    #############################################

    - name: Test Smart Contract Methods
      shell: bash
      continue-on-error: true
      run: |
        echo "Testing smart contract CLI commands..."
        
        # Test get-scripts
        echo "Testing get-scripts..."
        SCRIPTS_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          /usr/local/bin/partner-chains-node smart-contracts get-scripts \
          --genesis-utxo "$GENESIS_UTXO" \
          --ogmios-url http://localhost:1337)
        
        if [ $? -eq 0 ]; then
          echo "✅ Get scripts test passed"
        else
          echo "❌ Get scripts failed: $SCRIPTS_RESPONSE"
          exit 1
        fi
        
        # Test upsert-d-parameter
        echo "Testing upsert-d-parameter..."
        D_PARAM_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          /usr/local/bin/partner-chains-node smart-contracts upsert-d-parameter \
          --permissioned-candidates-count 3 \
          --registered-candidates-count 7 \
          --payment-key-file /data/keys/payment.skey \
          --genesis-utxo "$GENESIS_UTXO" \
          --ogmios-url http://localhost:1337)
        
        if [ $? -eq 0 ]; then
          echo "✅ Upsert D parameter test passed"
        else
          echo "❌ Upsert D parameter failed: $D_PARAM_RESPONSE"
          exit 1
        fi
        
        # Test upsert-permissioned-candidates
        echo "Testing upsert-permissioned-candidates..."
        PERM_CANDIDATES_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          /usr/local/bin/partner-chains-node smart-contracts upsert-permissioned-candidates \
          --payment-key-file /data/keys/payment.skey \
          --genesis-utxo "$GENESIS_UTXO" \
          --permissioned-candidates-file /data/keys/permissioned_candidates.csv \
          --ogmios-url http://localhost:1337)
        
        if [ $? -eq 0 ]; then
          echo "✅ Upsert permissioned candidates test passed"
        else
          echo "❌ Upsert permissioned candidates failed: $PERM_CANDIDATES_RESPONSE"
          exit 1
        fi
        
        # Test register candidate
        echo "Testing register candidate..."
        REGISTER_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          /usr/local/bin/partner-chains-node smart-contracts register \
          --payment-key-file /data/keys/payment.skey \
          --genesis-utxo "$GENESIS_UTXO" \
          --spo-public-key /data/keys/spo.pubkey \
          --sidechain-public-keys /data/keys/sidechain.pubkey \
          --spo-signature /data/keys/spo.sig \
          --sidechain-signature /data/keys/sidechain.sig \
          --registration-utxo "$REGISTRATION_UTXO" \
          --ogmios-url http://localhost:1337)
        
        if [ $? -eq 0 ]; then
          echo "✅ Register candidate test passed"
        else
          echo "❌ Register candidate failed: $REGISTER_RESPONSE"
          exit 1
        fi
        
        # Test deregister candidate
        echo "Testing deregister candidate..."
        DEREGISTER_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          /usr/local/bin/partner-chains-node smart-contracts deregister \
          --payment-key-file /data/keys/payment.skey \
          --genesis-utxo "$GENESIS_UTXO" \
          --spo-public-key /data/keys/spo.pubkey \
          --ogmios-url http://localhost:1337)
        
        if [ $? -eq 0 ]; then
          echo "✅ Deregister candidate test passed"
        else
          echo "❌ Deregister candidate failed: $DEREGISTER_RESPONSE"
          exit 1
        fi
        
        # Test reserve commands
        echo "Testing reserve commands..."
        
        # Test reserve initialization
        echo "Testing reserve initialization..."
        INIT_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          /usr/local/bin/partner-chains-node smart-contracts reserve init \
          --payment-key-file /data/keys/payment.skey \
          --genesis-utxo "$GENESIS_UTXO" \
          --ogmios-url http://localhost:1337)
        
        if [ $? -eq 0 ]; then
          echo "✅ Reserve initialization test passed"
        else
          echo "❌ Reserve initialization failed: $INIT_RESPONSE"
          exit 1
        fi
        
        # Test reserve creation
        echo "Testing reserve creation..."
        CREATE_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          /usr/local/bin/partner-chains-node smart-contracts reserve create \
          --total-accrued-function-script-hash 0x1234 \
          --initial-deposit-amount 1000000 \
          --token lovelace \
          --payment-key-file /data/keys/payment.skey \
          --genesis-utxo "$GENESIS_UTXO" \
          --ogmios-url http://localhost:1337)
        
        if [ $? -eq 0 ]; then
          echo "✅ Reserve creation test passed"
        else
          echo "❌ Reserve creation failed: $CREATE_RESPONSE"
          exit 1
        fi
        
        # Test reserve deposit
        echo "Testing reserve deposit..."
        DEPOSIT_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          /usr/local/bin/partner-chains-node smart-contracts reserve deposit \
          --amount 100000 \
          --payment-key-file /data/keys/payment.skey \
          --genesis-utxo "$GENESIS_UTXO" \
          --ogmios-url http://localhost:1337)
        
        if [ $? -eq 0 ]; then
          echo "✅ Reserve deposit test passed"
        else
          echo "❌ Reserve deposit failed: $DEPOSIT_RESPONSE"
          exit 1
        fi
        
        # Test reserve update settings
        echo "Testing reserve update settings..."
        UPDATE_SETTINGS_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          /usr/local/bin/partner-chains-node smart-contracts reserve update-settings \
          --total-accrued-function-script-hash 0x1234 \
          --payment-key-file /data/keys/payment.skey \
          --genesis-utxo "$GENESIS_UTXO" \
          --ogmios-url http://localhost:1337)
        
        if [ $? -eq 0 ]; then
          echo "✅ Reserve update settings test passed"
        else
          echo "❌ Reserve update settings failed: $UPDATE_SETTINGS_RESPONSE"
          exit 1
        fi
        
        # Test reserve handover
        echo "Testing reserve handover..."
        HANDOVER_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          /usr/local/bin/partner-chains-node smart-contracts reserve handover \
          --payment-key-file /data/keys/payment.skey \
          --genesis-utxo "$GENESIS_UTXO" \
          --ogmios-url http://localhost:1337)
        
        if [ $? -eq 0 ]; then
          echo "✅ Reserve handover test passed"
        else
          echo "❌ Reserve handover failed: $HANDOVER_RESPONSE"
          exit 1
        fi
        
        # Test reserve release
        echo "Testing reserve release..."
        RELEASE_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          /usr/local/bin/partner-chains-node smart-contracts reserve release \
          --reference-utxo "$REFERENCE_UTXO" \
          --amount 100000 \
          --payment-key-file /data/keys/payment.skey \
          --genesis-utxo "$GENESIS_UTXO" \
          --ogmios-url http://localhost:1337)
        
        if [ $? -eq 0 ]; then
          echo "✅ Reserve release test passed"
        else
          echo "❌ Reserve release failed: $RELEASE_RESPONSE"
          exit 1
        fi
        
        # Test governance commands
        echo "Testing governance commands..."
        
        # Test governance update
        echo "Testing governance update..."
        GOVERNANCE_UPDATE_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          /usr/local/bin/partner-chains-node smart-contracts governance update \
          --payment-key-file /data/keys/payment.skey \
          --genesis-utxo "$GENESIS_UTXO" \
          --governance-authority /data/keys/governance.pubkey \
          --threshold 1 \
          --ogmios-url http://localhost:1337)
        
        if [ $? -eq 0 ]; then
          echo "✅ Governance update test passed"
        else
          echo "❌ Governance update failed: $GOVERNANCE_UPDATE_RESPONSE"
          exit 1
        fi
        
        # Test governance get policy
        echo "Testing governance get policy..."
        GOVERNANCE_POLICY_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          /usr/local/bin/partner-chains-node smart-contracts governance get-policy \
          --genesis-utxo "$GENESIS_UTXO" \
          --ogmios-url http://localhost:1337)
        
        if [ $? -eq 0 ]; then
          echo "✅ Governance get policy test passed"
        else
          echo "❌ Governance get policy failed: $GOVERNANCE_POLICY_RESPONSE"
          exit 1
        fi
        
        # Test transaction signing and submission
        echo "Testing transaction signing and submission..."
        
        # Test sign transaction
        echo "Testing sign transaction..."
        SIGN_TX_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          /usr/local/bin/partner-chains-node smart-contracts sign-tx \
          --transaction "$TRANSACTION_CBOR" \
          --payment-key-file /data/keys/payment.skey)
        
        if [ $? -eq 0 ]; then
          echo "✅ Sign transaction test passed"
        else
          echo "❌ Sign transaction failed: $SIGN_TX_RESPONSE"
          exit 1
        fi
        
        # Test assemble and submit transaction
        echo "Testing assemble and submit transaction..."
        ASSEMBLE_TX_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          /usr/local/bin/partner-chains-node smart-contracts assemble-and-submit-tx \
          --transaction "$TRANSACTION_CBOR" \
          --witnesses "$WITNESSES" \
          --ogmios-url http://localhost:1337)
        
        if [ $? -eq 0 ]; then
          echo "✅ Assemble and submit transaction test passed"
        else
          echo "❌ Assemble and submit transaction failed: $ASSEMBLE_TX_RESPONSE"
          exit 1
        fi
        
        # Test governed map commands
        echo "Testing governed map commands..."
        
        # Test governed map get
        echo "Testing governed map get..."
        MAP_GET_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          /usr/local/bin/partner-chains-node smart-contracts governed-map get \
          --key test_key \
          --genesis-utxo "$GENESIS_UTXO" \
          --ogmios-url http://localhost:1337)
        
        if [ $? -eq 0 ]; then
          echo "✅ Governed map get test passed"
        else
          echo "❌ Governed map get failed: $MAP_GET_RESPONSE"
          exit 1
        fi
        
        # Test governed map put
        echo "Testing governed map put..."
        MAP_PUT_RESPONSE=$(kubectl exec "${{ inputs.pod }}" -c substrate-node -n "${{ inputs.namespace }}" -- \
          /usr/local/bin/partner-chains-node smart-contracts governed-map put \
          --key test_key \
          --value test_value \
          --payment-key-file /data/keys/payment.skey \
          --genesis-utxo "$GENESIS_UTXO" \
          --ogmios-url http://localhost:1337)
        
        if [ $? -eq 0 ]; then
          echo "✅ Governed map put test passed"
        else
          echo "❌ Governed map put failed: $MAP_PUT_RESPONSE"
          exit 1
        fi
        
        echo "✅ All smart contract tests passed"
    