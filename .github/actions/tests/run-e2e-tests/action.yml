name: 'Run Pytest Tests'
description: 'Activate Python virtual environment and run end-to-end tests'

inputs:
  env:
    description: 'Test environment'
    required: true
  keyword:
    description: 'Run tests by keyword (-k)'
    required: false
    default: 'test_'
  markers:
    description: 'Run tests by markers (-m)'
    required: false
    default: 'not active_flow and not passive_flow and not probability'
  mc_epoch:
    description: 'MC epoch to test (committee tests)'
    required: false
  latest_mc_epoch:
    description: 'Parametrize committee tests to verify the whole last MC epoch'
    required: false
  deployment_mc_epoch:
    description: 'Deployment MC epoch'
    required: false
  log_level:
    description: 'Log CLI level'
    required: false
    default: 'info'
  init_timestamp:
    description: 'MC initialization timestamp in seconds'
    required: false
    default: '0'
  blockchain:
    description: 'Blockchain to test'
    required: true
  local-environment:
    description: 'Run tests in local environment (true or false)'
    required: false
    default: 'false'
  decrypt:
    description: 'Decrypt secrets'
    required: false
  threads:
    description: 'Number of threads to use'
    required: false
    default: '4'

runs:
  using: composite
  steps:
    - name: Run tests
      id: run-tests
      continue-on-error: true
      shell: bash
      run: |
        mc_epoch_switch=""
        if [ -n "${{ inputs.mc_epoch }}" ]; then
          mc_epoch_switch="--mc-epoch '${{ inputs.mc_epoch }}'"
        fi

        latest_mc_epoch_switch=""
        if [ "${{ inputs.latest_mc_epoch }}" = "true" ]; then
          latest_mc_epoch_switch="--latest-mc-epoch"
        fi

        deployment_mc_epoch_switch=""
        if [ -n "${{ inputs.deployment_mc_epoch }}" ]; then
          deployment_mc_epoch_switch="--deployment-mc-epoch '${{ inputs.deployment_mc_epoch }}'"
        fi

        decrypt_switch=""
        if [ "${{ inputs.decrypt }}" = "true" ]; then
          decrypt_switch="--decrypt"
        fi

        pytest_cmd="pytest --blockchain '${{ inputs.blockchain }}' \
          --env '${{ inputs.env }}' \
          --stack '${{ inputs.env }}' \
          --log-cli-level '${{ inputs.log_level }}' \
          -k '${{ inputs.keyword }}' \
          -m '${{ inputs.markers }}' \
          -n '${{ inputs.threads}}' \
          --dist=loadgroup \
          --ci-run \
          --init-timestamp '${{ inputs.init_timestamp }}' \
          ${mc_epoch_switch} \
          ${latest_mc_epoch_switch} \
          ${deployment_mc_epoch_switch} \
          ${decrypt_switch} \
          --json-report \
          --json-report-summary \
          --junitxml=junit_report.xml"

        if [[ "${{ inputs.local-environment }}" == "true" ]]; then
          echo "Running tests via docker exec"
          docker exec tests bash -c "
            cd /e2e-tests &&
            source venv/bin/activate &&
            $pytest_cmd
          "
        else
          echo "Running tests locally"
          cd e2e-tests
          source venv/bin/activate
          eval "$pytest_cmd"
        fi
    - name: Copy .report.json if run with docker exec
      if: ${{ inputs.local-environment == 'true' }}
      run: |
        echo "Copy test results from docker container"
        mkdir -p e2e-tests
        docker cp tests:/e2e-tests/.report.json e2e-tests/.report.json
      shell: bash
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: e2e-tests/.report.json
        overwrite: true
        if-no-files-found: error
        include-hidden-files: true
    - name: Fail the job
      if: ${{ steps.run-tests.outcome == 'failure' }}
      run: exit 1
      shell: bash
