//! Autogenerated weights for `pallet_cardano_config`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-01-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `substrate-benchmark`, CPU: `Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/production/substrate-node
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_cardano_config
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/cardano-config/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_cardano_config`.
pub trait WeightInfo {
	fn set_cardano_config() -> Weight;
}

/// Weights for `pallet_cardano_config` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `CardanoConfig::CardanoConfiguration` (r:1 w:1)
	/// Proof: `CardanoConfig::CardanoConfiguration` (`max_values`: Some(1), `max_size`: Some(128), added: 623, mode: `MaxEncodedLen`)
	/// Storage: `CardanoConfig::MainchainEpochConfiguration` (r:0 w:1)
	/// Proof: `CardanoConfig::MainchainEpochConfiguration` (`max_values`: Some(1), `max_size`: Some(64), added: 559, mode: `MaxEncodedLen`)
	/// Storage: `CardanoConfig::CardanoSecurityParameter` (r:0 w:1)
	/// Proof: `CardanoConfig::CardanoSecurityParameter` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CardanoConfig::CardanoActiveSlotsCoeff` (r:0 w:1)
	/// Proof: `CardanoConfig::CardanoActiveSlotsCoeff` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_cardano_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1613`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 1613)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `CardanoConfig::CardanoConfiguration` (r:1 w:1)
	/// Proof: `CardanoConfig::CardanoConfiguration` (`max_values`: Some(1), `max_size`: Some(128), added: 623, mode: `MaxEncodedLen`)
	/// Storage: `CardanoConfig::MainchainEpochConfiguration` (r:0 w:1)
	/// Proof: `CardanoConfig::MainchainEpochConfiguration` (`max_values`: Some(1), `max_size`: Some(64), added: 559, mode: `MaxEncodedLen`)
	/// Storage: `CardanoConfig::CardanoSecurityParameter` (r:0 w:1)
	/// Proof: `CardanoConfig::CardanoSecurityParameter` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CardanoConfig::CardanoActiveSlotsCoeff` (r:0 w:1)
	/// Proof: `CardanoConfig::CardanoActiveSlotsCoeff` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_cardano_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1613`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 1613)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
}
