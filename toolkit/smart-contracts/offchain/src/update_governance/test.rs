use super::{test_values, update_governance_tx};
use crate::cardano_keys::CardanoPaymentSigningKey;
use crate::csl::{Costs, TransactionContext, empty_asset_name, key_hash_address};
use crate::governance::{GovernanceData, MultiSigParameters};
use crate::plutus_script;
use crate::test_values::{protocol_parameters, test_governance_policy};
use cardano_serialization_lib::*;
use hex_literal::hex;
use ogmios_client::types::{Asset, Datum, OgmiosTx, OgmiosUtxo, OgmiosValue};
use pretty_assertions::assert_eq;
use raw_scripts::RawScript;
use sidechain_domain::MainchainKeyHash;

fn payment_key() -> CardanoPaymentSigningKey {
	CardanoPaymentSigningKey::from_normal_bytes(hex!(
		"94f7531c9639654b77fa7e10650702b6937e05cd868f419f54bcb8368e413f04"
	))
	.unwrap()
}

fn payment_key_address() -> Address {
	key_hash_address(&payment_key().0.to_public().hash(), NetworkIdKind::Testnet)
}

fn test_address_bech32() -> String {
	"addr_test1vpmd59ajuvm34d723r8q2qzyz9ylq0x9pygqn7vun8qgpkgs7y5hw".into()
}

fn payment_utxo() -> OgmiosUtxo {
	OgmiosUtxo {
		transaction: OgmiosTx {
			id: hex!("1bc6eeebd308616860384b9748801d586a93a7291faedb464e73e9f6355e392b"),
		},
		index: 0,
		value: OgmiosValue { lovelace: 9922945937, native_tokens: [].into() },
		address: test_address_bech32(),

		..OgmiosUtxo::default()
	}
}

const VERSION_ORACLE_POLICY: RawScript = RawScript(&hex!(
	"5909df0100003322323233223232323232323322232323232323232323232323232323232322225335323232325335333573466e1d200035573a00204e04c2646464666a00e464a66a6602a4c664600200244a66a00220444426466602c6ae84d5d11aab9e3754006444466605a0044a66a6464a66a6605a6ae84008d5d0800899299a98009aba13574400642a66a60046ae84d5d1001909929919a999ab9a3370e90001aab9d00203d03c1325335333573466e1d200035573a00207c07a2660666ae84d55cf0019aba135573c00226004931baa003130014988ccc0cc010888ccc0d80188894cd4ccd5cd19b8700600304304215335333573466e1c01400810c1084ccd5cd19b87004001043042104210422040203d375400420722a66a60026ae84d5d10011081c881c980f017881b9aab9e375402e6aae78dd5002899199180080091299a800880491099299a801909a80091299a9981e80100a8a99a9981e99981300680c2450e56657273696f6e206f7261636c6500480084cc0240fc010401040104004cc010010004cc004c0c00080ad40a4401880188008cc010010004c004ccc06801c06005c54cd54cd54cd4cc8c004004894cd40044088884c94cd4ccd5cd19b8933301837566ae84d5d11aab9e375400601491010e56657273696f6e206f7261636c6500480000c00c44cd40900ac0044004cc010010004c004c06401c40b08840b440b040ac54cd4cc03801402840b040ac40ac40acc054088894cd54cd4c034ccc06801c06005c40b040ac54cd4cc05498cc01000800454cd5400c40b040ac40ac40ac894cd4cc05498cc01000800454cd54cd4cc03801402840b040ac54cd5400c40b040ac40ac40ac4cc09cccc040ccc05c0100340300092210e56657273696f6e206f7261636c65004800888cc8c004004894cd40044080884c8ccc05000c8888ccc0ac00894cd4008854cd4c8c94cd4cc0b0d5d08011aba100113253353001357426ae8800c854cd4c008d5d09aba20032132532335333573466e1d200035573a004078076264a66a666ae68cdc3a40006aae740040f40f04cc0c8d5d09aab9e003357426aae780044c0092637540062600293119981900211119981a803111299a999ab9a3370e00c0060840822a66a666ae68cdc38028010210208999ab9a3370e00800208408220822082407e40786ea800840e054cd4c004d5d09aba2002210381038301d02e103635573c6ea8058d55cf1baa0061323323001001225335001100a22132533500321350012253353303c00201615335333573466e3c0280540f80f454cd4cc0f0ccc09403805d22010e56657273696f6e206f7261636c6500480084cc0240f80104010401040104004cc010010004cc004c0bc00c0a940a0401c401880188008cc010010004cc050084c05c014dd71aba135573c0022c6ea8d5d09aba2002357420026aae78dd5001191919299a999ab9a3370e9000001013012899910911198010028021bad357420026eb8d5d09aba200115335333573466e1d200200202602513322122233001005004375a6ae84004dd71aba1357440022a66a666ae68cdc3a400800404c04a264244460060086eb4d5d08008b1aab9e00235573a0026ea8008526163230010012233301e020225335325335333573466e3cc04c058c04c00409008c4ccd5cd19b87301501630150010240231023357426aae78dd500108118998020020008009119299a99299aa99a998051ba95335332300100122533500110182213233300c357426ae88d55cf1baa0032222325335333573466e1d200435573a0020580562a66a0044264664600200244a66a002201444264a66a006426a00244a66a6606800490200a99a999ab9a3370e900119980e80700c2450e56657273696f6e206f7261636c650003603513300900a00410041004100133004004001330013027357426aae7800c089408040184018dd5001100119802002000999180080091981000b9119a80c001198018018009991800800919810198018078071119aba0002330030030013300222222222222200b261622153350011002221600121301f37560022a03a42603e66460020024660420304466a032664424660020060046eb8d55ce8011bad35573c004660060060020022a03a6600200a00842a66a00220424426a00444a66a0062666ae68cdc4800a400004a04c44204e2040601c6ae84d55cf1baa001262222222222220082223232323333005357420066eacd5d08011aba10013300775c6ae84d5d10009aba2001357440026aae78dd500191191919299a999ab9a3370e900100100f80f0a80d0a99a999ab9a3370e900000100f80f0980d98029aba10011635573c0046aae74004dd500091119a998021ba900200323233533006375200600246eb400520003756002900011199180080091980c280b1299a999ab9a3375e0086aae7400407006c48c064d55cf001091980180180080091299a80089801009910a99a8008801110980300b919180080091980a8061119a8069802001198018018009311111111111100611998010009111111111110051311119191919191919191919191999999999998069bac357420166eb0d5d08051bac357420126eacd5d08041bab3574200e6eb0d5d08031bab3574200a6ae84010dd61aba100337566ae84008dd59aba10013010357426ae88004d5d10009aba2001357440026ae88004d5d10009aba2001357440026ae88004d5d10009aba200135573c6ea800c8c008d5d09aab9e37540024646464a66a666ae68cdc3a400000402802626eb8d5d08008b1aab9e00235573a0026ea80048dd69aba1357446aae78dd500089100109109119800802001911929919a999ab9a3370e90001aab9d00200f00e1325335333573466e1d200035573a00202001e2666ae68cdc79bae357426aae7800cdd71aba135573c00202001e26004931baa0031300149894cd4ccd5cd19b8748008d55ce801007807099299a999ab9a3370e90011aab9d00101000f1333573466e3cdd71aba135573c0066eb8d5d09aab9e00101000f100f3754006201c6ea8008888c94cd4ccd5cd19b8748008d55ce800807006899191998029bad357420046eb4d5d08009bad357426ae88004d5d10009aab9e00113002498dd5001900091119299a999ab9a3370e90021aab9d00100c00b13003357426aae780044c00926375400646666666ae9000494010940108c8cccc01c940188894cc8d4cccccc00489402c94028940288488c00800c9402801084cccc0309402c8894cd4cccccc01489403c9403894038940388488c00800c00c84cccc0408488c00848cc004024014889404400c034540340100248888894cccccd5d2000899198039aab9d00135573c0026ea80044c014dd5800898021bac00113003375a002260046eb800454020004010dd60011280212802001090009091180100188910009112999aab9f0011003133002357420026ae8800488ccd5cd19b870020010040031220021220011"
));
const VERSION_ORACLE_VALIDATOR: RawScript = RawScript(&hex!(
	"5906fc01000033223232323233222222533532323500222323322323232323232323232323232325335333573466e1d200235573a6ea8d5d09aba200102001f13253355335533532533553353300f3752a66a664600200244a66a002203c442646660166ae84d5d11aab9e3754006444464a66a666ae68cdc3a40086aae740040b00ac54cd400884cc8c004004894cd40044024884c94cd400c84d4004894cd4cc0cc009204015335333573466e1d200233302100d0264890e56657273696f6e206f7261636c6500035034133502e009004100410041001330040040013233502700102832333333357480024a03a4a03a46466660404a03e444a66a66666606044a0464a0444a044424460040064a0440064266660484a046444a66a66666606844a04e4a04c4a04c4a04c4244600400600642666605042446004246600201200a444a0520060442a04a00603c2a0420020346eb00089407494074060d5d09aab9e002100610063754004400466008008002664600200246602603a4466a03c004660060060026464664600200246602a0044466ae80008cc00c00c004008cc00c88888888888803098cc00888888888888802c98588854cd40044008885800484c048dd58008a808109809199180080091980a00f1119a80f999109198008018011bae35573a0046eb4d55cf001198018018008008a808198009111111111110041310a99a80088109109a80111299a8018999ab9a3371200290000128131108138810081088100a99aa99a9980f80980a081088100a99a98019980091111111111100513081088100810081018019aba10011635573c6ea8050c8c00400488ccc040080894cd54cd4c8c8c8c94cd4cc084d5d08011aba100113253353001357426ae8800c854cd4c008d5d09aba20032132532335333573466e1d200035573a004056054264a66a666ae68cdc3a40006aae740040b00ac4cc09cd5d09aab9e003357426aae780044c00926375400626002931199813802111199815003111299a999ab9a3370e00c0060620602a66a666ae68cdc38028010188180999ab9a3370e00800206206020602060405c40566ea8008409c54cd4c004d5d09aba2002210271027300b2001102535573c6ea8008d55cf1baa002533532333007357420024444444444446464a66a666ae68cdc3a40046aae740080c80c44c00403854080c8c00400488ccc08d4084894cd4c8c94cd4ccd5cd19b8f301f002301f0010370361333573466e1cc088008c0880040dc0d840d8d5d09aab9e006357426aae78dd5001089118010020998020020008009baa357426ae880349404cd55cf1baa01821333008357426ae88d55cf1baa00100b00a1633300600200900810221333573466e24ccc038dd59aba1357446aae78dd5001009a4410e56657273696f6e206f7261636c6500480000880844cc0100100044084004888c8c8c8c8c8c8c8c8c8c8c8cccccccccccc034dd61aba100b37586ae84028dd61aba100937566ae84020dd59aba100737586ae84018dd59aba1005357420086eb0d5d08019bab357420046eacd5d0800980a1aba1357440026ae88004d5d10009aba2001357440026ae88004d5d10009aba2001357440026ae88004d5d10009aab9e3754006444646464666600a6ae8400cdd59aba1002357420026600eeb8d5d09aba2001357440026ae88004d55cf1baa003223232325335333573466e1d200200202001f1500e15335333573466e1d200000202001f1300f3005357420022c6aae78008d55ce8009baa00126222200423002357426aae78dd50009191919299a999ab9a3370e900000100d80d09bae357420022c6aae78008d55ce8009baa001120012375a6ae84d5d11aab9e375400244466a660086ea400800c8c8cd4cc018dd480180091bad00148000dd5800a400044664600200246600ca0084a66a666ae68cdd78021aab9d00101701612300735573c0042466006006002002424460040062244002444a666aae7c004400c4cc008d5d08009aba2001375a0066a64664424660020060046eb4d5d08009bae357426ae88004dd60019109198008018010a4c2c244004244244660020080064464a6466a666ae68cdc3a40006aae740080240204c94cd4ccd5cd19b8748000d55ce8008050048999ab9a3371e6eb8d5d09aab9e003375c6ae84d55cf0008050048980124c6ea800c4c0052625335333573466e1d200235573a004012010264a66a666ae68cdc3a40046aae740040280244ccd5cd19b8f375c6ae84d55cf0019bae357426aae780040280244024dd500188041baa002222325335333573466e1d200235573a00201000e2646466600a6eb4d5d08011bad357420026eb4d5d09aba2001357440026aae780044c009263754006444444a666666ae900044c8cc01cd55ce8009aab9e00137540022600a6eac0044c010dd6000898019bad00113002375c00244666ae68cdc38010008020018910010910009"
));

fn version_oracle_policy() -> plutus_script::PlutusScript {
	plutus_script![
		VERSION_ORACLE_POLICY,
		genesis_utxo().utxo_id(),
		version_oracle_validator().address_data(tx_context().network)?
	]
	.unwrap()
}

fn version_oracle_policy_hash() -> [u8; 28] {
	version_oracle_policy().script_hash()
}

fn version_oracle_validator() -> plutus_script::PlutusScript {
	plutus_script![VERSION_ORACLE_VALIDATOR, genesis_utxo().utxo_id()].unwrap()
}

fn version_oracle_validator_address() -> Address {
	Address::from_bech32(&version_oracle_validator().address_bech32(tx_context().network).unwrap())
		.unwrap()
}

fn version_oracle_token_name() -> Vec<u8> {
	hex!("56657273696f6e206f7261636c65").to_vec()
}

fn governance_script_id() -> BigInt {
	32u64.into()
}

fn governance_utxo() -> OgmiosUtxo {
	OgmiosUtxo {
		transaction: OgmiosTx {
			id: hex!("40db7e41a67c5c560aa3d4bce389cb2eecd7c5f88188dbe472eb95069d1357b3"),
		},
		index: 0,
		value: OgmiosValue {
			lovelace: 2945937,
			native_tokens: [(
				version_oracle_policy_hash(),
				vec![Asset { name: version_oracle_token_name(), amount: 1 }],
			)]
			.into(),
		},
		address: "addr_test1wqrlc9gqxnyyzwyzgtvrf77famec87zme6zfxgq2sq4up8gccxfnc".to_string(),
		datum: Some(Datum { bytes: version_oracle_policy_hash().to_vec() }),
		..OgmiosUtxo::default()
	}
}

fn tx_context() -> TransactionContext {
	TransactionContext {
		payment_key: payment_key(),
		payment_key_utxos: vec![payment_utxo()],
		network: NetworkIdKind::Testnet,
		protocol_parameters: protocol_parameters(),
		change_address: payment_key_address(),
	}
}

fn genesis_utxo() -> OgmiosUtxo {
	OgmiosUtxo {
		transaction: OgmiosTx {
			id: hex!("071ce86f4b21214f35df5e7f2931a10b67f4a11360e56c1e2bcd7978980adca5"),
		},
		index: 1,
		value: OgmiosValue::new_lovelace(10000),
		address: test_address_bech32(),

		..Default::default()
	}
}

fn governance_data() -> GovernanceData {
	GovernanceData { policy: test_governance_policy(), utxo: governance_utxo() }
}

fn new_governance_authority() -> MainchainKeyHash {
	MainchainKeyHash(hex_literal::hex!("84ba05c28879b299a8377e62128adc7a0e0df3ac438ff95efc7c8443"))
}

fn mint_ex_units() -> ExUnits {
	ExUnits::new(&333u64.into(), &555u64.into())
}

fn spend_ex_units() -> ExUnits {
	ExUnits::new(&111u64.into(), &222u64.into())
}

fn test_costs() -> Costs {
	Costs::new(
		vec![(test_governance_policy().script().script_hash().into(), mint_ex_units())]
			.into_iter()
			.collect(),
		vec![(0, spend_ex_units())].into_iter().collect(),
	)
}

fn multisig_policy_hash() -> [u8; 28] {
	// important: this is the hash of the multisig policy parametrized with the *old* authority
	hex!("67400f8946a8572fe1d74005244979ae59ec021e4e2736d1a82e2e89")
}

fn test_update_governance_tx() -> Transaction {
	update_governance_tx(
		VERSION_ORACLE_VALIDATOR,
		VERSION_ORACLE_POLICY,
		genesis_utxo().utxo_id(),
		&MultiSigParameters::new_one_of_one(&new_governance_authority()),
		&governance_data(),
		test_costs(),
		&tx_context(),
	)
	.expect("Test transaction should be constructed without error")
}

#[test]
fn update_governance_test() {
	let tx: serde_json::Value =
		serde_json::from_str(&test_update_governance_tx().to_json().unwrap()).unwrap();

	assert_eq!(tx, test_values::test_update_governance_tx())
}

#[test]
fn mints_a_token_using_multisig_policy() {
	let multisig_token_minted_amount = (test_update_governance_tx().body().mint())
		.expect("Should mint a token")
		.get(&multisig_policy_hash().into())
		.and_then(|policy| policy.get(0))
		.expect("The minted token should have the multi-sig policy")
		.get(&empty_asset_name())
		.expect("The minted token should have an empty asset name");

	assert_eq!(multisig_token_minted_amount, Int::new_i32(1))
}

#[test]
fn output_contains_version_oracle_plutus_data() {
	let outputs = test_update_governance_tx().body().outputs();

	let script_output = (outputs.into_iter())
		.find(|o| o.address() == version_oracle_validator_address())
		.expect("Should create a utxo at version oracle validator address");

	let plutus_data = script_output.plutus_data().expect("Utxo should have plutus data attached");

	assert_eq!(
		plutus_data,
		PlutusData::new_list(&{
			let mut list = PlutusList::new();
			list.add(&PlutusData::new_integer(&governance_script_id()));
			list.add(&PlutusData::new_bytes(version_oracle_policy_hash().to_vec()));
			list
		})
	);
}

#[test]
fn consumes_the_previous_governance_utxo() {
	let inputs = test_update_governance_tx().body().inputs();

	let input_utxos: Vec<_> = inputs.into_iter().map(|input| input.to_string()).collect();

	assert!(input_utxos.contains(&governance_utxo().to_string()))
}

#[test]
fn contains_correct_redeemers() {
	let redeemers = test_update_governance_tx().witness_set().redeemers().unwrap();

	assert_eq!(redeemers.len(), 2);

	let spend_redeemer = redeemers.get(0);
	assert_eq!(spend_redeemer.tag(), RedeemerTag::new_spend());
	assert_eq!(spend_redeemer.index(), 0u64.into());
	assert_eq!(spend_redeemer.data(), PlutusData::new_integer(&32u64.into()));
	assert_eq!(spend_redeemer.ex_units(), spend_ex_units());

	let mint_redeemer = redeemers.get(1);
	assert_eq!(mint_redeemer.tag(), RedeemerTag::new_mint());
	assert_eq!(mint_redeemer.index(), 0u64.into());
	assert_eq!(mint_redeemer.data(), PlutusData::new_empty_constr_plutus_data(&0u64.into()));
	assert_eq!(mint_redeemer.ex_units(), mint_ex_units());
}
