
//! Autogenerated weights for pallet_governed_map
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-05-09, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBookPro.localdomain`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/production/wbuild/partner-chains-demo-runtime/partner_chains_demo_runtime.compact.compressed.wasm
// --pallet
// pallet_governed_map
// --extrinsic
// *
// --steps=50
// --repeat=20
// --wasm-execution=compiled
// --output
// toolkit/governed-map/pallet/src/weights.rs
// --template
// .maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_governed_map.
pub trait WeightInfo {
	fn register_changes(l: u32, ) -> Weight;
	fn set_main_chain_scripts() -> Weight;
}

/// Weights for pallet_governed_map using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `GovernedMap::LastUpdateBlock` (r:1 w:1)
	/// Proof: `GovernedMap::LastUpdateBlock` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `GovernedMap::MainChainScripts` (r:1 w:0)
	/// Proof: `GovernedMap::MainChainScripts` (`max_values`: Some(1), `max_size`: Some(150), added: 645, mode: `MaxEncodedLen`)
	/// Storage: `GovernedMap::Initialized` (r:1 w:1)
	/// Proof: `GovernedMap::Initialized` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `GovernedMap::Mapping` (r:16 w:16)
	/// Proof: `GovernedMap::Mapping` (`max_values`: None, `max_size`: Some(588), added: 3063, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[1, 16]`.
	fn register_changes(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `115`
		//  Estimated: `1635 + l * (3063 ±0)`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 1635)
			// Standard Error: 121_312
			.saturating_add(Weight::from_parts(10_759_247, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(l.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(l.into())))
			.saturating_add(Weight::from_parts(0, 3063).saturating_mul(l.into()))
	}
	/// Storage: `GovernedMap::MainChainScripts` (r:0 w:1)
	/// Proof: `GovernedMap::MainChainScripts` (`max_values`: Some(1), `max_size`: Some(150), added: 645, mode: `MaxEncodedLen`)
	/// Storage: `GovernedMap::Initialized` (r:0 w:1)
	/// Proof: `GovernedMap::Initialized` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_main_chain_scripts() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `GovernedMap::LastUpdateBlock` (r:1 w:1)
	/// Proof: `GovernedMap::LastUpdateBlock` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `GovernedMap::MainChainScripts` (r:1 w:0)
	/// Proof: `GovernedMap::MainChainScripts` (`max_values`: Some(1), `max_size`: Some(150), added: 645, mode: `MaxEncodedLen`)
	/// Storage: `GovernedMap::Initialized` (r:1 w:1)
	/// Proof: `GovernedMap::Initialized` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `GovernedMap::Mapping` (r:16 w:16)
	/// Proof: `GovernedMap::Mapping` (`max_values`: None, `max_size`: Some(588), added: 3063, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[1, 16]`.
	fn register_changes(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `115`
		//  Estimated: `1635 + l * (3063 ±0)`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 1635)
			// Standard Error: 121_312
			.saturating_add(Weight::from_parts(10_759_247, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(l.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(l.into())))
			.saturating_add(Weight::from_parts(0, 3063).saturating_mul(l.into()))
	}
	/// Storage: `GovernedMap::MainChainScripts` (r:0 w:1)
	/// Proof: `GovernedMap::MainChainScripts` (`max_values`: Some(1), `max_size`: Some(150), added: 645, mode: `MaxEncodedLen`)
	/// Storage: `GovernedMap::Initialized` (r:0 w:1)
	/// Proof: `GovernedMap::Initialized` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_main_chain_scripts() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
