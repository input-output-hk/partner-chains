{
  "$schema": "https://json-schema.org/draft-07/schema",
  "$id": "ogmios.json",
  "title": "ogmios",
  "type": "object",
  "additionalProperties": false,
  "required": [
    "FindIntersection",
    "FindIntersectionResponse",
    "NextBlock",
    "NextBlockResponse",
    "SubmitTransaction",
    "SubmitTransactionResponse",
    "EvaluateTransaction",
    "EvaluateTransactionResponse",
    "AcquireLedgerState",
    "AcquireLedgerStateResponse",
    "QueryLedgerStateConstitution",
    "QueryLedgerStateConstitutionResponse",
    "QueryLedgerStateConstitutionalCommittee",
    "QueryLedgerStateConstitutionalCommitteeResponse",
    "QueryLedgerStateDump",
    "QueryLedgerStateDumpResponse",
    "QueryLedgerStateDelegateRepresentatives",
    "QueryLedgerStateDelegateRepresentativesResponse",
    "QueryLedgerStateEpoch",
    "QueryLedgerStateEpochResponse",
    "QueryLedgerStateEraStart",
    "QueryLedgerStateEraStartResponse",
    "QueryLedgerStateEraSummaries",
    "QueryLedgerStateEraSummariesResponse",
    "QueryLedgerStateGovernanceProposals",
    "QueryLedgerStateGovernanceProposalsResponse",
    "QueryLedgerStateLiveStakeDistribution",
    "QueryLedgerStateLiveStakeDistributionResponse",
    "QueryLedgerStateProjectedRewards",
    "QueryLedgerStateProjectedRewardsResponse",
    "QueryLedgerStateProposedProtocolParameters",
    "QueryLedgerStateProposedProtocolParametersResponse",
    "QueryLedgerStateProtocolParameters",
    "QueryLedgerStateProtocolParametersResponse",
    "QueryLedgerStateRewardAccountSummaries",
    "QueryLedgerStateRewardAccountSummariesResponse",
    "QueryLedgerStateRewardsProvenance",
    "QueryLedgerStateRewardsProvenanceResponse",
    "QueryLedgerStateStakePools",
    "QueryLedgerStateStakePoolsResponse",
    "QueryLedgerStateTip",
    "QueryLedgerStateTipResponse",
    "QueryLedgerStateTreasuryAndReserves",
    "QueryLedgerStateTreasuryAndReservesResponse",
    "QueryLedgerStateUtxo",
    "QueryLedgerStateUtxoResponse",
    "QueryNetworkBlockHeight",
    "QueryNetworkBlockHeightResponse",
    "QueryNetworkGenesisConfiguration",
    "QueryNetworkGenesisConfigurationResponse",
    "QueryNetworkStartTime",
    "QueryNetworkStartTimeResponse",
    "QueryNetworkTip",
    "QueryNetworkTipResponse",
    "ReleaseLedgerState",
    "ReleaseLedgerStateResponse",
    "AcquireMempool",
    "AcquireMempoolResponse",
    "NextTransaction",
    "NextTransactionResponse",
    "HasTransaction",
    "HasTransactionResponse",
    "SizeOfMempool",
    "SizeAndCapacityResponse",
    "ReleaseMempool",
    "ReleaseMempoolResponse",
    "RpcError"
  ],
  "properties": {
    "FindIntersection": {
      "title": "FindIntersection",
      "description": "Ask cardano-node to find an intersection between its local chain and the given points.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method",
        "params"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "findIntersection"
          ]
        },
        "params": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "points": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PointOrOrigin"
              }
            }
          }
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "FindIntersectionResponse": {
      "oneOf": [
        {
          "title": "IntersectionFound",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "findIntersection"
              ]
            },
            "result": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "intersection",
                "tip"
              ],
              "properties": {
                "intersection": {
                  "$ref": "#/definitions/PointOrOrigin"
                },
                "tip": {
                  "$ref": "#/definitions/TipOrOrigin"
                }
              }
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "title": "IntersectionNotFound",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "error"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "findIntersection"
              ]
            },
            "error": {
              "description": "No intersection found with the requested points.",
              "type": "object",
              "required": [
                "code",
                "message",
                "data"
              ],
              "additionalProperties": false,
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    1000
                  ]
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "tip"
                  ],
                  "properties": {
                    "tip": {
                      "$ref": "#/definitions/TipOrOrigin"
                    }
                  }
                }
              }
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "title": "IntersectionInterleaved",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "error"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "findIntersection"
              ]
            },
            "error": {
              "description": "An internal error indicating that requests were interleaved in an unexpected way. Shouldn't ever happen.",
              "type": "object",
              "required": [
                "code",
                "message"
              ],
              "additionalProperties": false,
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    1001
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        }
      ]
    },
    "NextBlock": {
      "title": "NextBlock",
      "description": "Request next block from the current cardano-node's cursor.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "nextBlock"
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "NextBlockResponse": {
      "title": "NextBlockResponse",
      "type": "object",
      "description": "Response to a 'nextBlock' request.",
      "required": [
        "jsonrpc",
        "method",
        "result"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "nextBlock"
          ]
        },
        "result": {
          "oneOf": [
            {
              "title": "RollForward",
              "required": [
                "direction",
                "tip",
                "block"
              ],
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "direction": {
                  "type": "string",
                  "enum": [
                    "forward"
                  ]
                },
                "tip": {
                  "$ref": "#/definitions/Tip"
                },
                "block": {
                  "$ref": "#/definitions/Block"
                }
              }
            },
            {
              "title": "RollBackward",
              "required": [
                "direction",
                "tip",
                "point"
              ],
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "direction": {
                  "type": "string",
                  "enum": [
                    "backward"
                  ]
                },
                "tip": {
                  "$ref": "#/definitions/TipOrOrigin"
                },
                "point": {
                  "$ref": "#/definitions/PointOrOrigin"
                }
              }
            }
          ]
        },
        "id": {
          "description": "Any value that was set by a client request in the 'id' field."
        }
      }
    },
    "SubmitTransaction": {
      "title": "SubmitTransaction",
      "description": "Submit a signed and serialized transaction to the network.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method",
        "params"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "submitTransaction"
          ]
        },
        "params": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "transaction"
          ],
          "properties": {
            "transaction": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "cbor"
              ],
              "properties": {
                "cbor": {
                  "type": "string",
                  "description": "CBOR-serialized signed transaction (base16)",
                  "contentEncoding": "base16",
                  "pattern": "^[0-9a-f]+$"
                }
              }
            }
          }
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "SubmitTransactionResponse": {
      "oneOf": [
        {
          "title": "SubmitTransactionSuccess",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "submitTransaction"
              ]
            },
            "result": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "transaction"
              ],
              "properties": {
                "transaction": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/TransactionId"
                    }
                  }
                }
              }
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "title": "SubmitTransactionError",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "error"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "submitTransaction"
              ]
            },
            "error": {
              "$ref": "#/definitions/SubmitTransactionFailure"
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "title": "SubmitTransactionDeserialisationError",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "error"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "submitTransaction"
              ]
            },
            "error": {
              "$ref": "#/definitions/DeserialisationFailure"
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        }
      ]
    },
    "EvaluateTransaction": {
      "title": "EvaluateTransaction",
      "description": "Evaluate execution units for which redeemers's budget hasn't yet been set.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method",
        "params"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "evaluateTransaction"
          ]
        },
        "params": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "transaction"
          ],
          "properties": {
            "transaction": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "cbor"
              ],
              "properties": {
                "cbor": {
                  "type": "string",
                  "description": "CBOR-serialized signed transaction (base16)",
                  "contentEncoding": "base16",
                  "pattern": "^[0-9a-f]+$"
                }
              }
            },
            "additionalUtxo": {
              "$ref": "#/definitions/Utxo"
            }
          }
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "EvaluateTransactionResponse": {
      "oneOf": [
        {
          "title": "EvaluateTransactionSuccess",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "evaluateTransaction"
              ]
            },
            "result": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "validator",
                  "budget"
                ],
                "properties": {
                  "validator": {
                    "$ref": "#/definitions/RedeemerPointer"
                  },
                  "budget": {
                    "$ref": "#/definitions/ExecutionUnits"
                  }
                }
              }
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          },
          "examples": [
            {
              "jsonrpc": "2.0",
              "result": [
                {
                  "validator": "spend:1",
                  "budget": {
                    "memory": 5236222,
                    "cpu": 1212353
                  }
                },
                {
                  "validator": "mint:0",
                  "budget": {
                    "memory": 5000,
                    "cpu": 42
                  }
                }
              ]
            }
          ]
        },
        {
          "title": "EvaluateTransactionError",
          "description": "Happens when attempting to evaluate execution units on a node that isn't enough synchronized.",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "error"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "evaluateTransaction"
              ]
            },
            "error": {
              "$ref": "#/definitions/EvaluateTransactionFailure"
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "title": "EvaluateTransactionDeserialisationError",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "error"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "evaluateTransaction"
              ]
            },
            "error": {
              "$ref": "#/definitions/DeserialisationFailure"
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        }
      ]
    },
    "AcquireLedgerState": {
      "title": "AcquireLedgerState",
      "type": "object",
      "description": "Acquire a point on chain from which to run ledger-state queries.",
      "required": [
        "jsonrpc",
        "method",
        "params"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "acquireLedgerState"
          ]
        },
        "params": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "point"
          ],
          "properties": {
            "point": {
              "$ref": "#/definitions/PointOrOrigin"
            }
          }
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "AcquireLedgerStateResponse": {
      "oneOf": [
        {
          "title": "AcquireLedgerStateSuccess",
          "type": "object",
          "description": "Response to an 'acquireLedgerState' request.",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "acquireLedgerState"
              ]
            },
            "result": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "acquired",
                "point"
              ],
              "properties": {
                "acquired": {
                  "type": "string",
                  "enum": [
                    "ledgerState"
                  ]
                },
                "point": {
                  "$ref": "#/definitions/PointOrOrigin"
                }
              }
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/AcquireLedgerStateFailure"
        }
      ]
    },
    "ReleaseLedgerState": {
      "title": "ReleaseLedgerState",
      "type": "object",
      "description": "Release a previously acquired ledger state.",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "releaseLedgerState"
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "ReleaseLedgerStateResponse": {
      "title": "ReleaseLedgerStateResponse",
      "type": "object",
      "description": "Response to a 'releaseLedgerState' request.",
      "required": [
        "jsonrpc",
        "method",
        "result"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "releaseLedgerState"
          ]
        },
        "result": {
          "type": "object",
          "required": [
            "released"
          ],
          "additionalProperties": false,
          "properties": {
            "released": {
              "type": "string",
              "enum": [
                "ledgerState"
              ]
            }
          }
        },
        "id": {
          "description": "Any value that was set by a client request in the 'id' field."
        }
      }
    },
    "QueryLedgerStateConstitution": {
      "title": "QueryLedgerStateConstitution",
      "description": "Query the current constitution definition (only available from Conway onwards).",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/constitution"
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryLedgerStateConstitutionResponse": {
      "oneOf": [
        {
          "title": "QueryLedgerStateConstitutionResponse",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "queryLedgerState/constitution"
              ]
            },
            "result": {
              "$ref": "#/definitions/Constitution"
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/QueryLedgerStateEraMismatch"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateUnavailableInCurrentEra"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateAcquiredExpired"
        }
      ]
    },
    "QueryLedgerStateConstitutionalCommittee": {
      "title": "QueryLedgerStateConstitutionalCommittee",
      "description": "Get the state of the constitutional committee (only available from Conway onwards).",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/constitutionalCommittee"
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryLedgerStateConstitutionalCommitteeResponse": {
      "oneOf": [
        {
          "title": "QueryLedgerStateConstitutionalCommitteeResponse",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "queryLedgerState/constitutionalCommittee"
              ]
            },
            "result": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "members",
                    "quorum"
                  ],
                  "properties": {
                    "members": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ConstitutionalCommitteeMember"
                      }
                    },
                    "quorum": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "$ref": "#/definitions/Ratio"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/QueryLedgerStateEraMismatch"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateUnavailableInCurrentEra"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateAcquiredExpired"
        }
      ]
    },
    "QueryLedgerStateDelegateRepresentatives": {
      "title": "QueryLedgerStateDelegateRepresentatives",
      "description": "Query currently registered delegate representatives, their stake (i.e. voting powers) and metadata about them. Note that 'params' is optional and can be used to filter out delegates. When omitted, ALL delegates are returned. Pre-defined options (always abstain and always no confidence) are ALWAYS returned.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/delegateRepresentatives"
          ]
        },
        "params": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "scripts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AnyDelegateRepresentativeCredential"
              }
            },
            "keys": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AnyDelegateRepresentativeCredential"
              }
            }
          }
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryLedgerStateDelegateRepresentativesResponse": {
      "oneOf": [
        {
          "title": "QueryLedgerStateDelegateRepresentativesResponse",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "queryLedgerState/delegateRepresentatives"
              ]
            },
            "result": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DelegateRepresentativeSummary"
              }
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/QueryLedgerStateEraMismatch"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateUnavailableInCurrentEra"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateAcquiredExpired"
        }
      ]
    },
    "QueryLedgerStateDump": {
      "title": "QueryLedgerStateDump",
      "description": "Get a dump of the entire Cardano ledger state (base16-encoded CBOR) corresponding to the 'EpochState'. Use at your own risks.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/dump"
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryLedgerStateDumpResponse": {
      "oneOf": [
        {
          "title": "QueryLedgerStateDumpResponse",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "queryLedgerState/dump"
              ]
            },
            "result": {
              "type": "string",
              "contentEncoding": "base16"
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/QueryLedgerStateEraMismatch"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateUnavailableInCurrentEra"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateAcquiredExpired"
        }
      ]
    },
    "QueryLedgerStateEpoch": {
      "title": "QueryLedgerStateEpoch",
      "description": "Query the current epoch number the ledger is at.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/epoch"
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryLedgerStateEpochResponse": {
      "oneOf": [
        {
          "title": "QueryLedgerStateEpochResponse",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "queryLedgerState/epoch"
              ]
            },
            "result": {
              "$ref": "#/definitions/Epoch"
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/QueryLedgerStateEraMismatch"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateUnavailableInCurrentEra"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateAcquiredExpired"
        }
      ]
    },
    "QueryLedgerStateEraStart": {
      "title": "QueryLedgerStateEraStart",
      "description": "Query the start of the current ledger era.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/eraStart"
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryLedgerStateEraStartResponse": {
      "oneOf": [
        {
          "title": "QueryLedgerStateEraStartResponse",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "queryLedgerState/eraStart"
              ]
            },
            "result": {
              "$ref": "#/definitions/Bound"
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/QueryLedgerStateEraMismatch"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateUnavailableInCurrentEra"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateAcquiredExpired"
        }
      ]
    },
    "QueryLedgerStateEraSummaries": {
      "title": "QueryLedgerStateEraSummaries",
      "description": "Query a summary of the slotting parameters and boundaries for each known era. Useful for doing slot-arithmetic and time conversions.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/eraSummaries"
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryLedgerStateEraSummariesResponse": {
      "oneOf": [
        {
          "title": "QueryLedgerStateEraSummariesResponse",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "queryLedgerState/eraSummaries"
              ]
            },
            "result": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EraSummary"
              }
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/QueryLedgerStateEraMismatch"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateUnavailableInCurrentEra"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateAcquiredExpired"
        }
      ]
    },
    "QueryLedgerStateGovernanceProposals": {
      "title": "QueryLedgerStateGovernanceProposals",
      "description": "Query currently active governance proposals, optionally restricted to specific governance proposal references.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/governanceProposals"
          ]
        },
        "params": {
          "oneOf": [
            {
              "title": "GovernanceProposalsByReferences",
              "type": "object",
              "required": [
                "proposals"
              ],
              "additionalProperties": false,
              "properties": {
                "proposals": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GovernanceProposalReference"
                  }
                }
              }
            },
            {
              "title": "WholeGovernanceProposals",
              "type": "object",
              "additionalProperties": false
            }
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryLedgerStateGovernanceProposalsResponse": {
      "oneOf": [
        {
          "title": "QueryLedgerStateGovernanceProposalsResponse",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "queryLedgerState/governanceProposals"
              ]
            },
            "result": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GovernanceProposalState"
              }
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/QueryLedgerStateEraMismatch"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateUnavailableInCurrentEra"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateAcquiredExpired"
        }
      ]
    },
    "QueryLedgerStateLiveStakeDistribution": {
      "title": "QueryLedgerStateLiveStakeDistribution",
      "description": "Query the current distribution of the stake across all known stake pools, relative to the TOTAL stake in the network.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/liveStakeDistribution"
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryLedgerStateLiveStakeDistributionResponse": {
      "oneOf": [
        {
          "title": "QueryLedgerStateLiveStakeDistributionResponse",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "queryLedgerState/liveStakeDistribution"
              ]
            },
            "result": {
              "$ref": "#/definitions/LiveStakeDistribution"
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/QueryLedgerStateEraMismatch"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateUnavailableInCurrentEra"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateAcquiredExpired"
        }
      ]
    },
    "QueryLedgerStateProjectedRewards": {
      "title": "QueryLedgerStateProjectedRewards",
      "description": "Query the projected rewards of an account in a context where the top stake pools are fully saturated. This projection gives, in principle, a ranking of stake pools that maximizes delegator rewards.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method",
        "params"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/projectedRewards"
          ]
        },
        "params": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "stake": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Value<AdaOnly>"
              }
            },
            "scripts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AnyStakeCredential"
              }
            },
            "keys": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AnyStakeCredential"
              }
            }
          }
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryLedgerStateProjectedRewardsResponse": {
      "oneOf": [
        {
          "title": "QueryLedgerStateProjectedRewardsResponse",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "queryLedgerState/projectedRewards"
              ]
            },
            "result": {
              "$ref": "#/definitions/ProjectedRewards"
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/QueryLedgerStateEraMismatch"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateUnavailableInCurrentEra"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateAcquiredExpired"
        }
      ]
    },
    "QueryLedgerStateProposedProtocolParameters": {
      "title": "QueryLedgerStateProposedProtocolParameters",
      "description": "Query the last update proposal w.r.t. protocol parameters, if any.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/proposedProtocolParameters"
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryLedgerStateProposedProtocolParametersResponse": {
      "oneOf": [
        {
          "title": "QueryLedgerStateProposedProtocolParametersResponse",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "queryLedgerState/proposedProtocolParameters"
              ]
            },
            "result": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProposedProtocolParameters"
              }
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/QueryLedgerStateEraMismatch"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateUnavailableInCurrentEra"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateAcquiredExpired"
        }
      ]
    },
    "QueryLedgerStateProtocolParameters": {
      "title": "QueryLedgerStateProtocolParameters",
      "description": "Query the current protocol parameters.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/protocolParameters"
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryLedgerStateProtocolParametersResponse": {
      "oneOf": [
        {
          "title": "QueryLedgerStateProtocolParametersResponse",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "queryLedgerState/protocolParameters"
              ]
            },
            "result": {
              "$ref": "#/definitions/ProtocolParameters"
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/QueryLedgerStateEraMismatch"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateUnavailableInCurrentEra"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateAcquiredExpired"
        }
      ]
    },
    "QueryLedgerStateRewardAccountSummaries": {
      "title": "QueryLedgerStateRewardAccountSummaries",
      "description": "Query current delegation settings and rewards of some given reward accounts.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method",
        "params"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/rewardAccountSummaries"
          ]
        },
        "params": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "scripts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AnyStakeCredential"
              }
            },
            "keys": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AnyStakeCredential"
              }
            }
          }
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryLedgerStateRewardAccountSummariesResponse": {
      "oneOf": [
        {
          "title": "QueryLedgerStateRewardAccountSummariesResponse",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "queryLedgerState/rewardAccountSummaries"
              ]
            },
            "result": {
              "title": "RewardAccountSummaries",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/RewardAccountSummary"
              },
              "propertyNames": {
                "pattern": "^[0-9]+|[0-9a-f]+$"
              }
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/QueryLedgerStateEraMismatch"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateUnavailableInCurrentEra"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateAcquiredExpired"
        }
      ]
    },
    "QueryLedgerStateRewardsProvenance": {
      "title": "QueryLedgerStateRewardsProvenance",
      "description": "Query details about rewards calculation for the ongoing epoch.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/rewardsProvenance"
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryLedgerStateRewardsProvenanceResponse": {
      "oneOf": [
        {
          "title": "QueryLedgerStateRewardsProvenanceResponse",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "queryLedgerState/rewardsProvenance"
              ]
            },
            "result": {
              "$ref": "#/definitions/RewardsProvenance"
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/QueryLedgerStateEraMismatch"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateUnavailableInCurrentEra"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateAcquiredExpired"
        }
      ]
    },
    "QueryLedgerStateStakePools": {
      "title": "QueryLedgerStateStakePools",
      "description": "Query the list of all stake pools currently registered and active, optionally filtered by ids.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/stakePools"
          ]
        },
        "params": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "includeStake": {
              "type": "boolean",
              "description": "When provided and set to 'true', the result will also include the live stake associated to each pool. This may take some additional time the first time this is queried within an epoch."
            },
            "stakePools": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/definitions/StakePoolId"
                  }
                }
              }
            }
          }
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryLedgerStateStakePoolsResponse": {
      "oneOf": [
        {
          "title": "QueryLedgerStateStakePoolsResponse",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "queryLedgerState/stakePools"
              ]
            },
            "result": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/StakePool"
              },
              "propertyNames": {
                "$ref": "#/definitions/StakePoolId"
              }
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/QueryLedgerStateEraMismatch"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateUnavailableInCurrentEra"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateAcquiredExpired"
        }
      ]
    },
    "QueryLedgerStateTip": {
      "title": "QueryLedgerStateTip",
      "description": "Query the current tip the ledger is at. Said differently, the slot number and header hash of the last block that has been processed by the ledger.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/tip"
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryLedgerStateTipResponse": {
      "oneOf": [
        {
          "title": "QueryLedgerStateTipResponse",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "queryLedgerState/tip"
              ]
            },
            "result": {
              "$ref": "#/definitions/PointOrOrigin"
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/QueryLedgerStateEraMismatch"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateUnavailableInCurrentEra"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateAcquiredExpired"
        }
      ]
    },
    "QueryLedgerStateTreasuryAndReserves": {
      "title": "QueryLedgerStateTreasuryAndReserves",
      "description": "Query the Ada value of the treasury and reserves accounts.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/treasuryAndReserves"
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryLedgerStateTreasuryAndReservesResponse": {
      "oneOf": [
        {
          "title": "QueryLedgerStateTreasuryAndReservesResponse",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "queryLedgerState/treasuryAndReserves"
              ]
            },
            "result": {
              "type": "object",
              "required": [
                "treasury",
                "reserves"
              ],
              "additionalProperties": false,
              "properties": {
                "treasury": {
                  "$ref": "#/definitions/Value<AdaOnly>"
                },
                "reserves": {
                  "$ref": "#/definitions/Value<AdaOnly>"
                }
              }
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/QueryLedgerStateEraMismatch"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateUnavailableInCurrentEra"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateAcquiredExpired"
        }
      ]
    },
    "QueryLedgerStateUtxo": {
      "title": "QueryLedgerStateUtxo",
      "description": "Query the current Utxo set, restricted to some output references or addresses.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/utxo"
          ]
        },
        "params": {
          "oneOf": [
            {
              "title": "UtxoByOutputReferences",
              "type": "object",
              "required": [
                "outputReferences"
              ],
              "additionalProperties": false,
              "properties": {
                "outputReferences": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TransactionOutputReference"
                  }
                }
              }
            },
            {
              "title": "UtxoByAddresses",
              "type": "object",
              "required": [
                "addresses"
              ],
              "additionalProperties": false,
              "properties": {
                "addresses": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Address"
                  }
                }
              }
            },
            {
              "title": "WholeUtxo",
              "type": "object",
              "additionalProperties": false
            }
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryLedgerStateUtxoResponse": {
      "oneOf": [
        {
          "title": "QueryLedgerStateUtxoResponse",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "queryLedgerState/utxo"
              ]
            },
            "result": {
              "$ref": "#/definitions/Utxo"
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/QueryLedgerStateEraMismatch"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateUnavailableInCurrentEra"
        },
        {
          "$ref": "#/definitions/QueryLedgerStateAcquiredExpired"
        }
      ]
    },
    "QueryNetworkBlockHeight": {
      "title": "QueryNetworkBlockHeight",
      "description": "Query the network’s highest block number.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryNetwork/blockHeight"
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryNetworkBlockHeightResponse": {
      "title": "QueryNetworkBlockHeightResponse",
      "type": "object",
      "required": [
        "jsonrpc",
        "method",
        "result"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryNetwork/blockHeight"
          ]
        },
        "result": {
          "oneOf": [
            {
              "$ref": "#/definitions/BlockHeight"
            },
            {
              "$ref": "#/definitions/Origin"
            }
          ]
        },
        "id": {
          "description": "Any value that was set by a client request in the 'id' field."
        }
      }
    },
    "QueryNetworkGenesisConfiguration": {
      "title": "QueryNetworkGenesisConfiguration",
      "description": "Query the genesis configuration of a given era.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method",
        "params"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryNetwork/genesisConfiguration"
          ]
        },
        "params": {
          "type": "object",
          "required": [
            "era"
          ],
          "additionalProperties": false,
          "properties": {
            "era": {
              "$ref": "#/definitions/EraWithGenesis"
            }
          }
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryNetworkGenesisConfigurationResponse": {
      "title": "QueryNetworkGenesisConfigurationResponse",
      "type": "object",
      "required": [
        "jsonrpc",
        "method",
        "result"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryNetwork/genesisConfiguration"
          ]
        },
        "result": {
          "oneOf": [
            {
              "$ref": "#/definitions/QueryNetworkInvalidGenesis"
            },
            {
              "oneOf": [
                {
                  "$ref": "#/definitions/Genesis<Byron>"
                },
                {
                  "$ref": "#/definitions/Genesis<Shelley>"
                },
                {
                  "$ref": "#/definitions/Genesis<Alonzo>"
                },
                {
                  "$ref": "#/definitions/Genesis<Conway>"
                }
              ]
            }
          ]
        },
        "id": {
          "description": "Any value that was set by a client request in the 'id' field."
        }
      }
    },
    "QueryNetworkStartTime": {
      "title": "QueryNetworkStartTime",
      "description": "Query the network start time.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryNetwork/startTime"
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryNetworkStartTimeResponse": {
      "title": "QueryNetworkStartTimeResponse",
      "type": "object",
      "required": [
        "jsonrpc",
        "method",
        "result"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryNetwork/startTime"
          ]
        },
        "result": {
          "$ref": "#/definitions/UtcTime"
        },
        "id": {
          "description": "Any value that was set by a client request in the 'id' field."
        }
      }
    },
    "QueryNetworkTip": {
      "title": "QueryNetworkTip",
      "description": "Get the current network tip. Said differently, this is the most recent slot and block header hash that the node it aware of.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryNetwork/tip"
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "QueryNetworkTipResponse": {
      "title": "QueryNetworkTipResponse",
      "type": "object",
      "required": [
        "jsonrpc",
        "method",
        "result"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryNetwork/tip"
          ]
        },
        "result": {
          "$ref": "#/definitions/PointOrOrigin"
        },
        "id": {
          "description": "Any value that was set by a client request in the 'id' field."
        }
      }
    },
    "AcquireMempool": {
      "title": "AcquireMempool",
      "description": "Acquire a mempool snapshot. This is blocking until a new (i.e different) snapshot is available.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "acquireMempool"
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "AcquireMempoolResponse": {
      "title": "AcquireMempoolResponse",
      "description": "Response to a 'acquireMempool' request.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method",
        "result"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "acquireMempool"
          ]
        },
        "result": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "acquired",
            "slot"
          ],
          "properties": {
            "acquired": {
              "type": "string",
              "enum": [
                "mempool"
              ]
            },
            "slot": {
              "$ref": "#/definitions/Slot"
            }
          }
        },
        "id": {
          "description": "Any value that was set by a client request in the 'id' field."
        }
      }
    },
    "NextTransaction": {
      "title": "NextTransaction",
      "description": "Request the next transaction from an acquired mempools napshot.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "nextTransaction"
          ]
        },
        "params": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "fields": {
              "type": "string",
              "enum": [
                "all"
              ]
            }
          }
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "NextTransactionResponse": {
      "oneOf": [
        {
          "title": "NextTransactionResponse",
          "description": "Response to a 'nextTransaction' request.",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "nextTransaction"
              ]
            },
            "result": {
              "type": "object",
              "description": "A transaction (or id) or an empty object if there's no more transactions.",
              "additionalProperties": false,
              "required": [
                "transaction"
              ],
              "properties": {
                "transaction": {
                  "anyOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "$ref": "#/definitions/TransactionId"
                        }
                      }
                    },
                    {
                      "$ref": "#/definitions/Transaction"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/MustAcquireMempoolFirst"
        }
      ]
    },
    "HasTransaction": {
      "title": "HasTransaction",
      "description": "Ask whether a given transaction is present in the acquired mempool snapshot.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method",
        "params"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "hasTransaction"
          ]
        },
        "params": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "$ref": "#/definitions/TransactionId"
            }
          }
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "HasTransactionResponse": {
      "oneOf": [
        {
          "title": "HasTransactionResponse",
          "description": "Response to a 'HasTransaction' request.",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "hasTransaction"
              ]
            },
            "result": {
              "type": "boolean"
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/MustAcquireMempoolFirst"
        }
      ]
    },
    "SizeOfMempool": {
      "title": "SizeOfMempool",
      "description": "Get size and capacities of the mempool (acquired snapshot).",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "sizeOfMempool"
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "SizeOfMempoolResponse": {
      "oneOf": [
        {
          "title": "SizeOfMempoolResponse",
          "description": "Response to a 'sizeOfMempool' request.",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "sizeOfMempool"
              ]
            },
            "result": {
              "$ref": "#/definitions/MempoolSizeAndCapacity"
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/MustAcquireMempoolFirst"
        }
      ]
    },
    "ReleaseMempool": {
      "title": "ReleaseMempool",
      "description": "Release a previously acquired mempool snapshot.",
      "type": "object",
      "required": [
        "jsonrpc",
        "method"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "releaseMempool"
          ]
        },
        "id": {
          "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    },
    "ReleaseMempoolResponse": {
      "oneOf": [
        {
          "title": "ReleaseMempoolResponse",
          "description": "Response to a 'releaseMempool' request.",
          "type": "object",
          "required": [
            "jsonrpc",
            "method",
            "result"
          ],
          "additionalProperties": false,
          "properties": {
            "jsonrpc": {
              "type": "string",
              "enum": [
                "2.0"
              ]
            },
            "method": {
              "type": "string",
              "enum": [
                "releaseMempool"
              ]
            },
            "result": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "released"
              ],
              "properties": {
                "released": {
                  "type": "string",
                  "enum": [
                    "mempool"
                  ]
                }
              }
            },
            "id": {
              "description": "Any value that was set by a client request in the 'id' field."
            }
          }
        },
        {
          "$ref": "#/definitions/MustAcquireMempoolFirst"
        }
      ]
    },
    "RpcError": {
      "title": "RpcError",
      "description": "A generic error in the JSON-RPC protocol. This is returned by the server when a request from clients is deemed invalid or, when the server was unable to reply to a well-formed request.",
      "type": "object",
      "required": [
        "jsonrpc",
        "error"
      ],
      "additionalProperties": false,
      "examples": [
        {
          "jsonrpc": "2.0",
          "error": {
            "message": "Invalid request: invalid query.",
            "code": "-32601"
          }
        }
      ],
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "error": {
          "type": "object",
          "required": [
            "code",
            "string"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "description": "An error code telling about the nature of the error.",
              "minimum": -32700,
              "maximum": -32000
            },
            "message": {
              "type": "string",
              "description": "A descriptive error message giving hints about the error."
            },
            "data": {
              "description": "Some optional data / context about the error. The exact type of this (optional) field depends on the error."
            }
          }
        },
        "id": {
          "description": "Any value that was set by a client request in the 'id' field."
        }
      }
    }
  },
  "definitions": {
    "AcquireLedgerStateFailure": {
      "title": "AcquireLedgerStateFailure",
      "type": "object",
      "required": [
        "jsonrpc",
        "method",
        "error"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "acquireLedgerState"
          ]
        },
        "error": {
          "description": "Unable to acquire the ledger state at the request point.",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "code",
            "message",
            "data"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                2000
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "string",
              "description": "A reason for the failure."
            }
          }
        },
        "id": {
          "description": "Any value that was set by a client request in the 'id' field."
        }
      }
    },
    "MustAcquireMempoolFirst": {
      "title": "MustAcquireMempoolFirst",
      "type": "object",
      "required": [
        "jsonrpc",
        "method",
        "error"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "hasTransaction",
            "nextTransaction",
            "sizeOfMempool",
            "releaseMempool"
          ]
        },
        "error": {
          "description": "Must acquire a mempool snapshot prior to performing any query.",
          "type": "object",
          "required": [
            "code",
            "message"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                4000
              ]
            },
            "message": {
              "type": "string"
            }
          }
        },
        "id": {
          "description": "Any value that was set by a client request in the 'id' field."
        }
      }
    },
    "QueryLedgerStateEraMismatch": {
      "title": "QueryLedgerStateEraMismatch",
      "type": "object",
      "required": [
        "jsonrpc",
        "method",
        "error"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/constitution",
            "queryLedgerState/constitutionalCommittee",
            "queryLedgerState/delegateRepresentatives",
            "queryLedgerState/epoch",
            "queryLedgerState/eraStart",
            "queryLedgerState/eraSummaries",
            "queryLedgerState/governanceProposals",
            "queryLedgerState/liveStakeDistribution",
            "queryLedgerState/projectedRewards",
            "queryLedgerState/protocolParameters",
            "queryLedgerState/proposedProtocolParameters",
            "queryLedgerState/rewardAccountSummaries",
            "queryLedgerState/rewardsProvenance",
            "queryLedgerState/stakePools",
            "queryLedgerState/utxo",
            "queryLedgerState/tip",
            "queryLedgerState/treasuryAndReserves"
          ]
        },
        "error": {
          "type": "object",
          "description": "An era mismatch between a client request and the era the ledger is in. This may occur when running queries on a syncing node and/or when the node is crossing an era.",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                2001
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "$ref": "#/definitions/EraMismatch"
            }
          }
        },
        "id": {
          "description": "Any value that was set by a client request in the 'id' field."
        }
      }
    },
    "QueryLedgerStateUnavailableInCurrentEra": {
      "title": "QueryLedgerStateUnavailableInCurrentEra",
      "type": "object",
      "required": [
        "jsonrpc",
        "method",
        "error"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/constitution",
            "queryLedgerState/constitutionalCommittee",
            "queryLedgerState/delegateRepresentatives",
            "queryLedgerState/epoch",
            "queryLedgerState/eraStart",
            "queryLedgerState/eraSummaries",
            "queryLedgerState/governanceProposals",
            "queryLedgerState/liveStakeDistribution",
            "queryLedgerState/projectedRewards",
            "queryLedgerState/protocolParameters",
            "queryLedgerState/proposedProtocolParameters",
            "queryLedgerState/rewardAccountSummaries",
            "queryLedgerState/rewardsProvenance",
            "queryLedgerState/stakePools",
            "queryLedgerState/utxo",
            "queryLedgerState/tip",
            "queryLedgerState/treasuryAndReserves"
          ]
        },
        "error": {
          "description": "Some query is not available for the requested ledger era.",
          "type": "object",
          "required": [
            "code",
            "message"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                2002
              ]
            },
            "message": {
              "type": "string"
            }
          }
        },
        "id": {
          "description": "Any value that was set by a client request in the 'id' field."
        }
      }
    },
    "QueryLedgerStateAcquiredExpired": {
      "title": "QueryLedgerStateAcquiredExpired",
      "type": "object",
      "required": [
        "jsonrpc",
        "method",
        "error"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryLedgerState/constitution",
            "queryLedgerState/constitutionalCommittee",
            "queryLedgerState/delegateRepresentatives",
            "queryLedgerState/epoch",
            "queryLedgerState/eraStart",
            "queryLedgerState/eraSummaries",
            "queryLedgerState/governanceProposals",
            "queryLedgerState/liveStakeDistribution",
            "queryLedgerState/projectedRewards",
            "queryLedgerState/protocolParameters",
            "queryLedgerState/proposedProtocolParameters",
            "queryLedgerState/rewardAccountSummaries",
            "queryLedgerState/rewardsProvenance",
            "queryLedgerState/stakePools",
            "queryLedgerState/utxo",
            "queryLedgerState/tip",
            "queryLedgerState/treasuryAndReserves"
          ]
        },
        "error": {
          "description": "Previously acquired ledger state is no longer available.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                2003
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "string",
              "description": "A reason for the failure."
            }
          }
        },
        "id": {
          "description": "Any value that was set by a client request in the 'id' field."
        }
      }
    },
    "QueryNetworkInvalidGenesis": {
      "title": "QueryNetworkInvalidGenesis",
      "type": "object",
      "required": [
        "jsonrpc",
        "method",
        "result"
      ],
      "additionalProperties": false,
      "properties": {
        "jsonrpc": {
          "type": "string",
          "enum": [
            "2.0"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "queryNetwork/genesisConfiguration"
          ]
        },
        "error": {
          "description": "Something went wrong (e.g. misconfiguration) in reading genesis file for the latest era.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                2004
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "string",
              "description": "A reason for the failure."
            }
          }
        },
        "id": {
          "description": "Any value that was set by a client request in the 'id' field."
        }
      }
    },
    "_encodingBase16": {
      "title": "Base16",
      "description": "A key or script hash in base16.",
      "type": "string",
      "contentEncoding": "base16",
      "minLength": 56,
      "maxLength": 56
    },
    "AnyDelegateRepresentativeCredential": {
      "title": "AnyDelegateRepresentativeCredential",
      "oneOf": [
        {
          "$ref": "#/definitions/_encodingBase16"
        },
        {
          "title": "Bech32<drep_vkh, drep_script>",
          "type": "string",
          "description": "A Blake2b 28-byte hash digest of a drep verification key or script.",
          "contentEncoding": "bech32",
          "pattern": "^(drep_vkh|drep_script)1[0-9a-z]*$",
          "examples": [
            "drep_vkh12rtxfdsnnftykmpq2sw0uezgmh66zpr8t2mgr0rhmtm06ygr39j",
            "drep_script1mh66zpr8t2mgr0rhmtm065xkvjmp8xjkfdkzq4qulejyst8h2gg"
          ]
        }
      ]
    },
    "AnyStakeCredential": {
      "title": "AnyStakeCredential",
      "oneOf": [
        {
          "$ref": "#/definitions/_encodingBase16"
        },
        {
          "title": "Bech32<stake_vkh, script>",
          "type": "string",
          "description": "A Blake2b 28-byte hash digest of a verification key or script.",
          "contentEncoding": "bech32",
          "pattern": "^(stake_vkh|script)1[0-9a-z]*$",
          "examples": [
            "script1dss9g887v3rdmadpq3n44d5ph3ma4aha2rtxfdsnnftykaau8x7",
            "stake_vkh1dss9g887v3rdmadpq3n44d5ph3ma4aha2rtxfdsnnftyklueu8u"
          ]
        },
        {
          "title": "Stake Address",
          "$ref": "#/definitions/StakeAddress"
        }
      ]
    },
    "DeserialisationFailure": {
      "title": "DeserialisationFailure",
      "description": "The input failed to deserialize in any of the known era.",
      "type": "object",
      "required": [
        "code",
        "message",
        "data"
      ],
      "additionalProperties": false,
      "properties": {
        "code": {
          "type": "integer",
          "enum": [
            -32602
          ]
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "object",
          "required": [
            "shelley",
            "allegra",
            "mary",
            "alonzo",
            "babbage",
            "conway"
          ],
          "additionalProperties": false,
          "properties": {
            "shelley": {
              "type": "string"
            },
            "allegra": {
              "type": "string"
            },
            "mary": {
              "type": "string"
            },
            "alonzo": {
              "type": "string"
            },
            "babbage": {
              "type": "string"
            },
            "conway": {
              "type": "string"
            }
          }
        }
      }
    },
    "EraMismatch": {
      "title": "EraMismatch",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "queryEra",
        "ledgerEra"
      ],
      "properties": {
        "queryEra": {
          "$ref": "#/definitions/Era"
        },
        "ledgerEra": {
          "$ref": "#/definitions/Era"
        }
      }
    },
    "EvaluateTransactionFailure": {
      "oneOf": [
        {
          "title": "EvaluateTransactionFailure<IncompatibleEra>",
          "description": "Returned when trying to evaluate execution units of a pre-Alonzo transaction. Note that this isn't possible with Ogmios because transactions are always de-serialized as Alonzo transactions.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3000
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "description": "The era in which the transaction has been identified.",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "incompatibleEra"
              ],
              "properties": {
                "incompatibleEra": {
                  "$ref": "#/definitions/Era"
                }
              }
            }
          }
        },
        {
          "title": "EvaluateTransactionFailure<UnsupportedEra>",
          "description": "Returned when trying to evaluate execution units of an era that is now considered too old and is no longer supported. This can solved by using a more recent transaction format.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3001
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "description": "The era in which the transaction has been identified.",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "unsupportedEra"
              ],
              "properties": {
                "unsupportedEra": {
                  "$ref": "#/definitions/Era"
                }
              }
            }
          }
        },
        {
          "title": "EvaluateTransactionFailure<OverlappingAdditionalUtxo>",
          "description": "Happens when providing an additional UTXO set which overlaps with the UTXO on-chain.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3002
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "overlappingOutputReferences"
              ],
              "properties": {
                "overlappingOutputReferences": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TransactionOutputReference"
                  }
                }
              }
            }
          }
        },
        {
          "title": "EvaluateTransactionFailure<NodeTipTooOld>",
          "description": "Happens when attempting to evaluate execution units on a node that isn't enough synchronized.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3003
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "currentNodeEra",
                "minimumRequiredEra"
              ],
              "properties": {
                "minimumRequiredEra": {
                  "$ref": "#/definitions/Era"
                },
                "currentNodeEra": {
                  "$ref": "#/definitions/Era"
                }
              }
            }
          }
        },
        {
          "title": "EvaluateTransactionFailure<CannotCreateEvaluationContext>",
          "description": "The transaction is malformed or missing information; making evaluation impossible.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3004
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "reason"
              ],
              "properties": {
                "reason": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "title": "EvaluateTransactionFailure<ScriptExecutionFailure>",
          "description": "One or more script execution terminated with an error.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3010
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "validator",
                  "error"
                ],
                "properties": {
                  "validator": {
                    "$ref": "#/definitions/RedeemerPointer"
                  },
                  "error": {
                    "$ref": "#/definitions/ScriptExecutionFailure"
                  }
                }
              }
            }
          }
        }
      ]
    },
    "LiveStakeDistribution": {
      "type": "object",
      "description": "Distribution of stake across registered stake pools. Each key in the map corresponds to a pool id.",
      "propertyNames": {
        "$ref": "#/definitions/StakePoolId"
      },
      "additionalProperties": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "stake",
          "vrf"
        ],
        "properties": {
          "stake": {
            "$ref": "#/definitions/Ratio"
          },
          "vrf": {
            "$ref": "#/definitions/Digest<Blake2b, 256>"
          }
        }
      },
      "examples": [
        {
          "pool1qqqqqdk4zhsjuxxd8jyvwncf5eucfskz0xjjj64fdmlgj735lr9": {
            "stake": "64666784451745/32381463809418351",
            "vrf": "6de7605b2afd7e205318fc8b4329d26439b5b179b4746fea12f1ce50395f5d9e"
          },
          "pool1qqqqpanw9zc0rzh0yp247nzf2s35uvnsm7aaesfl2nnejaev0uc": {
            "stake": "7072561631906/10793821269806117",
            "vrf": "bb862fcc397de6c06dea9a9ad8442a3d17826e01799a79b861fc083341eaed3d"
          }
        }
      ]
    },
    "MempoolSizeAndCapacity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "maxCapacity",
        "currentSize",
        "transactions"
      ],
      "properties": {
        "maxCapacity": {
          "$ref": "#/definitions/NumberOfBytes"
        },
        "currentSize": {
          "$ref": "#/definitions/NumberOfBytes"
        },
        "transactions": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "count"
          ],
          "properties": {
            "count": {
              "$ref": "#/definitions/UInt32"
            }
          }
        }
      }
    },
    "PointOrOrigin": {
      "oneOf": [
        {
          "type": "object",
          "description": "A point on the chain, identified by a slot and a block header hash.",
          "title": "Point",
          "name": "Point",
          "additionalProperties": false,
          "required": [
            "slot",
            "id"
          ],
          "properties": {
            "slot": {
              "$ref": "#/definitions/Slot"
            },
            "id": {
              "$ref": "#/definitions/Digest<Blake2b, 256>"
            }
          }
        },
        {
          "$ref": "#/definitions/Origin"
        }
      ]
    },
    "ProjectedRewards": {
      "type": "object",
      "description": "Rewards that can be expected assuming a pool is fully saturated. Such rewards are said non-myopic, in opposition to short-sighted rewards looking at immediate benefits. Keys of the map can be either Lovelace amounts or account credentials depending on the query.",
      "propertyNames": {
        "pattern": "^[0-9]+|[0-9a-f]+$"
      },
      "additionalProperties": {
        "type": "object",
        "propertyNames": {
          "contentEncoding": "bech32",
          "pattern": "^[0-9a-f]+$"
        },
        "additionalProperties": {
          "$ref": "#/definitions/Value<AdaOnly>"
        }
      },
      "examples": [
        {
          "1000000": {
            "pool1qqqqqdk4zhsjuxxd8jyvwncf5eucfskz0xjjj64fdmlgj735lr9": {
              "ada": {
                "lovelace": 688
              }
            },
            "pool1qqqqpanw9zc0rzh0yp247nzf2s35uvnsm7aaesfl2nnejaev0uc": {
              "ada": {
                "lovelace": 676
              }
            },
            "pool1qqqqzyqf8mlm70883zht60n4q6uqxg4a8x266sewv8ad2grkztl": {
              "ada": {
                "lovelace": 0
              }
            }
          },
          "bc1597ad71c55d2d009a9274b3831ded155118dd769f5376decc1369": {
            "pool1qfzjwrtupyvzx0atp5pa3m82v7s8z2eqyqffa0grpyf4j349h6r": {
              "ada": {
                "lovelace": 0
              }
            },
            "pool1qfxukshs4fkcrflzdnxa2fdza5lfvew3y6echg8ckaa4q8m5hyf": {
              "ada": {
                "lovelace": 103181546
              }
            }
          }
        }
      ]
    },
    "RewardAccountSummary": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "delegate",
        "rewards",
        "deposit"
      ],
      "properties": {
        "delegate": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "$ref": "#/definitions/StakePoolId"
            }
          }
        },
        "rewards": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "deposit": {
          "$ref": "#/definitions/Value<AdaOnly>"
        }
      },
      "examples": [
        {
          "delegate": "pool1kchver88u3kygsak8wgll7htr8uxn5v35lfrsyy842nkscrzyvj",
          "rewards": {
            "ada": {
              "lovelace": 219558722
            }
          },
          "deposit": {
            "ada": {
              "lovelace": 2000000
            }
          }
        }
      ]
    },
    "RewardsProvenance": {
      "type": "object",
      "description": "Details about how rewards are calculated for the ongoing epoch.",
      "additionalProperties": false,
      "required": [
        "desiredNumberOfStakePools",
        "stakePoolPledgeInfluence",
        "totalRewardsInEpoch",
        "activeStakeInEpoch",
        "totalStakeInEpoch",
        "stakePools"
      ],
      "properties": {
        "desiredNumberOfStakePools": {
          "type": "integer",
          "description": "Desired number of stake pools.",
          "minimum": 0,
          "maximum": 18446744073709552999
        },
        "stakePoolPledgeInfluence": {
          "type": "string",
          "description": "Influence of the pool owner's pledge on rewards, as a ratio of two integers.",
          "pattern": "^-?[0-9]+/[0-9]+$",
          "examples": [
            "2/3",
            "7/8"
          ]
        },
        "totalRewardsInEpoch": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "totalStakeInEpoch": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "activeStakeInEpoch": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "stakePools": {
          "type": "object",
          "propertyNames": {
            "$ref": "#/definitions/StakePoolId"
          },
          "additionalProperties": {
            "$ref": "#/definitions/StakePoolSummary"
          }
        }
      }
    },
    "ScriptExecutionFailure": {
      "oneOf": [
        {
          "title": "ScriptExecutionFailure<InvalidRedeemerPointers>",
          "description": "Some script witnesses are missing. Indeed, any script used in a transaction (when spending, minting, etc...) must be provided in full with the transaction. Scripts must therefore be added either to the witness set or provided as a reference input should you use plutus:v2 or higher and a format from Babbage and beyond. The field 'data.missingScripts' contain hash digests of required but missing script.",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "code",
            "message",
            "data"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3011
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "missingScripts"
              ],
              "properties": {
                "missingScripts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RedeemerPointer"
                  }
                }
              }
            }
          }
        },
        {
          "title": "ScriptExecutionFailure<ValidationFailure>",
          "description": "Some of the scripts failed to evaluate to a positive outcome. The field 'data.validationError' informs about the nature of the error, and 'data.traces' lists all the execution traces collected during the script execution.",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "code",
            "message",
            "data"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3012
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "validationError",
                "traces"
              ],
              "properties": {
                "validationError": {
                  "type": "string"
                },
                "traces": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        {
          "title": "ScriptExecutionFailure<UnsuitableOutputReference>",
          "description": "A redeemer points to an input that isn't locked by a Plutus script. Double-check your redeemer pointers and note that, inputs are ordered lexicographically by the ledger (using their transaction id and output index). This order may differ from the one you originally defined in your transaction and may be the cause of misalignment of your redeemer pointers. The field 'data.unsuitableOutputReference' indicates which input was wrongly targeted by a redeemer.",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "code",
            "message",
            "data"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3013
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "unsuitableOutputReference"
              ],
              "properties": {
                "unsuitableOutputReference": {
                  "$ref": "#/definitions/TransactionOutputReference"
                }
              }
            }
          }
        },
        {
          "$ref": "#/definitions/SubmitTransactionFailure<ExtraneousRedeemers>"
        },
        {
          "$ref": "#/definitions/SubmitTransactionFailure<MissingDatums>"
        },
        {
          "$ref": "#/definitions/SubmitTransactionFailure<UnknownOutputReference>"
        },
        {
          "$ref": "#/definitions/SubmitTransactionFailure<MissingCostModels>"
        },
        {
          "$ref": "#/definitions/SubmitTransactionFailure<ExecutionBudgetOutOfBounds>"
        }
      ]
    },
    "StakePoolSummary": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "stake",
        "ownerStake",
        "approximatePerformance",
        "parameters"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/StakePoolId"
        },
        "stake": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "ownerStake": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "approximatePerformance": {
          "type": "number",
          "description": "Number of blocks produced divided by expected number of blocks (based on stake and epoch progress). Can be larger than 1.0 for pools that get lucky.",
          "minimum": 0
        },
        "parameters": {
          "type": "object",
          "description": "Some of the pool parameters relevant for the reward calculation.",
          "additionalProperties": false,
          "required": [
            "cost",
            "margin",
            "pledge"
          ],
          "properties": {
            "cost": {
              "$ref": "#/definitions/Value<AdaOnly>"
            },
            "margin": {
              "$ref": "#/definitions/Ratio"
            },
            "pledge": {
              "$ref": "#/definitions/Value<AdaOnly>"
            }
          }
        }
      }
    },
    "SubmitTransactionFailure": {
      "oneOf": [
        {
          "title": "SubmitTransactionFailure<EraMismatch>",
          "description": "Failed to submit the transaction in the current era. This may happen when trying to submit a transaction near an era boundary (i.e. at the moment of a hard-fork).",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3005
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "$ref": "#/definitions/EraMismatch"
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<InvalidSignatories>",
          "description": "Some signatures are invalid. Only the serialised transaction *body*, without metadata or witnesses, must be signed.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3100
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "invalidSignatories"
              ],
              "properties": {
                "invalidSignatories": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/VerificationKey"
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<MissingSignatories>",
          "description": "Some signatures are missing. A signed transaction must carry signatures for all inputs locked by verification keys or a native script. Transaction may also need signatures for each required extra signatories often required by Plutus Scripts.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3101
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "missingSignatories"
              ],
              "properties": {
                "missingSignatories": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Digest<Blake2b, 224>"
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<MissingScripts>",
          "description": "Some script witnesses are missing. Indeed, any script used in a transaction (when spending, minting, withdrawing or publishing certificates) must be provided in full with the transaction. Scripts must therefore be added either to the witness set or provided as a reference inputs should you use Plutus V2+ and a format from Babbage and beyond.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3102
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "missingScripts"
              ],
              "properties": {
                "missingScripts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Digest<Blake2b, 224>"
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<FailingNativeScript>",
          "description": "The transaction contains failing phase-1 monetary scripts (a.k.a. native scripts). This can be due to either a missing or invalid signature, or because of a time validity issue. The field 'data.failingNativeScripts' contains a list of hash digests of all failing native scripts found in the transaction.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3103
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "failingNativeScripts"
              ],
              "properties": {
                "failingNativeScripts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Digest<Blake2b, 224>"
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<ExtraneousScripts>",
          "description": "Extraneous (i.e. non-required) scripts found in the transaction. A transaction must not contain scripts that aren't strictly needed for validation, that are present in metadata or that are published in an output. Perhaps you have used provided a wrong script for a validator? Anyway, the 'data.extraneousScripts' field lists hash digests of scripts found to be extraneous.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3104
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "extraneousScripts"
              ],
              "properties": {
                "extraneousScripts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Digest<Blake2b, 224>"
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<MissingMetadataHash>",
          "description": "Missing required metadata hash in the transaction body. If the transaction includes metadata, then it must also include a hash digest of these serialised metadata in its body to prevent malicious actors from tempering with the data. The field 'data.metadata.hash' contains the expected missing hash digest of the metadata found in the transaction.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3105
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "metadata"
              ],
              "properties": {
                "metadata": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "hash"
                  ],
                  "properties": {
                    "hash": {
                      "$ref": "#/definitions/Digest<Blake2b, 256>"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<MissingMetadata>",
          "description": "No metadata corresponding to a specified metadata hash. It appears that you might have forgotten to attach metadata to a transaction, yet included a hash digest of them in the transaction body? The field 'data.metadata.hash' contains the orphan hash found in the body.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3106
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "metadata"
              ],
              "properties": {
                "metadata": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "hash"
                  ],
                  "properties": {
                    "hash": {
                      "$ref": "#/definitions/Digest<Blake2b, 256>"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<MetadataHashMismatch>",
          "description": "There's a mismatch between the provided metadata hash digest and the one computed from the actual metadata. The two must match exactly. The field 'data.provided.hash' references the provided hash as found in the transaction body, whereas 'data.computed.hash' contains the one the ledger computed from the actual metadata.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3107
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "provided",
                "computed"
              ],
              "properties": {
                "provided": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "hash"
                  ],
                  "properties": {
                    "hash": {
                      "$ref": "#/definitions/Digest<Blake2b, 256>"
                    }
                  }
                },
                "computed": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "hash"
                  ],
                  "properties": {
                    "hash": {
                      "$ref": "#/definitions/Digest<Blake2b, 256>"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<InvalidMetadata>",
          "description": "Invalid metadatum found in transaction metadata. Metadata byte strings must be no longer than 64-bytes and text strings must be no longer than 64 bytes once UTF-8-encoded. Some metadatum in the transaction infringe this rule.",
          "type": "object",
          "required": [
            "code",
            "message"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3108
              ]
            },
            "message": {
              "type": "string"
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<MissingRedeemers>",
          "description": "Missing required redeemer(s) for Plutus scripts. There are validators needed for the transaction that do not have an associated redeemer. Redeemer are provided when trying to execute the validation logic of a script (e.g. when spending from an input locked by a script, or minting assets from a Plutus monetary policy. The field 'data.missingRedeemers' lists the different purposes for which a redeemer hasn't been provided.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3109
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "missingRedeemers"
              ],
              "properties": {
                "missingRedeemers": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ScriptPurpose"
                  }
                }
              }
            }
          }
        },
        {
          "$ref": "#/definitions/SubmitTransactionFailure<ExtraneousRedeemers>"
        },
        {
          "$ref": "#/definitions/SubmitTransactionFailure<MissingDatums>"
        },
        {
          "title": "SubmitTransactionFailure<ExtraneousDatums>",
          "description": "The transaction failed because it contains datums not associated with any script or output. This could be because you've left some orphan datum behind, because you've listed the wrong inputs in the transaction or because you've just forgotten to include a datum associated with an input. Either way, the field 'data.extraneousDatums' contains a set of data hashes for these extraneous datums.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3112
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "extraneousDatums"
              ],
              "properties": {
                "extraneousDatums": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Digest<Blake2b, 256>"
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<ScriptIntegrityHashMismatch>",
          "description": "The transaction failed because the provided script integrity hash doesn't match the computed one. This is crucial for ensuring the integrity of cost models and Plutus version used during script execution. The field 'data.providedScriptIntegrity' correspond to what was given, if any, and 'data.computedScriptIntegrity' is what was expected. If the latter is null, this means you shouldn't have included a script integrity hash to begin with.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3113
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "providedScriptIntegrity",
                "computedScriptIntegrity"
              ],
              "properties": {
                "providedScriptIntegrity": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/Digest<Blake2b, 256>"
                    },
                    {
                      "$ref": "#/definitions/Null"
                    }
                  ]
                },
                "computedScriptIntegrity": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/Digest<Blake2b, 256>"
                    },
                    {
                      "$ref": "#/definitions/Null"
                    }
                  ]
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<OrphanScriptInputs>",
          "description": "This is bad, you're trying to spend inputs that are locked by Plutus scripts, but have no associated datums. Those inputs are so-to-speak unspendable (at least with the current ledger rules). There's nothing you can do apart from re-creating these UTxOs but with a corresponding datum this time. The field 'data.orphanScriptInputs' lists all such inputs found in the transaction.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3114
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "orphanScriptInputs"
              ],
              "properties": {
                "orphanScriptInputs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TransactionOutputReference"
                  }
                }
              }
            }
          }
        },
        {
          "$ref": "#/definitions/SubmitTransactionFailure<MissingCostModels>"
        },
        {
          "title": "SubmitTransactionFailure<MalformedScripts>",
          "description": "Some Plutus scripts in the witness set or in an output are invalid. Scripts must be well-formed flat-encoded Plutus scripts, CBOR-encoded. Yes, there's a double binary encoding. The outer-most encoding is therefore just a plain CBOR bytestring. Note that some tools such as the cardano-cli triple encode scripts for some reasons, resulting in a double outer-most CBOR encoding. Make sure that your script are correctly encoded. The field 'data.malformedScripts' lists the hash digests of all the problematic scripts.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3116
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "malformedScripts"
              ],
              "properties": {
                "malformedScripts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Digest<Blake2b, 224>"
                  }
                }
              }
            }
          }
        },
        {
          "$ref": "#/definitions/SubmitTransactionFailure<UnknownOutputReference>"
        },
        {
          "title": "SubmitTransactionFailure<OutsideOfValidityInterval>",
          "description": "The transaction is outside of its validity interval. It was either submitted too early or too late. A transaction that has a lower validity bound can only be accepted by the ledger (and make it to the mempool) if the ledger's current slot is greater than the specified bound. The upper bound works similarly, as a time to live. The field 'data.currentSlot' contains the current slot as known of the ledger (this may be different from the current network slot if the ledger is still catching up). The field 'data.validityInterval' is a reminder of the validity interval provided with the transaction.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3118
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "validityInterval",
                "currentSlot"
              ],
              "properties": {
                "validityInterval": {
                  "$ref": "#/definitions/ValidityInterval"
                },
                "currentSlot": {
                  "$ref": "#/definitions/Slot"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<TransactionTooLarge>",
          "description": "The transaction exceeds the maximum size allowed by the protocol. Indeed, once serialized, transactions must be under a bytes limit specified by a protocol parameter. The field 'data.measuredTransactionSize' indicates the actual measured size of your serialized transaction, whereas 'data.maximumTransactionSize' indicates the current maximum size enforced by the ledger.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3119
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "measuredTransactionSize",
                "maximumTransactionSize"
              ],
              "properties": {
                "measuredTransactionSize": {
                  "$ref": "#/definitions/NumberOfBytes"
                },
                "maximumTransactionSize": {
                  "$ref": "#/definitions/NumberOfBytes"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<ValueTooLarge>",
          "description": "Some output values in the transaction are too large. Once serialized, values must be below a certain threshold. That threshold sits around 4 KB during the Mary era, and was then made configurable as a protocol parameter in later era. The field 'data.excessivelyLargeOutputs' lists all transaction outputs with values that are above the limit.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3120
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "excessivelyLargeOutputs"
              ],
              "properties": {
                "excessivelyLargeOutputs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TransactionOutput"
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<EmptyInputSet>",
          "description": "Transaction must have at least one input, but this one has an empty input set. One input is necessary to prevent replayability of transactions, as it piggybacks on the unique spendable property of UTxO.",
          "type": "object",
          "required": [
            "code",
            "message"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3121
              ]
            },
            "message": {
              "type": "string"
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<TransactionFeeTooSmall>",
          "description": "Insufficient fee! The transaction doesn't not contain enough fee to cover the minimum required by the protocol. Note that fee depends on (a) a flat cost fixed by the protocol, (b) the size of the serialized transaction, (c) the budget allocated for Plutus script execution. The field 'data.minimumRequiredFee' indicates the minimum required fee whereas 'data.providedFee' refers to the fee currently supplied with the transaction.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3122
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "minimumRequiredFee",
                "providedFee"
              ],
              "properties": {
                "minimumRequiredFee": {
                  "$ref": "#/definitions/Value<AdaOnly>"
                },
                "providedFee": {
                  "$ref": "#/definitions/Value<AdaOnly>"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<ValueNotConserved>",
          "description": "In and out value not conserved. The transaction must *exactly* balance: every input must be accounted for. There are various things counting as 'in balance': (a) the total value locked by inputs (or collateral inputs in case of a failing script), (b) rewards coming from withdrawals and (c) return deposits from stake credential or pool de-registration. In a similar fashion, various things count towards the 'out balance': (a) the total value assigned to each transaction output, (b) the fee and (c) any deposit for stake credential or pool registration. The field 'data.valueConsumed' contains the total 'in balance', and 'data.valueProduced' indicates the total amount counting as 'out balance'.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3123
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "valueConsumed",
                "valueProduced"
              ],
              "properties": {
                "valueConsumed": {
                  "$ref": "#/definitions/Value"
                },
                "valueProduced": {
                  "$ref": "#/definitions/Value"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<NetworkMismatch>",
          "description": "Some discriminated entities in the transaction are configured for another network. In fact, payment addresses, stake addresses and stake pool registration certificates are bound to a specific network identifier. This identifier must match the network you're trying to submit them to. Since the Alonzo era, transactions themselves may also contain a network identifier. The field 'data.expectedNetwork' indicates what is the currrently expected network. The field 'data.discriminatedType' indicates what type of entity is causing an issue here. And 'data.invalidEntities' lists all the culprits found in the transaction. The latter isn't present when the transaction's network identifier itself is wrong.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3124
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "expectedNetwork",
                    "discriminatedType",
                    "invalidEntities"
                  ],
                  "properties": {
                    "expectedNetwork": {
                      "$ref": "#/definitions/Network"
                    },
                    "discriminatedType": {
                      "type": "string",
                      "enum": [
                        "address"
                      ]
                    },
                    "invalidEntities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Address"
                      }
                    }
                  }
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "expectedNetwork",
                    "discriminatedType",
                    "invalidEntities"
                  ],
                  "properties": {
                    "expectedNetwork": {
                      "$ref": "#/definitions/Network"
                    },
                    "discriminatedType": {
                      "type": "string",
                      "enum": [
                        "rewardAccount"
                      ]
                    },
                    "invalidEntities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/RewardAccount"
                      }
                    }
                  }
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "expectedNetwork",
                    "discriminatedType",
                    "invalidEntities"
                  ],
                  "properties": {
                    "expectedNetwork": {
                      "$ref": "#/definitions/Network"
                    },
                    "discriminatedType": {
                      "type": "string",
                      "enum": [
                        "stakePoolCertificate"
                      ]
                    },
                    "invalidEntities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/StakePoolId"
                      }
                    }
                  }
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "expectedNetwork",
                    "discriminatedType"
                  ],
                  "properties": {
                    "expectedNetwork": {
                      "$ref": "#/definitions/Network"
                    },
                    "discriminatedType": {
                      "type": "string",
                      "enum": [
                        "transaction"
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<InsufficientlyFundedOutputs>",
          "description": "Some outputs have an insufficient amount of Ada attached to them. In fact, any new output created in a system must pay for the resources it occupies. Because user-created assets are worthless (from the point of view of the protocol), those resources must be paid in the form of a Ada deposit. The exact depends on the size of the serialized output: the more assets, the higher the amount. The field 'data.insufficientlyFundedOutputs.[].output' contains a list of all transaction outputs that are insufficiently funded. Starting from the Babbage era, the field 'data.insufficientlyFundedOutputs.[].minimumRequiredValue' indicates the required amount of Lovelace (1e6 Lovelace = 1 Ada) needed for each output.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3125
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "insufficientlyFundedOutputs"
              ],
              "properties": {
                "insufficientlyFundedOutputs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "output"
                    ],
                    "properties": {
                      "output": {
                        "$ref": "#/definitions/TransactionOutput"
                      },
                      "minimumRequiredValue": {
                        "$ref": "#/definitions/Value<AdaOnly>"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<BootstrapAttributesTooLarge>",
          "description": "Some output associated with legacy / bootstrap (a.k.a. Byron) addresses have attributes that are too large. The field 'data.bootstrapOutputs' lists all affected outputs.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3126
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "bootstrapOutputs"
              ],
              "properties": {
                "bootstrapOutputs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TransactionOutput"
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<MintingOrBurningAda>",
          "description": "The transaction is attempting to mint or burn Ada tokens. That is, fortunately, not allowed by the ledger.",
          "type": "object",
          "required": [
            "code",
            "message"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3127
              ]
            },
            "message": {
              "type": "string"
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<InsufficientCollateral>",
          "description": "Insufficient collateral value for Plutus scripts in the transaction. Indeed, when executing scripts, you must provide a collateral amount which minimum is a percentage of the total execution budget for the transaction. The exact percentage is given by a protocol parameter. The field 'data.providedCollateral' indicates the amount currently provided as collateral in the transaction, whereas 'data.minimumRequiredCollateral' indicates the minimum amount expected by the ledger",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3128
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "providedCollateral",
                "minimumRequiredCollateral"
              ],
              "properties": {
                "providedCollateral": {
                  "$ref": "#/definitions/Value<Delta>"
                },
                "minimumRequiredCollateral": {
                  "$ref": "#/definitions/Value<AdaOnly>"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<CollateralLockedByScript>",
          "description": "Invalid choice of collateral: an input provided for collateral is locked by script. Collateral inputs must be spendable, and the ledger must be able to assert their validity during the first phase of validations (a.k.a phase-1). This discards any input locked by a Plutus script to be used as collateral. Note that for some reason inputs locked by native scripts are also excluded from candidates collateral. The field 'data.unsuitableCollateralInputs' lists all the problematic output references.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3129
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "unsuitableCollateralInputs"
              ],
              "properties": {
                "unsuitableCollateralInputs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TransactionOutputReference"
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<UnforeseeableSlot>",
          "description": "One of the transaction validity bound is outside any foreseeable future. The vision of the ledger in the future when evaluating Plutus scripts is limited because the ledger cannot guarantee that the chain will not hard-fork into a version of the protocol working with a different set of parameters (or even, working with the same consensus protocol). However, the protocol cannot fork in less than `k` blocks, where `k` is the security parameter of the chain. Plus, Ouroboros Praos ensures that there are at least `k` blocks produced in a window of 3 * k / f slots, where `f` is the density parameter, also known as the active slot coefficient. Short story short, you can only set validity interval in a short timespan, which is around ~36h in the future on Mainnet at the moment of writing this error message. The field 'data.unforeseeableSlot' indicates the slot which couldn't be converted to a POSIX time due to hard fork uncertainty.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3130
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "unforeseeableSlot"
              ],
              "properties": {
                "unforeseeableSlot": {
                  "$ref": "#/definitions/Slot"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<TooManyCollateralInputs>",
          "description": "The transaction contains too many collateral inputs. The maximum number of collateral inputs is constrained by a protocol parameter. The field 'data.maximumCollateralInputs' contains the current value of that parameter, and 'data.countedCollateralInputs' indicates how many inputs were actually found in your transaction.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3131
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "maximumCollateralInputs",
                "countedCollateralInputs"
              ],
              "properties": {
                "maximumCollateralInputs": {
                  "$ref": "#/definitions/UInt32"
                },
                "countedCollateralInputs": {
                  "$ref": "#/definitions/UInt32"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<MissingCollateralInputs>",
          "description": "The transaction doesn't provide any collateral inputs but it must. Indeed, when executing scripts, you must provide a collateral amount which is collected by the ledger in case of script execution failure. That collateral serves as a compensation for nodes that aren't thus able to collect normal fees set on the transaction. Note that ledger validations are split in two phases. The first phase regards pretty much every validation outside of script executions. Anything from the first phase doesn't require a collateral and will not consume the collateral in case of failure because they require little computing resources. Besides, in principle, any client application or wallet will prevent you from submitting an invalid transaction to begin with.",
          "type": "object",
          "required": [
            "code",
            "message"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3132
              ]
            },
            "message": {
              "type": "string"
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<NonAdaCollateral>",
          "description": "One of the input provided as collateral carries something else than Ada tokens. Only Ada can be used as collateral. Since the Babbage era, you also have the option to set a 'collateral return' or 'collateral change' output in order to send the surplus non-Ada tokens to it. Regardless, the field 'data.unsuitableCollateralValue' indicates the actual collateral value found by the ledger",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3133
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "unsuitableCollateralValue"
              ],
              "properties": {
                "unsuitableCollateralValue": {
                  "$ref": "#/definitions/Value"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<ExecutionUnitsTooLarge>",
          "description": "The transaction execution budget for scripts execution is above the allowed limit. The protocol limits the amount of execution that a single transaction can do. This limit is set by a protocol parameter. The field 'data.maximumExecutionUnits' indicates the current limit and the field 'data.providedExecutionUnits' indicates how much the transaction requires.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3134
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "providedExecutionUnits",
                "maximumExecutionUnits"
              ],
              "properties": {
                "providedExecutionUnits": {
                  "$ref": "#/definitions/ExecutionUnits"
                },
                "maximumExecutionUnits": {
                  "$ref": "#/definitions/ExecutionUnits"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<TotalCollateralMismatch>",
          "description": "There's a mismatch between the declared total collateral amount, and the value computed from the inputs and outputs. These must match exactly. The field 'data.declaredTotalCollateral' reports the amount declared in the transaction whereas 'data.computedTotalCollateral' refers to the amount actually computed.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3135
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "declaredTotalCollateral",
                "computedTotalCollateral"
              ],
              "properties": {
                "declaredTotalCollateral": {
                  "$ref": "#/definitions/Value<AdaOnly>"
                },
                "computedTotalCollateral": {
                  "$ref": "#/definitions/Value<Delta>"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<SpendsMismatch>",
          "description": "Invalid transaction submitted as valid, or vice-versa. Since Alonzo, the ledger may allow invalid transactions to be submitted and included on-chain, provided that they leave a collateral value as compensation. This prevent certain class of attacks. As a consequence, transactions now have a validity tag with them. Your transaction did not match what that validity tag is stating. The field 'data.declaredSpending' indicates what the transaction is supposed to consume (collaterals or inputs) and the field 'data.mismatchReason' provides more information about the mismatch.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3136
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "declaredSpending",
                "mismatchReason"
              ],
              "properties": {
                "declaredSpending": {
                  "$ref": "#/definitions/InputSource"
                },
                "mismatchReason": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<UnauthorizedVotes>",
          "description": "The transaction contains votes from unauthorized voters. The field 'data.unauthorizedVotes' indicates the faulty voters and the action they attempted to incorrectly vote for.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3137
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "unauthorizedVotes"
              ],
              "properties": {
                "unauthorizedVotes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "proposal",
                      "voter"
                    ],
                    "properties": {
                      "proposal": {
                        "$ref": "#/definitions/GovernanceProposalReference"
                      },
                      "voter": {
                        "$ref": "#/definitions/GovernanceVoter"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<UnknownGovernanceProposals>",
          "description": "Reference(s) to unknown governance proposals found in transaction. This may be because you've indicated a wrong identifier or because the proposal hasn't yet been submitted on-chain. Note that the order in which transactions are submitted matters. The field 'data.unknownProposals' tells you about the unknown references.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3138
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "unknownProposals"
              ],
              "properties": {
                "unknownProposals": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GovernanceProposalReference"
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<InvalidProtocolParametersUpdate>",
          "description": "The transaction contains an invalid or unauthorized protocol parameters update. This operation is reserved to genesis key holders.",
          "type": "object",
          "required": [
            "code",
            "message"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3139
              ]
            },
            "message": {
              "type": "string"
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<UnknownStakePool>",
          "description": "The transaction references an unknown stake pool as a target for delegation or update. Double-check the pool id mentioned in 'data.unknownStakePool'. Note also that order in which transactions are submitted matters; if you're trying to register a pool and delegate to it in one go, make sure to submit transactions in the right order.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3140
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "unknownStakePool"
              ],
              "properties": {
                "unknownStakePool": {
                  "$ref": "#/definitions/StakePoolId"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<IncompleteWithdrawals>",
          "description": "The transaction contains incomplete or invalid rewards withdrawals. When present, rewards withdrawals must consume rewards in full, there cannot be any leftover. The field 'data.incompleteWithdrawals' contains a map of withdrawals and their current rewards balance.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3141
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "incompleteWithdrawals"
              ],
              "properties": {
                "incompleteWithdrawals": {
                  "$ref": "#/definitions/Withdrawals"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<RetirementTooLate>",
          "description": "A stake pool retirement certificate is trying to retire too late in the future. Indeed, there's a maximum delay for stake pool retirement, controlled by a protocol parameter. The field 'data.currentEpoch' indicates the current epoch known of the ledger, 'data.declaredEpoch' refers to the epoch declared in the retirement certificate and 'data.firstInvalidEpoch' is the first epoch considered invalid (too far) for retirement",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3142
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "currentEpoch",
                "declaredEpoch",
                "firstInvalidEpoch"
              ],
              "properties": {
                "currentEpoch": {
                  "$ref": "#/definitions/Epoch"
                },
                "declaredEpoch": {
                  "$ref": "#/definitions/Epoch"
                },
                "firstInvalidEpoch": {
                  "$ref": "#/definitions/Epoch"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<StakePoolCostTooLow>",
          "description": "Stake pool cost declared in a registration or update certificate are below the allowed minimum. The minimum cost of a stake pool is fixed by a protocol parameter. The 'data.minimumStakePoolCost' field holds the current value of that parameter whereas 'data.declaredStakePoolCost' indicates which amount was declared.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3143
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "minimumStakePoolCost",
                "declaredStakePoolCost"
              ],
              "properties": {
                "minimumStakePoolCost": {
                  "$ref": "#/definitions/Value<AdaOnly>"
                },
                "declaredStakePoolCost": {
                  "$ref": "#/definitions/Value<AdaOnly>"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<MetadataHashTooLarge>",
          "description": "Some hash digest of (optional) stake pool metadata is too long. When registering, stake pools can supply an external metadata file and a hash digest of the content. The hashing algorithm is left open but the output digest must be smaller than 32 bytes. The field 'data.infringingStakePool' indicates which stake pool has an invalid metadata hash and 'data.computedMetadataHashSize' documents the computed hash size.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3144
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "infringingStakePool",
                "computedMetadataHashSize"
              ],
              "properties": {
                "infringingStakePool": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/StakePoolId"
                    }
                  }
                },
                "computedMetadataHashSize": {
                  "$ref": "#/definitions/NumberOfBytes"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<CredentialAlreadyRegistered>",
          "description": "Trying to re-register some already known credentials. Stake credentials can only be registered once. This is true for both keys and scripts. The field 'data.knownCredential' points to an already known credential that's being re-registered by this transaction.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3145
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "knownCredential",
                "from"
              ],
              "properties": {
                "knownCredential": {
                  "$ref": "#/definitions/Digest<Blake2b, 224>"
                },
                "from": {
                  "$ref": "#/definitions/CredentialOrigin"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<UnknownCredential>",
          "description": "The transaction references an unknown stake credential. For example, to delegate to a stake pool, you must first register the stake key or script used for delegation. This may be done in the same transaction or in an earlier transaction but cannot happen retro-actively. The field 'data.unknownCredential' indicates what credential is used without being registered.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3146
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "unknownCredential",
                "from"
              ],
              "properties": {
                "unknownCredential": {
                  "$ref": "#/definitions/Digest<Blake2b, 224>"
                },
                "from": {
                  "$ref": "#/definitions/CredentialOrigin"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<NonEmptyRewardAccount>",
          "description": "Trying to unregister stake credentials associated to a non empty reward account. You must empty the reward account first (or do it as part of the same transaction) to proceed. The field 'data.nonEmptyRewardAccountBalance' indicates how much Lovelace is left in the account.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3147
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "nonEmptyRewardAccountBalance"
              ],
              "properties": {
                "nonEmptyRewardAccountBalance": {
                  "$ref": "#/definitions/Value<AdaOnly>"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<InvalidGenesisDelegation>",
          "description": "Invalid or unauthorized genesis delegation. The genesis delegate is unknown, invalid or already in use.",
          "type": "object",
          "required": [
            "code",
            "message"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3148
              ]
            },
            "message": {
              "type": "string"
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<InvalidMIRTransfer>",
          "description": "Invalid MIR transfer. The resulting delta is likely negative.",
          "type": "object",
          "required": [
            "code",
            "message"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3149
              ]
            },
            "message": {
              "type": "string"
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<ForbiddenWithdrawal>",
          "description": "The transaction is attempting to withdraw rewards from stake credentials that do not engage in on-chain governance. Credentials must be associated with a delegate representative (registered, abstain or noConfidence) before associated rewards can be withdrawn. The field 'data.marginalizedCredentials' lists all the affected credentials.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3150
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "required": [
                "marginalizedCredentials"
              ],
              "additionalProperties": false,
              "properties": {
                "marginalizedCredentials": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Digest<Blake2b, 224>"
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<CredentialDepositMismatch>",
          "description": "The deposit specified in a stake credential registration (for delegation or governance) does not match the current value set by protocol parameters. The field 'data.expectedDeposit', when present, indicates the deposit amount as currently expected by ledger.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3151
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "required": [
                "providedDeposit"
              ],
              "additionalProperties": false,
              "properties": {
                "providedDeposit": {
                  "$ref": "#/definitions/Value<AdaOnly>"
                },
                "expectedDeposit": {
                  "$ref": "#/definitions/Value<AdaOnly>"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<DRepAlreadyRegistered>",
          "description": "Trying to re-register some already known delegate representative. Delegate representatives can only be registered once. The field 'data.knownDelegateRepresentatives' points to an already known credential that's being re-registered by this transaction.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3152
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "required": [
                "knownDelegateRepresentative"
              ],
              "additionalProperties": false,
              "properties": {
                "knownDelegateRepresentative": {
                  "$ref": "#/definitions/DelegateRepresentative"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<DRepNotRegistered>",
          "description": "The transaction references an unknown delegate representative. To delegate to a representative, it must first register as such. This may be done in the same transaction or in an earlier transaction but cannot happen retro-actively. The field 'data.unknownDelegateRepresentative' indicates what credential is used without being registered.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3153
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "required": [
                "unknownDelegateRepresentative"
              ],
              "additionalProperties": false,
              "properties": {
                "unknownDelegateRepresentative": {
                  "$ref": "#/definitions/DelegateRepresentative"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<UnknownConstitutionalCommitteeMember>",
          "description": "The transaction references an unknown constitutional committee member. This can be either because that member does not actually exist or because it was registered but has resigned. The field 'data.unknownConstitutionalCommitteeMember' indicates what credential is unknown.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3154
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "required": [
                "unknownConstitutionalCommitteeMember"
              ],
              "additionalProperties": false,
              "properties": {
                "unknownConstitutionalCommitteeMember": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "id",
                    "from"
                  ],
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/Digest<Blake2b, 224>"
                    },
                    "from": {
                      "$ref": "#/definitions/CredentialOrigin"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<GovernanceProposalDepositMismatch>",
          "description": "There's a mismatch between the proposal deposit amount declared in the transaction and the one expected by the ledger. The deposit is actually configured by a protocol parameter. The field 'data.expectedDeposit' indicates the current configuration and amount expected by the ledger. The field 'data.providedDeposit' is a reminder of the what was set in the submitted transaction.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3155
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "required": [
                "providedDeposit",
                "expectedDeposit"
              ],
              "additionalProperties": false,
              "properties": {
                "providedDeposit": {
                  "$ref": "#/definitions/Value<AdaOnly>"
                },
                "expectedDeposit": {
                  "$ref": "#/definitions/Value<AdaOnly>"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<ConflictingCommitteeUpdate>",
          "description": "The transaction contains an invalid governance action: it tries to both add members to the committee and remove some of those same members. The field 'data.conflictingMembers' indicates which members are found on both sides.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3156
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "required": [
                "conflictingMembers"
              ],
              "additionalProperties": false,
              "properties": {
                "conflictingMembers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "id",
                      "from"
                    ],
                    "properties": {
                      "id": {
                        "$ref": "#/definitions/Digest<Blake2b, 224>"
                      },
                      "from": {
                        "$ref": "#/definitions/CredentialOrigin"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<InvalidCommitteeUpdate>",
          "description": "The transaction contains an invalid governance action: it tries to add new members to the constitutional committee with a retirement epoch in the past. The field 'data.alreadyRetiredMembers' indicates the faulty members that would otherwise be already retired.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3157
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "required": [
                "alreadyRetiredMembers"
              ],
              "additionalProperties": false,
              "properties": {
                "alreadyRetiredMembers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "id",
                      "from"
                    ],
                    "properties": {
                      "id": {
                        "$ref": "#/definitions/Digest<Blake2b, 224>"
                      },
                      "from": {
                        "$ref": "#/definitions/CredentialOrigin"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<TreasuryWithdrawalMismatch>",
          "description": "The transaction is trying to withdraw more funds than specified in a governance action! The field 'data.providedWithdrawal' indicates the amount specified in the transaction, whereas 'data.computedWithdrawal' is the actual amount as computed by the ledger.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3158
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "required": [
                "providedWithdrawal",
                "computedWithdrawal"
              ],
              "additionalProperties": false,
              "properties": {
                "providedWithdrawal": {
                  "$ref": "#/definitions/Value<AdaOnly>"
                },
                "computedWithdrawal": {
                  "$ref": "#/definitions/Value<AdaOnly>"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<InvalidOrMissingPreviousProposals>",
          "description": "The transaction contains invalid or missing reference to previous (ratified) governance proposals. Indeed, some governance proposals such as protocol parameters update or consitutional committee change must point to last action of the same purpose that was ratified. The field 'data.invalidOrMissingPreviousProposals' contains a list of submitted actions that are missing details. For each item, we provide the anchor of the corresponding proposal, the type of previous proposal that is expected and the invalid proposal reference if relevant.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3159
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "required": [
                "invalidOrMissingPreviousProposals"
              ],
              "additionalProperties": false,
              "properties": {
                "invalidOrMissingPreviousProposals": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "metadata",
                      "type"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "metadata": {
                        "$ref": "#/definitions/Anchor"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "hardForkInitiation",
                          "protocolParametersUpdate",
                          "constitutionalCommittee",
                          "constitution"
                        ]
                      },
                      "invalidPreviousProposal": {
                        "$ref": "#/definitions/GovernanceProposalReference"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<VotingOnExpiredActions>",
          "description": "The transaction contains votes for an expired proposal. The field 'data.invalidVotes' indicates the faulty voters and the proposal they attempted to vote for.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3160
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "invalidVotes"
              ],
              "properties": {
                "invalidVotes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "proposal",
                      "voter"
                    ],
                    "properties": {
                      "proposal": {
                        "$ref": "#/definitions/GovernanceProposalReference"
                      },
                      "voter": {
                        "$ref": "#/definitions/GovernanceVoter"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "$ref": "#/definitions/SubmitTransactionFailure<ExecutionBudgetOutOfBounds>"
        },
        {
          "title": "SubmitTransactionFailure<InvalidHardForkVersionBump>",
          "description": "The new proposed version for a hard-fork isn't a valid version bump. The version (major, minor, patch) follows strict rules which can be summarized as follow: (1) the new triplet must be greater than the current one in the usual order of priorities (i.e. 'major' -> 'minor' -> 'patch'), (2) 'minor' must be 0 if 'major' is bumped, (3) 'minor' can only be bumped in increments of 1 and only if 'major' isn't bumped and (4) 'major' can only be bumped in increments of 1. The field 'data.proposedVersion' indicates the (invalid) version in the submitted proposal whereas 'data.currentVersion' indicates the current protocol version.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3162
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "proposedVersion",
                "currentVersion"
              ],
              "properties": {
                "proposedVersion": {
                  "$ref": "#/definitions/ProtocolVersion"
                },
                "currentVersion": {
                  "$ref": "#/definitions/ProtocolVersion"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<ConstitutionGuardrailsHashMismatch>",
          "description": "The provided constitution guardrails hash doesn't match the expected on defined in the constitution. Some governance actions such as treasury withdrawals or protocol parameters updates must correctly refer to the constitution guardrails hash digest. The latter can be 'null'. The field 'data.providedHash' indicates the hash provided in the proposal, and the field 'data.expectedHash' the one specified in the constitution",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3163
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "providedHash",
                "expectedHash"
              ],
              "properties": {
                "providedHash": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/Null"
                    },
                    {
                      "$ref": "#/definitions/Digest<Blake2b, 224>"
                    }
                  ]
                },
                "expectedHash": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/Null"
                    },
                    {
                      "$ref": "#/definitions/Digest<Blake2b, 224>"
                    }
                  ]
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<ConflictingInputsAndReferences>",
          "description": "Identical UTxO references were found in both the transaction inputs and references. This is redundant and no longer allowed by the ledger. Indeed, if the a UTxO is present in the inputs set, it is already in the transaction context. The field 'data.conflictingReferences' contains the culprit references present in both sets.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3164
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "conflictingReferences"
              ],
              "properties": {
                "conflictingReferences": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TransactionOutputReference"
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<UnauthorizedGovernanceAction>",
          "description": "The ledger is still in a bootstrapping phase. During that phase, only protocol parameters changes, hard fork initiations and info actions are authorized. The transaction contains other types of governance action and was therefore rejected",
          "type": "object",
          "required": [
            "code",
            "message"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3165
              ]
            },
            "message": {
              "type": "string"
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<ReferenceScriptsTooLarge>",
          "description": "",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3166
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "measuredReferenceScriptsSize",
                "maximumReferenceScriptsSize"
              ],
              "properties": {
                "measuredReferenceScriptsSize": {
                  "$ref": "#/definitions/NumberOfBytes"
                },
                "maximumReferenceScriptsSize": {
                  "$ref": "#/definitions/NumberOfBytes"
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<UnknownVoters>",
          "description": "Some voters in the transaction are unknown. Voters must correspond to registered credentials present in the ledger. They can possibly be registered in the same block, but it must imperatively happens before they are used for voting. The field 'data.unknownVoters' indicates the credentials that couldn't be mapped to any known voter.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3167
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "unknownVoters"
              ],
              "properties": {
                "unknownVoters": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GovernanceVoter"
                  }
                }
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<EmptyTreasuryWithdrawal>",
          "description": "Some proposals contain empty treasury withdrawals, which is pointless and a waste of resources.",
          "type": "object",
          "required": [
            "code",
            "message"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3168
              ]
            },
            "message": {
              "type": "string"
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<UnexpectedMempoolError>",
          "description": "A transaction was rejected due to custom rules that prevented it from entering the mempool. A justification is given as 'data.error'.",
          "type": "object",
          "required": [
            "code",
            "message",
            "data"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3997
              ]
            },
            "message": {
              "type": "string"
            },
            "data": {
              "error": {
                "type": "string"
              }
            }
          }
        },
        {
          "title": "SubmitTransactionFailure<UnrecognizedCertificateType>",
          "description": "Unrecognized certificate type. This error is a placeholder due to how internal data-types are modeled. If you ever run into this, please report the issue as you've likely discoverd a critical bug...",
          "type": "object",
          "required": [
            "code",
            "message"
          ],
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "integer",
              "enum": [
                3998
              ]
            },
            "message": {
              "type": "string"
            }
          }
        }
      ]
    },
    "SubmitTransactionFailure<ExtraneousRedeemers>": {
      "title": "SubmitTransactionFailure<ExtraneousRedeemers>",
      "description": "Extraneous (non-required) redeemers found in the transaction. There are some redeemers that aren't pointing to any script. This could be because you've left some orphan redeemer behind, because they are pointing at the wrong thing or because you forgot to include their associated validator. Either way, the field 'data.extraneousRedeemers' lists the different orphan redeemer pointers.",
      "type": "object",
      "required": [
        "code",
        "message",
        "data"
      ],
      "additionalProperties": false,
      "properties": {
        "code": {
          "type": "integer",
          "enum": [
            3110
          ]
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "extraneousRedeemers"
          ],
          "properties": {
            "extraneousRedeemers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RedeemerPointer"
              }
            }
          }
        }
      }
    },
    "SubmitTransactionFailure<MissingDatums>": {
      "title": "SubmitTransactionFailure<MissingDatums>",
      "description": "Transaction failed because some Plutus scripts are missing their associated datums. 'data.missingDatums' contains a set of data hashes for the missing datums. Ensure all Plutus scripts have an associated datum in the transaction's witness set or, are provided through inline datums in reference inputs.",
      "type": "object",
      "required": [
        "code",
        "message",
        "data"
      ],
      "additionalProperties": false,
      "properties": {
        "code": {
          "type": "integer",
          "enum": [
            3111
          ]
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "missingDatums"
          ],
          "properties": {
            "missingDatums": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Digest<Blake2b, 256>"
              }
            }
          }
        }
      }
    },
    "SubmitTransactionFailure<UnknownOutputReference>": {
      "title": "SubmitTransactionFailure<UnknownOutputReferences>",
      "description": "The transaction contains unknown UTxO references as inputs. This can happen if the inputs you're trying to spend have already been spent, or if you've simply referred to non-existing UTxO altogether. The field 'data.unknownOutputReferences' indicates all unknown inputs.",
      "type": "object",
      "required": [
        "code",
        "message",
        "data"
      ],
      "additionalProperties": false,
      "properties": {
        "code": {
          "type": "integer",
          "enum": [
            3117
          ]
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "unknownOutputReferences"
          ],
          "properties": {
            "unknownOutputReferences": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TransactionOutputReference"
              }
            }
          }
        }
      }
    },
    "SubmitTransactionFailure<MissingCostModels>": {
      "title": "SubmitTransactionFailure<MissingCostModels>",
      "description": "It seems like the transaction is using a Plutus version for which there's no available cost model yet. This could be because that language version is known of the ledger but hasn't yet been enabled through hard-fork. The field 'data.missingCostModels' lists all the languages for which a cost model is missing.",
      "type": "object",
      "required": [
        "code",
        "message",
        "data"
      ],
      "additionalProperties": false,
      "properties": {
        "code": {
          "type": "integer",
          "enum": [
            3115
          ]
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "missingCostModels"
          ],
          "properties": {
            "missingCostModels": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Language"
              }
            }
          }
        }
      }
    },
    "SubmitTransactionFailure<ExecutionBudgetOutOfBounds>": {
      "title": "SubmitTransactionFailure<ExecutionBudgetOutOfBounds>",
      "description": "The transaction ran out of execution budget! This means that the budget granted for the execution of a particular script was too small or exceeding the maximum value allowed by the protocol. The field 'data.budgetUsed' indicates the actual execution units used by the validator before it was interrupted.",
      "type": "object",
      "required": [
        "code",
        "message",
        "data"
      ],
      "additionalProperties": false,
      "properties": {
        "code": {
          "type": "integer",
          "enum": [
            3161
          ]
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "budgetUsed"
          ],
          "properties": {
            "budgetUsed": {
              "$ref": "#/definitions/ExecutionUnits"
            }
          }
        }
      }
    },
    "TipOrOrigin": {
      "oneOf": [
        {
          "$ref": "#/definitions/Tip"
        },
        {
          "$ref": "#/definitions/Origin"
        }
      ]
    },
    "Address": {
      "title": "Address",
      "type": "string",
      "description": "A Cardano address (either legacy format or new format).",
      "contentEncoding": "bech32|base58",
      "pattern": "[1-9A-HJ-NP-Za-km-z]*",
      "examples": [
        "addr1q9d34spgg2kdy47n82e7x9pdd6vql6d2engxmpj20jmhuc2047yqd4xnh7u6u5jp4t0q3fkxzckph4tgnzvamlu7k5psuahzcp",
        "DdzFFzCqrht8mbSTZHqpM2u4HeND2mdspsaBhdQ1BowPJBMzbDeBMeKgqdoKqo1D4sdPusEdZJVrFJRBBxX1jUEofNDYCJSZLg8MkyCE"
      ]
    },
    "AddressAttributes": {
      "title": "AddressAttributes",
      "type": "string",
      "description": "Extra attributes carried by Byron addresses (network magic and/or HD payload).",
      "contentEncoding": "base16"
    },
    "Anchor": {
      "type": "object",
      "title": "Anchor",
      "additionalProperties": false,
      "required": [
        "hash",
        "url"
      ],
      "properties": {
        "hash": {
          "$ref": "#/definitions/Digest<Any>"
        },
        "url": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "AssetQuantity": {
      "title": "AssetQuantity",
      "type": "integer",
      "description": "A number of asset, can be negative went burning assets."
    },
    "Assets": {
      "title": "Assets",
      "type": "object",
      "propertyNames": {
        "pattern": "^[0-9a-f]{56}$"
      },
      "additionalProperties": {
        "type": "object",
        "propertyNames": {
          "pattern": "^[0-9a-f]{0,64}$"
        },
        "additionalProperties": {
          "$ref": "#/definitions/AssetQuantity"
        }
      }
    },
    "Block": {
      "title": "Block",
      "oneOf": [
        {
          "$ref": "#/definitions/Block<EBB>"
        },
        {
          "$ref": "#/definitions/Block<BFT>"
        },
        {
          "$ref": "#/definitions/Block<Praos>"
        }
      ]
    },
    "Block<EBB>": {
      "title": "Block<EBB>",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "type",
        "era",
        "ancestor",
        "height"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "ebb"
          ]
        },
        "era": {
          "type": "string",
          "enum": [
            "byron"
          ]
        },
        "id": {
          "$ref": "#/definitions/Digest<Blake2b, 256>"
        },
        "ancestor": {
          "$ref": "#/definitions/Digest<Blake2b, 256>"
        },
        "height": {
          "$ref": "#/definitions/BlockHeight"
        }
      }
    },
    "Block<BFT>": {
      "title": "Block<BFT>",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "era",
        "type",
        "ancestor",
        "height",
        "size",
        "slot",
        "protocol",
        "issuer",
        "delegate"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "bft"
          ]
        },
        "era": {
          "type": "string",
          "enum": [
            "byron"
          ]
        },
        "id": {
          "$ref": "#/definitions/Digest<Blake2b, 256>"
        },
        "ancestor": {
          "$ref": "#/definitions/Digest<Blake2b, 256>"
        },
        "height": {
          "$ref": "#/definitions/BlockHeight"
        },
        "slot": {
          "$ref": "#/definitions/Slot"
        },
        "size": {
          "$ref": "#/definitions/NumberOfBytes"
        },
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transaction"
          }
        },
        "operationalCertificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BootstrapOperationalCertificate"
          }
        },
        "protocol": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "id",
            "version",
            "software"
          ],
          "properties": {
            "id": {
              "$ref": "#/definitions/BootstrapProtocolId"
            },
            "version": {
              "$ref": "#/definitions/ProtocolVersion"
            },
            "software": {
              "$ref": "#/definitions/SoftwareVersion"
            },
            "update": {
              "$ref": "#/definitions/BootstrapProtocolUpdate"
            }
          }
        },
        "issuer": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "verificationKey"
          ],
          "properties": {
            "verificationKey": {
              "$ref": "#/definitions/ExtendedVerificationKey"
            }
          }
        },
        "delegate": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "verificationKey"
          ],
          "properties": {
            "verificationKey": {
              "$ref": "#/definitions/ExtendedVerificationKey"
            }
          }
        }
      }
    },
    "Block<Praos>": {
      "title": "Block<Praos>",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "era",
        "type",
        "ancestor",
        "height",
        "size",
        "slot",
        "protocol",
        "issuer"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "praos"
          ]
        },
        "era": {
          "type": "string",
          "enum": [
            "shelley",
            "allegra",
            "mary",
            "alonzo",
            "babbage",
            "conway"
          ]
        },
        "id": {
          "$ref": "#/definitions/Digest<Blake2b, 256>"
        },
        "ancestor": {
          "oneOf": [
            {
              "$ref": "#/definitions/Digest<Blake2b, 256>"
            },
            {
              "title": "GenesisHash",
              "type": "string",
              "enum": [
                "genesis"
              ]
            }
          ]
        },
        "nonce": {
          "$ref": "#/definitions/CertifiedVrf"
        },
        "height": {
          "$ref": "#/definitions/BlockHeight"
        },
        "size": {
          "$ref": "#/definitions/NumberOfBytes"
        },
        "slot": {
          "$ref": "#/definitions/Slot"
        },
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transaction"
          }
        },
        "protocol": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "version"
          ],
          "properties": {
            "version": {
              "$ref": "#/definitions/ProtocolVersion"
            }
          }
        },
        "issuer": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "verificationKey",
            "vrfVerificationKey",
            "operationalCertificate",
            "leaderValue"
          ],
          "properties": {
            "verificationKey": {
              "$ref": "#/definitions/VerificationKey"
            },
            "vrfVerificationKey": {
              "$ref": "#/definitions/VerificationKey"
            },
            "operationalCertificate": {
              "$ref": "#/definitions/OperationalCertificate"
            },
            "leaderValue": {
              "$ref": "#/definitions/CertifiedVrf"
            }
          }
        }
      }
    },
    "BlockHeight": {
      "title": "BlockHeight",
      "type": "integer",
      "description": "A block number, the i-th block to be minted is number i.",
      "minimum": 0,
      "maximum": 18446744073709552999
    },
    "BootstrapProtocolUpdate": {
      "title": "BootstrapProtocolUpdate",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "votes"
      ],
      "properties": {
        "proposal": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "version",
            "software",
            "parameters",
            "metadata"
          ],
          "properties": {
            "version": {
              "$ref": "#/definitions/ProtocolVersion"
            },
            "software": {
              "$ref": "#/definitions/SoftwareVersion"
            },
            "parameters": {
              "$ref": "#/definitions/BootstrapProtocolParameters"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "votes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BootstrapVote"
          }
        }
      }
    },
    "BootstrapOperationalCertificate": {
      "title": "BootstrapOperationalCertificate",
      "type": "object",
      "description": "A (Byron) delegation certificate.",
      "additionalProperties": false,
      "required": [
        "issuer",
        "delegate"
      ],
      "properties": {
        "issuer": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "verificationKey"
          ],
          "properties": {
            "verificationKey": {
              "$ref": "#/definitions/VerificationKey"
            }
          }
        },
        "delegate": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "verificationKey"
          ],
          "properties": {
            "verificationKey": {
              "$ref": "#/definitions/VerificationKey"
            }
          }
        }
      }
    },
    "BootstrapProtocolId": {
      "title": "BootstrapProtocolId",
      "type": "integer",
      "minimum": 0,
      "maximum": 4294967295,
      "examples": [
        764824073
      ]
    },
    "BootstrapProtocolParameters": {
      "title": "BootstrapProtocolParameters",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "heavyDelegationThreshold": {
          "$ref": "#/definitions/Ratio"
        },
        "maxBlockBodySize": {
          "$ref": "#/definitions/NumberOfBytes"
        },
        "maxBlockHeaderSize": {
          "$ref": "#/definitions/NumberOfBytes"
        },
        "maxUpdateProposalSize": {
          "$ref": "#/definitions/NumberOfBytes"
        },
        "maxTransactionSize": {
          "$ref": "#/definitions/NumberOfBytes"
        },
        "multiPartyComputationThreshold": {
          "$ref": "#/definitions/Ratio"
        },
        "scriptVersion": {
          "$ref": "#/definitions/UInt64"
        },
        "slotDuration": {
          "$ref": "#/definitions/UInt64"
        },
        "unlockStakeEpoch": {
          "$ref": "#/definitions/UInt64"
        },
        "updateProposalThreshold": {
          "$ref": "#/definitions/Ratio"
        },
        "updateProposalTimeToLive": {
          "$ref": "#/definitions/UInt64"
        },
        "updateVoteThreshold": {
          "$ref": "#/definitions/Ratio"
        },
        "softForkInitThreshold": {
          "$ref": "#/definitions/Ratio"
        },
        "softForkMinThreshold": {
          "$ref": "#/definitions/Ratio"
        },
        "softForkDecrementThreshold": {
          "$ref": "#/definitions/Ratio"
        },
        "minFeeCoefficient": {
          "$ref": "#/definitions/UInt64"
        },
        "minFeeConstant": {
          "$ref": "#/definitions/Value<AdaOnly>"
        }
      }
    },
    "BootstrapVote": {
      "title": "BootstrapVote",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "voter",
        "proposal"
      ],
      "properties": {
        "voter": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "verificationKey"
          ],
          "properties": {
            "verificationKey": {
              "$ref": "#/definitions/VerificationKey"
            }
          }
        },
        "proposal": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "$ref": "#/definitions/Digest<Blake2b, 256>"
            }
          }
        }
      }
    },
    "Bound": {
      "title": "Bound",
      "type": "object",
      "description": "An era bound which captures the time, slot and epoch at which the era start. The time is relative to the start time of the network.",
      "additionalProperties": false,
      "required": [
        "time",
        "slot",
        "epoch"
      ],
      "properties": {
        "time": {
          "$ref": "#/definitions/RelativeTime"
        },
        "slot": {
          "$ref": "#/definitions/Slot"
        },
        "epoch": {
          "$ref": "#/definitions/Epoch"
        }
      }
    },
    "Certificate": {
      "title": "Certificate",
      "oneOf": [
        {
          "type": "object",
          "description": "A stake delegation certificate, from a delegator to a stake pool and/or a delegate representative.",
          "title": "StakeDelegation",
          "additionalProperties": false,
          "required": [
            "type",
            "credential",
            "from"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "stakeDelegation"
              ]
            },
            "from": {
              "$ref": "#/definitions/CredentialOrigin"
            },
            "credential": {
              "$ref": "#/definitions/Digest<Blake2b, 224>"
            },
            "stakePool": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "$ref": "#/definitions/StakePoolId"
                }
              }
            },
            "delegateRepresentative": {
              "$ref": "#/definitions/DelegateRepresentative"
            }
          }
        },
        {
          "type": "object",
          "description": "A stake credential (key or script) registration certificate. The field 'deposit' is only *optionally* present in Conway onwards.",
          "title": "StakeCredentialRegistration",
          "additionalProperties": false,
          "required": [
            "type",
            "credential",
            "from"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "stakeCredentialRegistration"
              ]
            },
            "from": {
              "$ref": "#/definitions/CredentialOrigin"
            },
            "credential": {
              "$ref": "#/definitions/Digest<Blake2b, 224>"
            },
            "deposit": {
              "$ref": "#/definitions/Value<AdaOnly>"
            }
          }
        },
        {
          "type": "object",
          "description": "A stake key de-registration certificate. The field 'deposit' is only *optionally* present in Conway onwards.",
          "title": "StakeCredentialDeregistration",
          "additionalProperties": false,
          "required": [
            "type",
            "credential",
            "from"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "stakeCredentialDeregistration"
              ]
            },
            "from": {
              "$ref": "#/definitions/CredentialOrigin"
            },
            "credential": {
              "$ref": "#/definitions/Digest<Blake2b, 224>"
            },
            "deposit": {
              "$ref": "#/definitions/Value<AdaOnly>"
            }
          }
        },
        {
          "type": "object",
          "description": "A stake pool registration certificate.",
          "title": "StakePoolRegistration",
          "additionalProperties": false,
          "required": [
            "type",
            "stakePool"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "stakePoolRegistration"
              ]
            },
            "stakePool": {
              "$ref": "#/definitions/StakePool"
            }
          }
        },
        {
          "type": "object",
          "description": "A stake pool retirement certificate.",
          "additionalProperties": false,
          "title": "StakePoolRetirement",
          "required": [
            "type",
            "stakePool"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "stakePoolRetirement"
              ]
            },
            "stakePool": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "id",
                "retirementEpoch"
              ],
              "properties": {
                "retirementEpoch": {
                  "$ref": "#/definitions/Epoch"
                },
                "id": {
                  "$ref": "#/definitions/StakePoolId"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "title": "GenesisDelegation",
          "additionalProperties": false,
          "required": [
            "type",
            "delegate",
            "issuer"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "genesisDelegation"
              ]
            },
            "delegate": {
              "$ref": "#/definitions/GenesisDelegate"
            },
            "issuer": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "$ref": "#/definitions/Digest<Blake2b, 224>"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "title": "ConstitutionalCommitteeDelegation",
          "description": "A constitutional committee member delegates a hot credential for voting on-chain. Constitutional committee members do not vote with their cold key directly. New registrations supersedes any preceding ones.",
          "additionalProperties": false,
          "required": [
            "type",
            "member",
            "delegate"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "constitutionalCommitteeDelegation"
              ]
            },
            "member": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "id",
                "from"
              ],
              "properties": {
                "id": {
                  "$ref": "#/definitions/Digest<Blake2b, 224>"
                },
                "from": {
                  "$ref": "#/definitions/CredentialOrigin"
                }
              }
            },
            "delegate": {
              "$ref": "#/definitions/ConstitutionalCommitteeDelegate"
            }
          }
        },
        {
          "type": "object",
          "title": "ConstitutionalCommitteeRetirement",
          "description": "A constitutional committee member resigns from the committee.",
          "additionalProperties": false,
          "required": [
            "type",
            "member"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "constitutionalCommitteeRetirement"
              ]
            },
            "member": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "id",
                "from"
              ],
              "properties": {
                "id": {
                  "$ref": "#/definitions/Digest<Blake2b, 224>"
                },
                "from": {
                  "$ref": "#/definitions/CredentialOrigin"
                }
              }
            },
            "metadata": {
              "$ref": "#/definitions/Anchor"
            }
          }
        },
        {
          "type": "object",
          "description": "A delegate representative registration. Note that this is only possible for 'registered' representatives and not for well-known ones (abstain & noConfidence)",
          "title": "DelegateRepresentativeRegistration",
          "additionalProperties": false,
          "required": [
            "type",
            "delegateRepresentative",
            "deposit"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "delegateRepresentativeRegistration"
              ]
            },
            "delegateRepresentative": {
              "$ref": "#/definitions/DelegateRepresentative"
            },
            "deposit": {
              "$ref": "#/definitions/Value<AdaOnly>"
            },
            "metadata": {
              "$ref": "#/definitions/Anchor"
            }
          }
        },
        {
          "type": "object",
          "description": "",
          "title": "DelegateRepresentativeUpdate",
          "additionalProperties": false,
          "required": [
            "type",
            "delegateRepresentative",
            "metadata"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "delegateRepresentativeUpdate"
              ]
            },
            "delegateRepresentative": {
              "$ref": "#/definitions/DelegateRepresentative"
            },
            "metadata": {
              "oneOf": [
                {
                  "type": "null",
                  "title": "None"
                },
                {
                  "$ref": "#/definitions/Anchor"
                }
              ]
            }
          }
        },
        {
          "type": "object",
          "description": "A delegate representative retirement. Note that this is only possible for 'registered' representatives and not for well-known ones (abstain & noConfidence)",
          "title": "DelegateRepresentativeRetirement",
          "additionalProperties": false,
          "required": [
            "type",
            "delegateRepresentative",
            "deposit"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "delegateRepresentativeRetirement"
              ]
            },
            "delegateRepresentative": {
              "$ref": "#/definitions/DelegateRepresentative"
            },
            "deposit": {
              "$ref": "#/definitions/Value<AdaOnly>"
            }
          }
        }
      ]
    },
    "CertifiedVrf": {
      "title": "CertifiedVrf",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "proof": {
          "$ref": "#/definitions/VrfProof"
        },
        "output": {
          "$ref": "#/definitions/VrfOutput"
        }
      }
    },
    "ChainCode": {
      "title": "ChainCode",
      "type": "string",
      "description": "An Ed25519-BIP32 chain-code for key deriviation.",
      "contentEncoding": "base16"
    },
    "Constitution": {
      "title": "Constitution",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "metadata",
        "guardrails"
      ],
      "properties": {
        "guardrails": {
          "oneOf": [
            {
              "$ref": "#/definitions/Null"
            },
            {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "hash"
              ],
              "properties": {
                "hash": {
                  "$ref": "#/definitions/Digest<Blake2b, 224>"
                }
              }
            }
          ]
        },
        "metadata": {
          "$ref": "#/definitions/Anchor"
        }
      }
    },
    "ConstitutionalCommitteeMember": {
      "title": "ConstitutionalCommitteeMember",
      "description": "A constitutional committee member as seen in the context of a specific epoch. Statuses and next states are to be seen from this specific epoch. The field 'next', when present, refers to any change happening to this member in the following epoch.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "from",
        "delegate",
        "status"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/Digest<Blake2b, 224>"
        },
        "from": {
          "$ref": "#/definitions/CredentialOrigin"
        },
        "status": {
          "type": "string",
          "description": "A member status. 'active' indicates that this member vote will count during the ratification of the ongoing epoch. 'unrecognized' means that some hot credential currently points to a non-existing (or no longer existing) member.",
          "enum": [
            "active",
            "expired",
            "unrecognized"
          ]
        },
        "delegate": {
          "$ref": "#/definitions/ConstitutionalCommitteeDelegate"
        },
        "mandate": {
          "$ref": "#/definitions/Mandate"
        },
        "next": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "change"
              ],
              "properties": {
                "change": {
                  "type": "string",
                  "enum": [
                    "toBeEnacted"
                  ]
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "change"
              ],
              "properties": {
                "change": {
                  "type": "string",
                  "enum": [
                    "toBeRemoved"
                  ]
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "change"
              ],
              "properties": {
                "change": {
                  "type": "string",
                  "enum": [
                    "expiring"
                  ]
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "change",
                "mandate"
              ],
              "properties": {
                "change": {
                  "type": "string",
                  "enum": [
                    "adjustingMandate"
                  ]
                },
                "mandate": {
                  "$ref": "#/definitions/Mandate"
                }
              }
            }
          ]
        }
      }
    },
    "ConstitutionalCommitteeDelegate": {
      "title": "ConstitutionalCommitteeDelegate",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "status",
            "id",
            "from"
          ],
          "additionalProperties": false,
          "properties": {
            "status": {
              "type": "string",
              "enum": [
                "authorized"
              ]
            },
            "id": {
              "$ref": "#/definitions/Digest<Blake2b, 224>"
            },
            "from": {
              "$ref": "#/definitions/CredentialOrigin"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "status"
          ],
          "additionalProperties": false,
          "properties": {
            "status": {
              "type": "string",
              "enum": [
                "resigned"
              ]
            },
            "metadata": {
              "$ref": "#/definitions/Anchor"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "status"
          ],
          "additionalProperties": false,
          "properties": {
            "status": {
              "type": "string",
              "enum": [
                "none"
              ]
            }
          }
        }
      ]
    },
    "ConstitutionalCommitteeMemberSummary": {
      "title": "ConstitutionalCommitteeMemberSummary",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "from"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/Digest<Blake2b, 224>"
        },
        "from": {
          "$ref": "#/definitions/CredentialOrigin"
        },
        "mandate": {
          "$ref": "#/definitions/Mandate"
        }
      }
    },
    "CostModels": {
      "title": "CostModels",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/CostModel"
      },
      "propertyNames": {
        "$ref": "#/definitions/Language"
      },
      "examples": [
        {
          "plutus:v1": [
            14,
            123
          ],
          "plutus:v2": [
            14,
            42,
            131
          ]
        }
      ]
    },
    "CostModel": {
      "title": "CostModel",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Int64"
      }
    },
    "CredentialOrigin": {
      "title": "CredentialOrigin",
      "type": "string",
      "enum": [
        "verificationKey",
        "script"
      ]
    },
    "Datum": {
      "title": "Datum",
      "type": "string",
      "contentEncoding": "base16"
    },
    "DelegateRepresentativeVotingThresholds": {
      "title": "DelegateRepresentativeVotingThresholds",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "noConfidence",
        "constitutionalCommittee",
        "constitution",
        "hardForkInitiation",
        "protocolParametersUpdate",
        "treasuryWithdrawals"
      ],
      "properties": {
        "noConfidence": {
          "$ref": "#/definitions/Ratio"
        },
        "constitution": {
          "$ref": "#/definitions/Ratio"
        },
        "constitutionalCommittee": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "default",
            "stateOfNoConfidence"
          ],
          "properties": {
            "default": {
              "$ref": "#/definitions/Ratio"
            },
            "stateOfNoConfidence": {
              "$ref": "#/definitions/Ratio"
            }
          }
        },
        "hardForkInitiation": {
          "$ref": "#/definitions/Ratio"
        },
        "protocolParametersUpdate": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "network",
            "economic",
            "technical",
            "governance"
          ],
          "properties": {
            "network": {
              "$ref": "#/definitions/Ratio"
            },
            "economic": {
              "$ref": "#/definitions/Ratio"
            },
            "technical": {
              "$ref": "#/definitions/Ratio"
            },
            "governance": {
              "$ref": "#/definitions/Ratio"
            }
          }
        },
        "treasuryWithdrawals": {
          "$ref": "#/definitions/Ratio"
        }
      }
    },
    "Digest<Any>": {
      "title": "Digest<Any>",
      "type": "string",
      "description": "A hash digest from an unspecified algorithm and length.",
      "contentEncoding": "base16",
      "examples": [
        "90181c517a5beadc9c3fe64bf8"
      ]
    },
    "Digest<Blake2b, 224>": {
      "title": "Digest<Blake2b, 224>",
      "type": "string",
      "description": "A Blake2b 28-byte hash digest, encoded in base16.",
      "contentEncoding": "base16",
      "minLength": 56,
      "maxLength": 56,
      "examples": [
        "90181c517a5beadc9c3fe64bf821d3e889a963fc717003ec248757d3"
      ]
    },
    "DelegateRepresentative": {
      "title": "DelegateRepresentative",
      "oneOf": [
        {
          "title": "DelegateRepresentative<Registered>",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "id",
            "from",
            "type"
          ],
          "properties": {
            "id": {
              "$ref": "#/definitions/Digest<Blake2b, 224>"
            },
            "from": {
              "$ref": "#/definitions/CredentialOrigin"
            },
            "type": {
              "type": "string",
              "enum": [
                "registered"
              ]
            }
          }
        },
        {
          "title": "DelegateRepresentative<NoConfidence>",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "A special delegate representative which always vote no, except on votes of no-confidence.",
              "enum": [
                "noConfidence"
              ]
            }
          }
        },
        {
          "title": "DelegateRepresentative<Abstain>",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "A special delegate representative which always abstain.",
              "enum": [
                "abstain"
              ]
            }
          }
        }
      ]
    },
    "DelegateRepresentativeSummary": {
      "title": "DelegateRepresentativeSummary",
      "oneOf": [
        {
          "title": "DelegateRepresentativeSummary<Registered>",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "id",
            "from",
            "type",
            "mandate",
            "deposit",
            "stake",
            "delegators"
          ],
          "properties": {
            "id": {
              "$ref": "#/definitions/Digest<Blake2b, 224>"
            },
            "from": {
              "$ref": "#/definitions/CredentialOrigin"
            },
            "type": {
              "type": "string",
              "enum": [
                "registered"
              ]
            },
            "mandate": {
              "$ref": "#/definitions/Mandate"
            },
            "metadata": {
              "$ref": "#/definitions/Anchor"
            },
            "deposit": {
              "$ref": "#/definitions/Value<AdaOnly>"
            },
            "stake": {
              "$ref": "#/definitions/Value<AdaOnly>"
            },
            "delegators": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "credential",
                  "from"
                ],
                "properties": {
                  "credential": {
                    "$ref": "#/definitions/Digest<Blake2b, 224>"
                  },
                  "from": {
                    "$ref": "#/definitions/CredentialOrigin"
                  }
                }
              }
            }
          }
        },
        {
          "title": "DelegateRepresentativeSummary<NoConfidence>",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "type",
            "stake"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "A special delegate representative which always vote no, except on votes of no-confidence.",
              "enum": [
                "noConfidence"
              ]
            },
            "stake": {
              "$ref": "#/definitions/Value<AdaOnly>"
            }
          }
        },
        {
          "title": "DelegateRepresentative<Abstain>",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "type",
            "stake"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "A special delegate representative which always abstain.",
              "enum": [
                "abstain"
              ]
            },
            "stake": {
              "$ref": "#/definitions/Value<AdaOnly>"
            }
          }
        }
      ]
    },
    "Digest<Blake2b, 256>": {
      "title": "Digest<Blake2b, 256>",
      "type": "string",
      "description": "A Blake2b 32-byte hash digest, encoded in base16.",
      "contentEncoding": "base16",
      "minLength": 64,
      "maxLength": 64,
      "examples": [
        "c248757d390181c517a5beadc9c3fe64bf821d3e889a963fc717003ec248757d"
      ]
    },
    "Epoch": {
      "title": "Epoch",
      "type": "integer",
      "description": "An epoch number or length.",
      "minimum": 0,
      "maximum": 18446744073709552000
    },
    "Era": {
      "title": "Era",
      "type": "string",
      "enum": [
        "byron",
        "shelley",
        "allegra",
        "mary",
        "alonzo",
        "babbage",
        "conway"
      ]
    },
    "EraWithGenesis": {
      "title": "EraWithGenesis",
      "type": "string",
      "enum": [
        "byron",
        "shelley",
        "alonzo",
        "conway"
      ]
    },
    "EraParameters": {
      "title": "EraParameters",
      "type": "object",
      "description": "Parameters that can vary across hard forks.",
      "additionalProperties": false,
      "required": [
        "epochLength",
        "slotLength",
        "safeZone"
      ],
      "properties": {
        "epochLength": {
          "$ref": "#/definitions/Epoch"
        },
        "slotLength": {
          "$ref": "#/definitions/SlotLength"
        },
        "safeZone": {
          "oneOf": [
            {
              "$ref": "#/definitions/SafeZone"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "EraSummary": {
      "title": "EraSummary",
      "type": "object",
      "description": "Summary of the confirmed parts of the ledger.",
      "additionalProperties": false,
      "required": [
        "start",
        "parameters"
      ],
      "properties": {
        "start": {
          "$ref": "#/definitions/Bound"
        },
        "end": {
          "$ref": "#/definitions/Bound"
        },
        "parameters": {
          "$ref": "#/definitions/EraParameters"
        }
      }
    },
    "ExecutionUnits": {
      "title": "ExecutionUnits",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "memory",
        "cpu"
      ],
      "properties": {
        "memory": {
          "$ref": "#/definitions/UInt64"
        },
        "cpu": {
          "$ref": "#/definitions/UInt64"
        }
      }
    },
    "Genesis<Byron>": {
      "title": "Genesis<Byron>",
      "type": "object",
      "description": "A Byron genesis configuration, with information used to bootstrap the era. Some parameters are also updatable across the era.",
      "additionalProperties": false,
      "required": [
        "era",
        "genesisKeyHashes",
        "genesisDelegations",
        "startTime",
        "initialFunds",
        "initialVouchers",
        "securityParameter",
        "networkMagic",
        "protocolParameters"
      ],
      "properties": {
        "era": {
          "type": "string",
          "enum": [
            "byron"
          ]
        },
        "genesisKeyHashes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Digest<Blake2b, 224>"
          }
        },
        "genesisDelegations": {
          "type": "object",
          "propertyNames": {
            "$ref": "#/definitions/Digest<Blake2b, 224>"
          },
          "additionalProperties": {
            "$ref": "#/definitions/BootstrapOperationalCertificate"
          }
        },
        "startTime": {
          "$ref": "#/definitions/UtcTime"
        },
        "initialFunds": {
          "type": "object",
          "propertyNames": {
            "$ref": "#/definitions/Address"
          },
          "additionalProperties": {
            "$ref": "#/definitions/Value<AdaOnly>"
          }
        },
        "initialVouchers": {
          "type": "object",
          "propertyNames": {
            "$ref": "#/definitions/VerificationKey"
          },
          "additionalProperties": {
            "$ref": "#/definitions/Value<AdaOnly>"
          }
        },
        "securityParameter": {
          "$ref": "#/definitions/UInt64"
        },
        "networkMagic": {
          "$ref": "#/definitions/NetworkMagic"
        },
        "updatableParameters": {
          "$ref": "#/definitions/ProtocolParameters"
        }
      }
    },
    "Genesis<Shelley>": {
      "title": "Genesis<Shelley>",
      "type": "object",
      "description": "A Shelley genesis configuration, with information used to bootstrap the era. Some parameters are also updatable across the era.",
      "additionalProperties": false,
      "required": [
        "era",
        "startTime",
        "networkMagic",
        "network",
        "activeSlotsCoefficient",
        "securityParameter",
        "epochLength",
        "slotsPerKesPeriod",
        "maxKesEvolutions",
        "slotLength",
        "updateQuorum",
        "maxLovelaceSupply",
        "initialParameters",
        "initialDelegates",
        "initialFunds",
        "initialStakePools"
      ],
      "properties": {
        "era": {
          "type": "string",
          "enum": [
            "shelley"
          ]
        },
        "startTime": {
          "$ref": "#/definitions/UtcTime"
        },
        "networkMagic": {
          "$ref": "#/definitions/NetworkMagic"
        },
        "network": {
          "$ref": "#/definitions/Network"
        },
        "activeSlotsCoefficient": {
          "$ref": "#/definitions/Ratio"
        },
        "securityParameter": {
          "$ref": "#/definitions/UInt64"
        },
        "epochLength": {
          "$ref": "#/definitions/Epoch"
        },
        "slotsPerKesPeriod": {
          "$ref": "#/definitions/UInt64"
        },
        "maxKesEvolutions": {
          "$ref": "#/definitions/UInt64"
        },
        "slotLength": {
          "$ref": "#/definitions/SlotLength"
        },
        "updateQuorum": {
          "$ref": "#/definitions/UInt64"
        },
        "maxLovelaceSupply": {
          "$ref": "#/definitions/UInt64"
        },
        "initialParameters": {
          "$ref": "#/definitions/ProtocolParameters"
        },
        "initialDelegates": {
          "$ref": "#/definitions/InitialDelegates"
        },
        "initialFunds": {
          "type": "object",
          "title": "InitialFunds",
          "propertyNames": {
            "$ref": "#/definitions/Address"
          },
          "additionalProperties": {
            "$ref": "#/definitions/Value<AdaOnly>"
          }
        },
        "initialStakePools": {
          "$ref": "#/definitions/GenesisStakePools"
        }
      }
    },
    "Genesis<Alonzo>": {
      "title": "Genesis<Alonzo>",
      "type": "object",
      "description": "An Alonzo genesis configuration, with information used to bootstrap the era. Some parameters are also updatable across the era.",
      "additionalProperties": false,
      "required": [
        "era",
        "updatableParameters"
      ],
      "properties": {
        "era": {
          "type": "string",
          "enum": [
            "alonzo"
          ]
        },
        "updatableParameters": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "minUtxoDepositCoefficient",
            "collateralPercentage",
            "plutusCostModels",
            "maxCollateralInputs",
            "maxExecutionUnitsPerBlock",
            "maxExecutionUnitsPerTransaction",
            "maxValueSize",
            "scriptExecutionPrices"
          ],
          "properties": {
            "minUtxoDepositCoefficient": {
              "$ref": "#/definitions/UInt64"
            },
            "collateralPercentage": {
              "$ref": "#/definitions/UInt64"
            },
            "plutusCostModels": {
              "$ref": "#/definitions/CostModels"
            },
            "maxCollateralInputs": {
              "$ref": "#/definitions/UInt64"
            },
            "maxExecutionUnitsPerBlock": {
              "$ref": "#/definitions/ExecutionUnits"
            },
            "maxExecutionUnitsPerTransaction": {
              "$ref": "#/definitions/ExecutionUnits"
            },
            "maxValueSize": {
              "$ref": "#/definitions/NumberOfBytes"
            },
            "scriptExecutionPrices": {
              "$ref": "#/definitions/ScriptExecutionPrices"
            }
          }
        }
      }
    },
    "Genesis<Conway>": {
      "title": "Genesis<Conway>",
      "type": "object",
      "description": "An Conway genesis configuration, with information used to bootstrap the era. Some parameters are also updatable across the era.",
      "additionalProperties": false,
      "required": [
        "era",
        "constitution",
        "constitutionalCommittee",
        "updatableParameters"
      ],
      "properties": {
        "era": {
          "type": "string",
          "enum": [
            "conway"
          ]
        },
        "constitution": {
          "$ref": "#/definitions/Constitution"
        },
        "constitutionalCommittee": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "members",
            "quorum"
          ],
          "properties": {
            "members": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConstitutionalCommitteeMemberSummary"
              }
            },
            "quorum": {
              "$ref": "#/definitions/Ratio"
            }
          }
        },
        "updatableParameters": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "stakePoolVotingThresholds",
            "constitutionalCommitteeMinSize",
            "constitutionalCommitteeMaxTermLength",
            "governanceActionLifetime",
            "governanceActionDeposit",
            "delegateRepresentativeVotingThresholds",
            "delegateRepresentativeDeposit",
            "delegateRepresentativeMaxIdleTime"
          ],
          "properties": {
            "stakePoolVotingThresholds": {
              "$ref": "#/definitions/StakePoolVotingThresholds"
            },
            "constitutionalCommitteeMinSize": {
              "$ref": "#/definitions/UInt64"
            },
            "constitutionalCommitteeMaxTermLength": {
              "$ref": "#/definitions/UInt64"
            },
            "governanceActionLifetime": {
              "$ref": "#/definitions/Epoch"
            },
            "governanceActionDeposit": {
              "$ref": "#/definitions/Value<AdaOnly>"
            },
            "delegateRepresentativeVotingThresholds": {
              "$ref": "#/definitions/DelegateRepresentativeVotingThresholds"
            },
            "delegateRepresentativeDeposit": {
              "$ref": "#/definitions/Value<AdaOnly>"
            },
            "delegateRepresentativeMaxIdleTime": {
              "$ref": "#/definitions/Epoch"
            }
          }
        }
      }
    },
    "GenesisDelegate": {
      "title": "GenesisDelegate",
      "type": "object",
      "description": "A Genesis delegate, in charge of Cardano's governance.",
      "additionalProperties": false,
      "required": [
        "vrfVerificationKeyHash",
        "id"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/Digest<Blake2b, 224>"
        },
        "vrfVerificationKeyHash": {
          "$ref": "#/definitions/Digest<Blake2b, 256>"
        }
      }
    },
    "GenesisStakePools": {
      "title": "GenesisStakePools",
      "type": "object",
      "description": "A Genesis stake pools configuration; primarily used for bootstrapping test networks.",
      "additionalProperties": false,
      "required": [
        "stakePools",
        "delegators"
      ],
      "properties": {
        "stakePools": {
          "type": "object",
          "propertyNames": {
            "$ref": "#/definitions/StakePoolId"
          },
          "additionalProperties": {
            "$ref": "#/definitions/StakePool"
          }
        },
        "delegators": {
          "type": "object",
          "propertyNames": {
            "$ref": "#/definitions/Digest<Blake2b, 224>"
          },
          "additionalProperties": {
            "$ref": "#/definitions/StakePoolId"
          }
        }
      }
    },
    "GovernanceAction": {
      "oneOf": [
        {
          "title": "GovernanceAction<ProtocolParametersUpdate>",
          "type": "object",
          "description": "The 'ancestor' is a reference to the previous governance action of this group. It is optional for the first one and required after so that they all actions of a same group form a chain.",
          "additionalProperties": false,
          "required": [
            "type",
            "parameters",
            "guardrails"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "protocolParametersUpdate"
              ]
            },
            "ancestor": {
              "$ref": "#/definitions/GovernanceProposalReference"
            },
            "parameters": {
              "$ref": "#/definitions/ProposedProtocolParameters"
            },
            "guardrails": {
              "oneOf": [
                {
                  "$ref": "#/definitions/Null"
                },
                {
                  "type": "object",
                  "required": [
                    "hash"
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "hash": {
                      "$ref": "#/definitions/Digest<Blake2b, 224>"
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "title": "GovernanceAction<HardForkInitiation>",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "type",
            "version"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "hardForkInitiation"
              ]
            },
            "ancestor": {
              "$ref": "#/definitions/GovernanceProposalReference"
            },
            "version": {
              "$ref": "#/definitions/ProtocolVersion"
            }
          }
        },
        {
          "title": "GovernanceAction<TreasuryTransfer>",
          "type": "object",
          "description": "A transfer from or to the treasury / reserves authored by genesis delegates.",
          "additionalProperties": false,
          "required": [
            "type",
            "source",
            "target",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "treasuryTransfer"
              ]
            },
            "source": {
              "type": "string",
              "enum": [
                "reserves",
                "treasury"
              ]
            },
            "target": {
              "type": "string",
              "enum": [
                "reserves",
                "treasury"
              ]
            },
            "value": {
              "$ref": "#/definitions/Value<AdaOnly>"
            }
          }
        },
        {
          "type": "object",
          "title": "GovernanceAction<TreasuryWithdrawals>",
          "description": "One of more withdrawals from the treasury.",
          "additionalProperties": false,
          "required": [
            "type",
            "withdrawals",
            "guardrails"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "treasuryWithdrawals"
              ]
            },
            "withdrawals": {
              "$ref": "#/definitions/RewardTransfer"
            },
            "guardrails": {
              "oneOf": [
                {
                  "$ref": "#/definitions/Null"
                },
                {
                  "type": "object",
                  "required": [
                    "hash"
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "hash": {
                      "$ref": "#/definitions/Digest<Blake2b, 224>"
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "type": "object",
          "title": "GovernanceAction<ConstitutionalCommittee>",
          "description": "A change (partial or total) in the constitutional committee. The 'ancestor' is a reference to the previous governance action of this group (also includes no confidence actions in this case). It is optional for the first one and required after so that they all actions of a same group form a chain.",
          "additionalProperties": false,
          "required": [
            "type",
            "members",
            "quorum"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "constitutionalCommittee"
              ]
            },
            "ancestor": {
              "$ref": "#/definitions/GovernanceProposalReference"
            },
            "members": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "added",
                "removed"
              ],
              "properties": {
                "added": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ConstitutionalCommitteeMemberSummary"
                  }
                },
                "removed": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "id",
                      "from"
                    ],
                    "properties": {
                      "id": {
                        "$ref": "#/definitions/Digest<Blake2b, 224>"
                      },
                      "from": {
                        "$ref": "#/definitions/CredentialOrigin"
                      }
                    }
                  }
                }
              }
            },
            "quorum": {
              "$ref": "#/definitions/Ratio"
            }
          }
        },
        {
          "type": "object",
          "title": "GovernanceAction<Constitution>",
          "description": "A change in the constitution. Only its hash is recorded on-chain. The 'ancestor' is a reference to the previous governance action of this group. It is optional for the first one and required after so that they all actions of a same group form a chain.",
          "additionalProperties": false,
          "required": [
            "type",
            "metadata",
            "guardrails"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "constitution"
              ]
            },
            "ancestor": {
              "$ref": "#/definitions/GovernanceProposalReference"
            },
            "guardrails": {
              "oneOf": [
                {
                  "$ref": "#/definitions/Null"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "hash"
                  ],
                  "properties": {
                    "hash": {
                      "$ref": "#/definitions/Digest<Blake2b, 224>"
                    }
                  }
                }
              ]
            },
            "metadata": {
              "$ref": "#/definitions/Anchor"
            }
          }
        },
        {
          "type": "object",
          "title": "GovernanceAction<NoConfidence>",
          "description": "A motion of no-confidence, indicate a lack of trust in the constitutional committee. The 'ancestor' is a reference to the previous governance action of this group. It is optional for the first one and required after so that they all actions of a same group form a chain.",
          "additionalProperties": false,
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "noConfidence"
              ]
            },
            "ancestor": {
              "$ref": "#/definitions/GovernanceProposalReference"
            }
          }
        },
        {
          "type": "object",
          "title": "GovernanceAction<Information>",
          "description": "An action that has no effect on-chain, other than an on-chain record",
          "additionalProperties": false,
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "information"
              ]
            }
          }
        }
      ]
    },
    "GovernanceProposal": {
      "title": "GovernanceProposal",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "action"
      ],
      "properties": {
        "deposit": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "returnAccount": {
          "$ref": "#/definitions/RewardAccount"
        },
        "metadata": {
          "$ref": "#/definitions/Anchor"
        },
        "action": {
          "$ref": "#/definitions/GovernanceAction"
        }
      }
    },
    "GovernanceProposalReference": {
      "title": "GovernanceProposalReference",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "transaction",
        "index"
      ],
      "properties": {
        "transaction": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "$ref": "#/definitions/TransactionId"
            }
          }
        },
        "index": {
          "$ref": "#/definitions/UInt32"
        }
      }
    },
    "GovernanceProposalState": {
      "title": "GovernanceProposalState",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "proposal",
        "action",
        "deposit",
        "returnAccount",
        "metadata",
        "since",
        "until",
        "votes"
      ],
      "properties": {
        "proposal": {
          "$ref": "#/definitions/GovernanceProposalReference"
        },
        "deposit": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "returnAccount": {
          "$ref": "#/definitions/RewardAccount"
        },
        "metadata": {
          "$ref": "#/definitions/Anchor"
        },
        "action": {
          "$ref": "#/definitions/GovernanceAction"
        },
        "since": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "epoch"
          ],
          "properties": {
            "epoch": {
              "$ref": "#/definitions/Epoch"
            }
          }
        },
        "until": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "epoch"
          ],
          "properties": {
            "epoch": {
              "$ref": "#/definitions/Epoch"
            }
          }
        },
        "votes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GovernanceVote"
          }
        }
      }
    },
    "GovernanceVote": {
      "title": "GovernanceVote",
      "description": "A vote on a governance proposal. The 'anchor' is optional and 'proposal' is only present from Conway onwards. Before Conway, a vote would always refer to all proposals part of the same transaction.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "issuer",
        "vote"
      ],
      "properties": {
        "issuer": {
          "$ref": "#/definitions/GovernanceVoter"
        },
        "metadata": {
          "$ref": "#/definitions/Anchor"
        },
        "vote": {
          "type": "string",
          "enum": [
            "yes",
            "no",
            "abstain"
          ]
        },
        "proposal": {
          "$ref": "#/definitions/GovernanceProposalReference"
        }
      }
    },
    "GovernanceVoter": {
      "oneOf": [
        {
          "title": "Voter<GenesisDelegate>",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "role",
            "id",
            "from"
          ],
          "properties": {
            "role": {
              "type": "string",
              "enum": [
                "genesisDelegate"
              ]
            },
            "id": {
              "$ref": "#/definitions/Digest<Blake2b, 224>"
            },
            "from": {
              "$ref": "#/definitions/CredentialOrigin"
            }
          }
        },
        {
          "title": "Voter<ConstitutionalCommittee>",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "role",
            "id",
            "from"
          ],
          "properties": {
            "role": {
              "type": "string",
              "enum": [
                "constitutionalCommittee"
              ]
            },
            "id": {
              "$ref": "#/definitions/Digest<Blake2b, 224>"
            },
            "from": {
              "$ref": "#/definitions/CredentialOrigin"
            }
          }
        },
        {
          "title": "Voter<DelegateRepresentative>",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "role",
            "id",
            "from"
          ],
          "properties": {
            "role": {
              "type": "string",
              "enum": [
                "delegateRepresentative"
              ]
            },
            "id": {
              "$ref": "#/definitions/Digest<Blake2b, 224>"
            },
            "from": {
              "$ref": "#/definitions/CredentialOrigin"
            }
          }
        },
        {
          "title": "Voter<StakePoolOperator>",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "role",
            "id"
          ],
          "properties": {
            "role": {
              "type": "string",
              "enum": [
                "stakePoolOperator"
              ]
            },
            "id": {
              "$ref": "#/definitions/StakePoolId"
            }
          }
        }
      ]
    },
    "ExtendedVerificationKey": {
      "title": "ExtendedVerificationKey",
      "type": "string",
      "description": "An Ed25519-BIP32 Byron genesis delegate verification key with chain-code.",
      "contentEncoding": "base16",
      "minLength": 128,
      "maxLength": 128
    },
    "InitialDelegates": {
      "title": "InitialDelegates",
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "issuer",
          "delegate"
        ],
        "properties": {
          "issuer": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "$ref": "#/definitions/Digest<Blake2b, 224>"
              }
            }
          },
          "delegate": {
            "$ref": "#/definitions/GenesisDelegate"
          }
        }
      }
    },
    "Int64": {
      "title": "Int64",
      "type": "integer",
      "minimum": -9223372036854775808,
      "maximum": 9223372036854775807
    },
    "InputSource": {
      "type": "string",
      "enum": [
        "inputs",
        "collaterals"
      ]
    },
    "Language": {
      "title": "Language",
      "type": "string",
      "enum": [
        "plutus:v1",
        "plutus:v2",
        "plutus:v3"
      ]
    },
    "KesVerificationKey": {
      "title": "KesVerificationKey",
      "type": "string",
      "contentEncoding": "base16"
    },
    "Mandate": {
      "title": "Mandate",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "epoch"
      ],
      "properties": {
        "epoch": {
          "$ref": "#/definitions/Epoch"
        }
      }
    },
    "Network": {
      "title": "Network",
      "type": "string",
      "description": "A network target, as defined since the Shelley era.",
      "enum": [
        "mainnet",
        "testnet"
      ]
    },
    "NetworkMagic": {
      "title": "NetworkMagic",
      "type": "integer",
      "description": "A magic number for telling networks apart. (e.g. 764824073)",
      "minimum": 0,
      "maximum": 4294967296,
      "examples": [
        764824073
      ]
    },
    "Nonce": {
      "title": "Nonce",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "neutral"
          ],
          "title": "Neutral"
        },
        {
          "$ref": "#/definitions/Digest<Blake2b, 256>"
        }
      ]
    },
    "Null": {
      "type": "null"
    },
    "NumberOfBytes": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "bytes"
      ],
      "properties": {
        "bytes": {
          "$ref": "#/definitions/UInt64"
        }
      }
    },
    "OperationalCertificate": {
      "title": "OperationalCertificate",
      "type": "object",
      "description": "Certificate identifying a stake pool operator.",
      "additionalProperties": false,
      "required": [
        "count",
        "kes"
      ],
      "properties": {
        "count": {
          "$ref": "#/definitions/UInt64"
        },
        "sigma": {
          "$ref": "#/definitions/Signature"
        },
        "kes": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "period",
            "verificationKey"
          ],
          "properties": {
            "period": {
              "$ref": "#/definitions/UInt64"
            },
            "verificationKey": {
              "$ref": "#/definitions/KesVerificationKey"
            }
          }
        }
      }
    },
    "Origin": {
      "title": "Origin",
      "type": "string",
      "description": "The origin of the blockchain. This point is special in the sense that it doesn't point to any existing slots, but is preceding any existing other point.",
      "enum": [
        "origin"
      ]
    },
    "PolicyId": {
      "title": "PolicyId",
      "$ref": "#/definitions/Digest<Blake2b, 224>"
    },
    "StakePool": {
      "title": "StakePool",
      "description": "The field 'stake' is only present when explicitly requested (see related state-queries).",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "cost",
        "margin",
        "owners",
        "pledge",
        "relays",
        "rewardAccount",
        "vrfVerificationKeyHash"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/StakePoolId"
        },
        "vrfVerificationKeyHash": {
          "$ref": "#/definitions/Digest<Blake2b, 256>"
        },
        "owners": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Digest<Blake2b, 224>"
          }
        },
        "cost": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "margin": {
          "$ref": "#/definitions/Ratio"
        },
        "pledge": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "rewardAccount": {
          "$ref": "#/definitions/RewardAccount"
        },
        "metadata": {
          "$ref": "#/definitions/Anchor"
        },
        "relays": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Relay"
          }
        },
        "stake": {
          "$ref": "#/definitions/Value<AdaOnly>"
        }
      }
    },
    "StakePoolId": {
      "title": "StakePoolId",
      "type": "string",
      "description": "A Blake2b 28-byte hash digest of a pool's verification key.",
      "contentEncoding": "bech32",
      "pattern": "^pool1[0-9a-z]*$",
      "examples": [
        "pool1qqqqpanw9zc0rzh0yp247nzf2s35uvnsm7aaesfl2nnejaev0uc",
        "pool1qqqqqdk4zhsjuxxd8jyvwncf5eucfskz0xjjj64fdmlgj735lr9"
      ]
    },
    "StakePoolVotingThresholds": {
      "title": "StakePoolVotingThresholds",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "noConfidence",
        "constitutionalCommittee",
        "hardForkInitiation",
        "protocolParametersUpdate"
      ],
      "properties": {
        "noConfidence": {
          "$ref": "#/definitions/Ratio"
        },
        "constitutionalCommittee": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "default",
            "stateOfNoConfidence"
          ],
          "properties": {
            "default": {
              "$ref": "#/definitions/Ratio"
            },
            "stateOfNoConfidence": {
              "$ref": "#/definitions/Ratio"
            }
          }
        },
        "hardForkInitiation": {
          "$ref": "#/definitions/Ratio"
        },
        "protocolParametersUpdate": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "security"
          ],
          "properties": {
            "security": {
              "$ref": "#/definitions/Ratio"
            }
          }
        }
      }
    },
    "ProposedProtocolParameters": {
      "title": "ProposedProtocolParameters",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "minFeeCoefficient": {
          "$ref": "#/definitions/UInt64"
        },
        "minFeeConstant": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "minFeeReferenceScripts": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "range",
            "base",
            "multiplier"
          ],
          "properties": {
            "range": {
              "$ref": "#/definitions/UInt32"
            },
            "base": {
              "type": "number"
            },
            "multiplier": {
              "type": "number"
            }
          }
        },
        "minUtxoDepositCoefficient": {
          "$ref": "#/definitions/UInt64"
        },
        "minUtxoDepositConstant": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "maxBlockBodySize": {
          "$ref": "#/definitions/NumberOfBytes"
        },
        "maxBlockHeaderSize": {
          "$ref": "#/definitions/NumberOfBytes"
        },
        "maxTransactionSize": {
          "$ref": "#/definitions/NumberOfBytes"
        },
        "maxReferenceScriptsSize": {
          "$ref": "#/definitions/NumberOfBytes"
        },
        "maxValueSize": {
          "$ref": "#/definitions/NumberOfBytes"
        },
        "extraEntropy": {
          "$ref": "#/definitions/Nonce"
        },
        "stakeCredentialDeposit": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "stakePoolDeposit": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "stakePoolRetirementEpochBound": {
          "$ref": "#/definitions/UInt64"
        },
        "stakePoolPledgeInfluence": {
          "$ref": "#/definitions/Ratio"
        },
        "minStakePoolCost": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "desiredNumberOfStakePools": {
          "$ref": "#/definitions/UInt64"
        },
        "federatedBlockProductionRatio": {
          "$ref": "#/definitions/Ratio"
        },
        "monetaryExpansion": {
          "$ref": "#/definitions/Ratio"
        },
        "treasuryExpansion": {
          "$ref": "#/definitions/Ratio"
        },
        "collateralPercentage": {
          "$ref": "#/definitions/UInt64"
        },
        "maxCollateralInputs": {
          "$ref": "#/definitions/UInt64"
        },
        "plutusCostModels": {
          "$ref": "#/definitions/CostModels"
        },
        "scriptExecutionPrices": {
          "$ref": "#/definitions/ScriptExecutionPrices"
        },
        "maxExecutionUnitsPerTransaction": {
          "$ref": "#/definitions/ExecutionUnits"
        },
        "maxExecutionUnitsPerBlock": {
          "$ref": "#/definitions/ExecutionUnits"
        },
        "stakePoolVotingThresholds": {
          "$ref": "#/definitions/StakePoolVotingThresholds"
        },
        "constitutionalCommitteeMinSize": {
          "$ref": "#/definitions/UInt16"
        },
        "constitutionalCommitteeMaxTermLength": {
          "$ref": "#/definitions/UInt64"
        },
        "governanceActionLifetime": {
          "$ref": "#/definitions/Epoch"
        },
        "governanceActionDeposit": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "delegateRepresentativeVotingThresholds": {
          "$ref": "#/definitions/DelegateRepresentativeVotingThresholds"
        },
        "delegateRepresentativeDeposit": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "delegateRepresentativeMaxIdleTime": {
          "$ref": "#/definitions/Epoch"
        },
        "version": {
          "$ref": "#/definitions/ProtocolVersion"
        }
      }
    },
    "ProtocolParameters": {
      "title": "ProtocolParameters",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "minFeeCoefficient",
        "minFeeConstant",
        "minUtxoDepositCoefficient",
        "minUtxoDepositConstant",
        "maxBlockBodySize",
        "maxBlockHeaderSize",
        "stakeCredentialDeposit",
        "stakePoolDeposit",
        "stakePoolRetirementEpochBound",
        "stakePoolPledgeInfluence",
        "minStakePoolCost",
        "monetaryExpansion",
        "treasuryExpansion",
        "desiredNumberOfStakePools",
        "version"
      ],
      "properties": {
        "minFeeCoefficient": {
          "$ref": "#/definitions/UInt64"
        },
        "minFeeConstant": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "minFeeReferenceScripts": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "range",
            "base",
            "multiplier"
          ],
          "properties": {
            "range": {
              "$ref": "#/definitions/UInt32"
            },
            "base": {
              "type": "number",
              "description": "The base cost for the tier-price calculation."
            },
            "multiplier": {
              "type": "number",
              "description": "The multiplier increasing the cost of each tier."
            }
          }
        },
        "minUtxoDepositCoefficient": {
          "$ref": "#/definitions/UInt64"
        },
        "minUtxoDepositConstant": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "maxBlockBodySize": {
          "$ref": "#/definitions/NumberOfBytes"
        },
        "maxBlockHeaderSize": {
          "$ref": "#/definitions/NumberOfBytes"
        },
        "maxTransactionSize": {
          "$ref": "#/definitions/NumberOfBytes"
        },
        "maxValueSize": {
          "$ref": "#/definitions/NumberOfBytes"
        },
        "extraEntropy": {
          "$ref": "#/definitions/Nonce"
        },
        "stakeCredentialDeposit": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "stakePoolDeposit": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "stakePoolRetirementEpochBound": {
          "$ref": "#/definitions/UInt64"
        },
        "stakePoolPledgeInfluence": {
          "$ref": "#/definitions/Ratio"
        },
        "minStakePoolCost": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "desiredNumberOfStakePools": {
          "$ref": "#/definitions/UInt64"
        },
        "federatedBlockProductionRatio": {
          "$ref": "#/definitions/Ratio"
        },
        "monetaryExpansion": {
          "$ref": "#/definitions/Ratio"
        },
        "treasuryExpansion": {
          "$ref": "#/definitions/Ratio"
        },
        "collateralPercentage": {
          "$ref": "#/definitions/UInt64"
        },
        "maxCollateralInputs": {
          "$ref": "#/definitions/UInt64"
        },
        "plutusCostModels": {
          "$ref": "#/definitions/CostModels"
        },
        "scriptExecutionPrices": {
          "$ref": "#/definitions/ScriptExecutionPrices"
        },
        "maxExecutionUnitsPerTransaction": {
          "$ref": "#/definitions/ExecutionUnits"
        },
        "maxExecutionUnitsPerBlock": {
          "$ref": "#/definitions/ExecutionUnits"
        },
        "maxReferenceScriptsSize": {
          "$ref": "#/definitions/NumberOfBytes"
        },
        "stakePoolVotingThresholds": {
          "$ref": "#/definitions/StakePoolVotingThresholds"
        },
        "constitutionalCommitteeMinSize": {
          "$ref": "#/definitions/UInt16"
        },
        "constitutionalCommitteeMaxTermLength": {
          "$ref": "#/definitions/UInt64"
        },
        "governanceActionLifetime": {
          "$ref": "#/definitions/Epoch"
        },
        "governanceActionDeposit": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "delegateRepresentativeVotingThresholds": {
          "$ref": "#/definitions/DelegateRepresentativeVotingThresholds"
        },
        "delegateRepresentativeDeposit": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "delegateRepresentativeMaxIdleTime": {
          "$ref": "#/definitions/Epoch"
        },
        "version": {
          "$ref": "#/definitions/ProtocolVersion"
        }
      }
    },
    "ProtocolVersion": {
      "title": "ProtocolVersion",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "major",
        "minor"
      ],
      "properties": {
        "major": {
          "$ref": "#/definitions/UInt32"
        },
        "minor": {
          "$ref": "#/definitions/UInt32"
        },
        "patch": {
          "$ref": "#/definitions/UInt32"
        }
      }
    },
    "Ratio": {
      "title": "Ratio",
      "type": "string",
      "description": "A ratio of two integers, to express exact fractions.",
      "pattern": "^-?[0-9]+/[0-9]+$",
      "examples": [
        "2/3",
        "7/8"
      ]
    },
    "Redeemer": {
      "title": "Redeemer",
      "type": "object",
      "examples": [
        {
          "executionUnits": {
            "memory": 2,
            "cpu": 2
          },
          "redeemer": "ggRCqSQ=",
          "validator": {
            "index": 0,
            "purpose": "spend"
          }
        }
      ],
      "additionalProperties": false,
      "required": [
        "redeemer",
        "executionUnits",
        "validator"
      ],
      "properties": {
        "redeemer": {
          "$ref": "#/definitions/RedeemerData"
        },
        "executionUnits": {
          "$ref": "#/definitions/ExecutionUnits"
        },
        "validator": {
          "$ref": "#/definitions/RedeemerPointer"
        }
      }
    },
    "RedeemerData": {
      "title": "RedeemerData",
      "type": "string",
      "contentEncoding": "base16",
      "description": "Plutus data, CBOR-serialised."
    },
    "RedeemerPointer": {
      "title": "RedeemerPointer",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "purpose",
        "index"
      ],
      "properties": {
        "purpose": {
          "type": "string",
          "enum": [
            "spend",
            "mint",
            "publish",
            "withdraw",
            "vote",
            "propose"
          ]
        },
        "index": {
          "$ref": "#/definitions/UInt64"
        }
      }
    },
    "RelativeTime": {
      "title": "RelativeTime",
      "description": "A time in seconds relative to another one (typically, system start or era start).",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "seconds"
      ],
      "properties": {
        "seconds": {
          "type": "integer"
        }
      }
    },
    "Relay": {
      "title": "Relay",
      "oneOf": [
        {
          "type": "object",
          "title": "Relay<ByAddress>",
          "additionalProperties": false,
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "ipAddress"
              ]
            },
            "ipv4": {
              "type": "string"
            },
            "ipv6": {
              "type": "string"
            },
            "port": {
              "type": "integer",
              "minimum": 0,
              "maximum": 65535
            }
          }
        },
        {
          "type": "object",
          "title": "Relay<ByName>",
          "additionalProperties": false,
          "required": [
            "type",
            "hostname"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "hostname"
              ]
            },
            "hostname": {
              "type": "string"
            },
            "port": {
              "type": "integer",
              "minimum": 0,
              "maximum": 65535
            }
          }
        }
      ]
    },
    "RewardAccount": {
      "title": "RewardAccount",
      "type": "string",
      "description": "A reward account, also known as 'stake address'.",
      "contentEncoding": "bech32",
      "pattern": "^stake(_test)?1[0-9a-z]+$",
      "examples": [
        "stake1ux7pt9adw8z46tgqn2f8fvurrhk325gcm4mf75mkmmxpx6gae9mzv"
      ]
    },
    "RewardTransfer": {
      "title": "RewardTransfer",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/Value<Delta>"
      },
      "propertyNames": {
        "pattern": "[0-9a-f]{56}$"
      },
      "examples": [
        {
          "6d06fe0a5a8cb6d2bcc352581dea626bb5b2f66edf85678b2f2fa7b5": {
            "ada": {
              "lovelace": 123456789
            }
          }
        }
      ]
    },
    "SafeZone": {
      "title": "SafeZone",
      "type": "integer",
      "description": "Number of slots from the tip of the ledger in which it is guaranteed that no hard fork can take place. This should be (at least) the number of slots in which we are guaranteed to have k blocks.",
      "minimum": 0,
      "maximum": 18446744073709552999
    },
    "Script": {
      "title": "Script",
      "oneOf": [
        {
          "type": "object",
          "title": "Native",
          "additionalProperties": false,
          "description": "A Cardano native script. Use --include-script-cbor to ALWAYS include the 'cbor' field. Omitted otherwise.",
          "required": [
            "language",
            "json"
          ],
          "properties": {
            "language": {
              "type": "string",
              "enum": [
                "native"
              ]
            },
            "json": {
              "$ref": "#/definitions/Script<Native>"
            },
            "cbor": {
              "type": "string",
              "contentEncoding": "base16"
            }
          }
        },
        {
          "type": "object",
          "title": "Plutus",
          "additionalProperties": false,
          "required": [
            "language",
            "cbor"
          ],
          "properties": {
            "language": {
              "type": "string",
              "enum": [
                "plutus:v1",
                "plutus:v2",
                "plutus:v3"
              ]
            },
            "cbor": {
              "type": "string",
              "contentEncoding": "base16"
            }
          }
        }
      ]
    },
    "Script<Native>": {
      "title": "Script<Native>",
      "description": "A phase-1 monetary script. Timelocks constraints are only supported since Allegra.",
      "examples": [
        {
          "clause": "signature",
          "from": "3c07030e36bfff7cd2f004356ef320f3fe3c07030e7cd2f004356437"
        },
        {
          "clause": "all",
          "from": [
            {
              "clause": "signature",
              "from": "ec09e5293d384637cd2f004356ef320f3fe3c07030e36bfffe67e2e2"
            },
            {
              "clause": "signature",
              "from": "3c07030e36bfff7cd2f004356ef320f3fe3c07030e7cd2f004356437"
            }
          ]
        },
        {
          "clause": "some",
          "atLeast": 2,
          "from": [
            {
              "clause": "signature",
              "from": "ec09e5293d384637cd2f004356ef320f3fe3c07030e36bfffe67e2e2"
            },
            {
              "clause": "signature",
              "from": "3c07030e36bfff7cd2f004356ef320f3fe3c07030e7cd2f004356437"
            },
            {
              "clause": "after",
              "slot": 42
            }
          ]
        }
      ],
      "oneOf": [
        {
          "type": "object",
          "title": "Clause<Signature>",
          "additionalProperties": false,
          "required": [
            "clause",
            "from"
          ],
          "properties": {
            "clause": {
              "type": "string",
              "enum": [
                "signature"
              ]
            },
            "from": {
              "$ref": "#/definitions/Digest<Blake2b, 224>"
            }
          }
        },
        {
          "type": "object",
          "title": "Clause<Any>",
          "additionalProperties": false,
          "required": [
            "clause",
            "from"
          ],
          "properties": {
            "clause": {
              "type": "string",
              "enum": [
                "any"
              ]
            },
            "from": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Script<Native>"
              }
            }
          }
        },
        {
          "type": "object",
          "title": "Clause<All>",
          "additionalProperties": false,
          "required": [
            "clause",
            "from"
          ],
          "properties": {
            "clause": {
              "type": "string",
              "enum": [
                "all"
              ]
            },
            "from": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Script<Native>"
              }
            }
          }
        },
        {
          "type": "object",
          "title": "Clause<Some>",
          "additionalProperties": false,
          "required": [
            "clause",
            "from",
            "atLeast"
          ],
          "properties": {
            "clause": {
              "type": "string",
              "enum": [
                "some"
              ]
            },
            "atLeast": {
              "type": "integer"
            },
            "from": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Script<Native>"
              }
            }
          }
        },
        {
          "type": "object",
          "title": "Clause<Before>",
          "additionalProperties": false,
          "required": [
            "clause",
            "slot"
          ],
          "properties": {
            "clause": {
              "type": "string",
              "enum": [
                "before"
              ]
            },
            "slot": {
              "$ref": "#/definitions/Slot"
            }
          }
        },
        {
          "type": "object",
          "title": "Clause<After>",
          "additionalProperties": false,
          "required": [
            "clause",
            "slot"
          ],
          "properties": {
            "clause": {
              "type": "string",
              "enum": [
                "after"
              ]
            },
            "slot": {
              "$ref": "#/definitions/Slot"
            }
          }
        }
      ]
    },
    "ScriptExecutionPrices": {
      "title": "ScriptExecutionPrices",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "memory",
        "cpu"
      ],
      "properties": {
        "memory": {
          "$ref": "#/definitions/Ratio"
        },
        "cpu": {
          "$ref": "#/definitions/Ratio"
        }
      }
    },
    "ScriptPurpose": {
      "title": "ScriptPurpose",
      "oneOf": [
        {
          "title": "ScriptPurpose<Spend>",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "purpose",
            "outputReference"
          ],
          "properties": {
            "purpose": {
              "type": "string",
              "enum": [
                "spend"
              ]
            },
            "outputReference": {
              "$ref": "#/definitions/TransactionOutputReference"
            }
          }
        },
        {
          "title": "ScriptPurpose<Mint>",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "purpose",
            "policy"
          ],
          "properties": {
            "purpose": {
              "type": "string",
              "enum": [
                "mint"
              ]
            },
            "policy": {
              "$ref": "#/definitions/PolicyId"
            }
          }
        },
        {
          "title": "ScriptPurpose<Publish>",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "purpose",
            "certificate"
          ],
          "properties": {
            "purpose": {
              "type": "string",
              "enum": [
                "publish"
              ]
            },
            "certificate": {
              "$ref": "#/definitions/Certificate"
            }
          }
        },
        {
          "title": "ScriptPurpose<Withdraw>",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "purpose",
            "rewardAccount"
          ],
          "properties": {
            "purpose": {
              "type": "string",
              "enum": [
                "withdraw"
              ]
            },
            "rewardAccount": {
              "$ref": "#/definitions/RewardAccount"
            }
          }
        },
        {
          "title": "ScriptPurpose<Propose>",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "purpose",
            "proposal"
          ],
          "properties": {
            "purpose": {
              "type": "string",
              "enum": [
                "propose"
              ]
            },
            "proposal": {
              "$ref": "#/definitions/GovernanceProposal"
            }
          }
        },
        {
          "title": "ScriptPurpose<Vote>",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "purpose",
            "issuer"
          ],
          "properties": {
            "purpose": {
              "type": "string",
              "enum": [
                "vote"
              ]
            },
            "issuer": {
              "$ref": "#/definitions/GovernanceVoter"
            }
          }
        }
      ]
    },
    "Signature": {
      "title": "Signature",
      "type": "string",
      "description": "An EdDSA signature.",
      "contentEncoding": "base16",
      "minLength": 128,
      "maxLength": 128
    },
    "Signatory": {
      "title": "Signatory",
      "description": "A signatory (EdDSA) for the transaction. The fields 'chainCode' and 'addressAttributes' are only present on bootstrap signatures (when spending from a Byron/Bootstrap address).",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "signature",
        "key"
      ],
      "properties": {
        "key": {
          "$ref": "#/definitions/VerificationKey"
        },
        "signature": {
          "$ref": "#/definitions/Signature"
        },
        "chainCode": {
          "$ref": "#/definitions/ChainCode"
        },
        "addressAttributes": {
          "$ref": "#/definitions/AddressAttributes"
        }
      },
      "examples": [
        {
          "signature": "deeb8f82f2af5836ebbc1b450b6dbf0b03c93afe5696f10d49e8a8304ebfac01deeb8f82f2af5836ebbc1b4ffffffff",
          "key": "deeb8f82f2af5836ebbc1b450b6dbf0b03c93afe5696f10d49e8a8304ebfac01",
          "addressAttributes": "cA==",
          "chainCode": "b6dbf0b03c93afe5696f10d49e8a8304ebfac01deeb8f82f2af5836ebbc1b450"
        },
        {
          "signature": "deeb8f82f2af5836ebbc1b450b6dbf0b03c93afe5696f10d49e8a8304ebfac01deeb8f82f2af5836ebbc1b4ffffffff",
          "key": "0c02af01eaacc939b3d0d817f4eb57d323ea5686cb1fecb8de821df1296b84a7"
        }
      ]
    },
    "Slot": {
      "title": "Slot",
      "description": "An absolute slot number.",
      "type": "integer",
      "minimum": 0,
      "maximum": 18446744073709552000
    },
    "SlotLength": {
      "title": "SlotLength",
      "description": "A slot length in milliseconds",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "milliseconds"
      ],
      "properties": {
        "milliseconds": {
          "type": "integer"
        }
      }
    },
    "SoftwareVersion": {
      "title": "SoftwareVersion",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "appName",
        "number"
      ],
      "properties": {
        "appName": {
          "type": "string"
        },
        "number": {
          "$ref": "#/definitions/UInt32"
        }
      }
    },
    "StakeAddress": {
      "title": "StakeAddress",
      "type": "string",
      "description": "A stake address (a.k.a reward account)",
      "contentEncoding": "bech32",
      "pattern": "^(stake|stake_test)1[0-9a-z]*$",
      "examples": [
        "stake179kzq4qulejydh045yzxwk4ksx780khkl4gdve9kzwd9vjcek9u8h"
      ]
    },
    "Tip": {
      "title": "Tip",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "slot",
        "id",
        "height"
      ],
      "properties": {
        "slot": {
          "$ref": "#/definitions/Slot"
        },
        "id": {
          "$ref": "#/definitions/Digest<Blake2b, 256>"
        },
        "height": {
          "$ref": "#/definitions/BlockHeight"
        }
      }
    },
    "Transaction": {
      "title": "Transaction",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "spends",
        "inputs",
        "outputs",
        "signatories"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/Digest<Blake2b, 256>"
        },
        "spends": {
          "$ref": "#/definitions/InputSource"
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionOutputReference"
          }
        },
        "references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionOutputReference"
          }
        },
        "collaterals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionOutputReference"
          }
        },
        "totalCollateral": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "collateralReturn": {
          "$ref": "#/definitions/TransactionOutput"
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionOutput"
          }
        },
        "certificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Certificate"
          }
        },
        "withdrawals": {
          "$ref": "#/definitions/Withdrawals"
        },
        "fee": {
          "$ref": "#/definitions/Value<AdaOnly>"
        },
        "validityInterval": {
          "$ref": "#/definitions/ValidityInterval"
        },
        "mint": {
          "$ref": "#/definitions/Assets"
        },
        "network": {
          "$ref": "#/definitions/Network"
        },
        "scriptIntegrityHash": {
          "$ref": "#/definitions/Digest<Blake2b, 256>"
        },
        "requiredExtraSignatories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Digest<Blake2b, 224>"
          }
        },
        "requiredExtraScripts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Digest<Blake2b, 224>"
          }
        },
        "proposals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GovernanceProposal"
          }
        },
        "votes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GovernanceVote"
          }
        },
        "metadata": {
          "type": "object"
        },
        "signatories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signatory"
          }
        },
        "scripts": {
          "type": "object",
          "propertyNames": {
            "contentEncoding": "base16",
            "pattern": "^[0-9a-f]+$"
          },
          "additionalProperties": {
            "$ref": "#/definitions/Script"
          }
        },
        "datums": {
          "type": "object",
          "propertyNames": {
            "contentEncoding": "base16",
            "pattern": "^[0-9a-f]+$"
          },
          "additionalProperties": {
            "$ref": "#/definitions/Datum"
          }
        },
        "redeemers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Redeemer"
          }
        },
        "treasury": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "value": {
              "$ref": "#/definitions/Value<AdaOnly>"
            },
            "donation": {
              "$ref": "#/definitions/Value<AdaOnly>"
            }
          }
        },
        "cbor": {
          "type": "string",
          "contentEncoding": "base16",
          "description": "The raw serialized (CBOR) transaction, as found on-chain. Use --include-transaction-cbor to ALWAYS include the 'cbor' field. Omitted otherwise."
        }
      }
    },
    "TransactionId": {
      "title": "TransactionId",
      "description": "A Blake2b 32-byte hash digest of a transaction body",
      "type": "string",
      "contentEncoding": "base16",
      "minLength": 64,
      "maxLength": 64
    },
    "TransactionOutput": {
      "title": "TransactionOutput",
      "description": "A transaction output. 'datum' and 'datumHash' are never present together.",
      "type": "object",
      "examples": [
        {
          "address": "addr_test1qz66ue36465w2qq40005h2hadad6pnjht8mu6sgplsfj74qdjnshguewlx4ww0eet26y2pal4xpav5prcydf28cvxtjqx46x7f",
          "value": {
            "ada": {
              "lovelace": 2
            },
            "3542acb3a64d80c29302260d62c3b87a742ad14abf855ebc6733081e": 42,
            "b5ae663aaea8e500157bdf4baafd6f5ba0ce5759f7cd4101fc132f54.706174617465": 1337
          }
        }
      ],
      "additionalProperties": false,
      "required": [
        "address",
        "value"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "value": {
          "$ref": "#/definitions/Value"
        },
        "datumHash": {
          "$ref": "#/definitions/Digest<Blake2b, 256>"
        },
        "datum": {
          "$ref": "#/definitions/Datum"
        },
        "script": {
          "$ref": "#/definitions/Script"
        }
      }
    },
    "TransactionOutputReference": {
      "title": "TransactionOutputReference",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "transaction",
        "index"
      ],
      "properties": {
        "transaction": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "$ref": "#/definitions/TransactionId"
            }
          }
        },
        "index": {
          "$ref": "#/definitions/UInt64"
        }
      }
    },
    "UInt8": {
      "title": "UInt8",
      "type": "integer",
      "minimum": 0,
      "maximum": 255
    },
    "UInt16": {
      "title": "UInt16",
      "type": "integer",
      "minimum": 0,
      "maximum": 65536
    },
    "UInt32": {
      "title": "UInt32",
      "type": "integer",
      "minimum": 0,
      "maximum": 4294967295
    },
    "UInt64": {
      "title": "UInt64",
      "type": "integer",
      "minimum": 0,
      "maximum": 18446744073709551615
    },
    "UtcTime": {
      "title": "UtcTime",
      "type": "string",
      "format": "date-time",
      "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.?[0-9]*Z?"
    },
    "Utxo": {
      "title": "Utxo",
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "transaction",
          "index",
          "value",
          "address"
        ],
        "properties": {
          "transaction": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "$ref": "#/definitions/TransactionId"
              }
            }
          },
          "index": {
            "$ref": "#/definitions/UInt32"
          },
          "address": {
            "$ref": "#/definitions/Address"
          },
          "value": {
            "$ref": "#/definitions/Value"
          },
          "datumHash": {
            "$ref": "#/definitions/Digest<Blake2b, 256>"
          },
          "datum": {
            "$ref": "#/definitions/Datum"
          },
          "script": {
            "$ref": "#/definitions/Script"
          }
        }
      }
    },
    "ValidityInterval": {
      "title": "ValidityInterval",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "invalidBefore": {
          "$ref": "#/definitions/Slot"
        },
        "invalidAfter": {
          "$ref": "#/definitions/Slot"
        }
      }
    },
    "Value": {
      "title": "Value",
      "type": "object",
      "propertyNames": {
        "pattern": "^[0-9a-f]{56}$"
      },
      "additionalProperties": {
        "type": "object",
        "propertyNames": {
          "pattern": "^[0-9a-f]{0,64}$"
        },
        "additionalProperties": {
          "$ref": "#/definitions/AssetQuantity"
        }
      },
      "required": [
        "ada"
      ],
      "properties": {
        "ada": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "lovelace"
          ],
          "properties": {
            "lovelace": {
              "type": "integer"
            }
          }
        }
      }
    },
    "Value<AdaOnly>": {
      "title": "Value<AdaOnly>",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "ada"
      ],
      "properties": {
        "ada": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "lovelace"
          ],
          "properties": {
            "lovelace": {
              "type": "integer"
            }
          }
        }
      }
    },
    "Value<Delta>": {
      "title": "Value<Delta>",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "ada"
      ],
      "properties": {
        "ada": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "lovelace"
          ],
          "properties": {
            "lovelace": {
              "type": "integer",
              "description": "An amount, possibly negative, in Lovelace (1e6 Lovelace = 1 Ada).",
              "minimum": -9223372036854775808,
              "maximum": 9223372036854775807
            }
          }
        }
      }
    },
    "VerificationKey": {
      "title": "VerificationKey",
      "description": "An Ed25519 verification key.",
      "type": "string",
      "contentEncoding": "base16",
      "minLength": 64,
      "maxLength": 64
    },
    "VotingPeriod": {
      "title": "VotingPeriod",
      "type": "string",
      "enum": [
        "voteForThisEpoch",
        "voteForNextEpoch"
      ]
    },
    "VrfProof": {
      "title": "VrfProof",
      "type": "string",
      "contentEncoding": "base16"
    },
    "VrfOutput": {
      "title": "VrfOutput",
      "type": "string",
      "contentEncoding": "base16"
    },
    "Withdrawals": {
      "title": "Withdrawals",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/Value<AdaOnly>"
      },
      "propertyNames": {
        "pattern": "^stake(_test)?1[0-9a-z]+$"
      }
    }
  }
}
