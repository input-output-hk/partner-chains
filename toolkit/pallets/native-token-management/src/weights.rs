
//! Autogenerated weights for pallet_native_token_management
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-02-04, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `macbook`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/sidechain-runtime/sidechain_runtime.compact.compressed.wasm
// --pallet
// pallet_native_token_management
// --extrinsic
// *
// --steps=50
// --repeat=20
// --wasm-execution=compiled
// --output
// toolkit/pallets/native-token-management/src/weights.rs
// --template
// .maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_native_token_management.
pub trait WeightInfo {
	fn transfer_tokens() -> Weight;
	fn set_main_chain_scripts() -> Weight;
}

/// Weights for pallet_native_token_management using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `NativeTokenManagement::MainChainScriptsConfiguration` (r:1 w:0)
	/// Proof: `NativeTokenManagement::MainChainScriptsConfiguration` (`max_values`: Some(1), `max_size`: Some(183), added: 678, mode: `MaxEncodedLen`)
	/// Storage: `NativeTokenManagement::Initialized` (r:1 w:1)
	/// Proof: `NativeTokenManagement::Initialized` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn transfer_tokens() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `59`
		//  Estimated: `1668`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 1668)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `NativeTokenManagement::MainChainScriptsConfiguration` (r:0 w:1)
	/// Proof: `NativeTokenManagement::MainChainScriptsConfiguration` (`max_values`: Some(1), `max_size`: Some(183), added: 678, mode: `MaxEncodedLen`)
	fn set_main_chain_scripts() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(2_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `NativeTokenManagement::MainChainScriptsConfiguration` (r:1 w:0)
	/// Proof: `NativeTokenManagement::MainChainScriptsConfiguration` (`max_values`: Some(1), `max_size`: Some(183), added: 678, mode: `MaxEncodedLen`)
	/// Storage: `NativeTokenManagement::Initialized` (r:1 w:1)
	/// Proof: `NativeTokenManagement::Initialized` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn transfer_tokens() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `59`
		//  Estimated: `1668`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 1668)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `NativeTokenManagement::MainChainScriptsConfiguration` (r:0 w:1)
	/// Proof: `NativeTokenManagement::MainChainScriptsConfiguration` (`max_values`: Some(1), `max_size`: Some(183), added: 678, mode: `MaxEncodedLen`)
	fn set_main_chain_scripts() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(2_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
