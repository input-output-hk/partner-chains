
//! Autogenerated weights for pallet_block_production_log
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-05-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBookPro.localdomain`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/production/wbuild/partner-chains-demo-runtime/partner_chains_demo_runtime.compact.compressed.wasm
// --pallet
// pallet_block_production_log
// --extrinsic
// *
// --steps=50
// --repeat=20
// --wasm-execution=compiled
// --output
// toolkit/block-production-log/pallet/src/weights.rs
// --template
// .maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_block_production_log.
pub trait WeightInfo {
	fn append() -> Weight;
	fn on_finalize() -> Weight;
}

/// Weights for pallet_block_production_log using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `BlockProductionLog::LatestBlock` (r:1 w:1)
	/// Proof: `BlockProductionLog::LatestBlock` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `BlockProductionLog::CurrentProducer` (r:0 w:1)
	/// Proof: `BlockProductionLog::CurrentProducer` (`max_values`: Some(1), `max_size`: Some(66), added: 561, mode: `MaxEncodedLen`)
	fn append() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `43`
		//  Estimated: `1489`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `BlockProductionLog::CurrentProducer` (r:1 w:1)
	/// Proof: `BlockProductionLog::CurrentProducer` (`max_values`: Some(1), `max_size`: Some(66), added: 561, mode: `MaxEncodedLen`)
	/// Storage: `Aura::CurrentSlot` (r:1 w:0)
	/// Proof: `Aura::CurrentSlot` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `BlockProductionLog::Log` (r:1 w:1)
	/// Proof: `BlockProductionLog::Log` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn on_finalize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2705`
		//  Estimated: `4190`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(13_000_000, 4190)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `BlockProductionLog::LatestBlock` (r:1 w:1)
	/// Proof: `BlockProductionLog::LatestBlock` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `BlockProductionLog::CurrentProducer` (r:0 w:1)
	/// Proof: `BlockProductionLog::CurrentProducer` (`max_values`: Some(1), `max_size`: Some(66), added: 561, mode: `MaxEncodedLen`)
	fn append() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `43`
		//  Estimated: `1489`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `BlockProductionLog::CurrentProducer` (r:1 w:1)
	/// Proof: `BlockProductionLog::CurrentProducer` (`max_values`: Some(1), `max_size`: Some(66), added: 561, mode: `MaxEncodedLen`)
	/// Storage: `Aura::CurrentSlot` (r:1 w:0)
	/// Proof: `Aura::CurrentSlot` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `BlockProductionLog::Log` (r:1 w:1)
	/// Proof: `BlockProductionLog::Log` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn on_finalize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2705`
		//  Estimated: `4190`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(13_000_000, 4190)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
