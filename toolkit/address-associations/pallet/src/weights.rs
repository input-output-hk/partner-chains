
//! Autogenerated weights for pallet_address_associations
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.0.0
//! DATE: 2025-02-11, STEPS: `500`, REPEAT: `200`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Nikolaoss-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/sidechain-runtime/sidechain_runtime.compact.compressed.wasm
// --pallet
// pallet_address_associations
// --extrinsic
// *
// --steps=500
// --repeat=200
// --wasm-execution=compiled
// --output
// toolkit/pallets/address-associations/src/weights.rs
// --template
// .maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_address_associations.
pub trait WeightInfo {
	fn associate_address() -> Weight;
}

/// Weights for pallet_address_associations using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Sidechain::GenesisUtxo` (r:1 w:0)
	/// Proof: `Sidechain::GenesisUtxo` (`max_values`: Some(1), `max_size`: Some(34), added: 529, mode: `MaxEncodedLen`)
	/// Storage: `AddressAssociations::AddressAssociations` (r:1 w:1)
	/// Proof: `AddressAssociations::AddressAssociations` (`max_values`: None, `max_size`: Some(170), added: 2645, mode: `MaxEncodedLen`)
	fn associate_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `3635`
		// Minimum execution time: 45_000_000 picoseconds.
		Weight::from_parts(47_000_000, 3635)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Sidechain::GenesisUtxo` (r:1 w:0)
	/// Proof: `Sidechain::GenesisUtxo` (`max_values`: Some(1), `max_size`: Some(34), added: 529, mode: `MaxEncodedLen`)
	/// Storage: `AddressAssociations::AddressAssociations` (r:1 w:1)
	/// Proof: `AddressAssociations::AddressAssociations` (`max_values`: None, `max_size`: Some(170), added: 2645, mode: `MaxEncodedLen`)
	fn associate_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `3635`
		// Minimum execution time: 45_000_000 picoseconds.
		Weight::from_parts(47_000_000, 3635)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
