
# This file was @generated by crate2nix 0.14.1 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrateForPkgs ? pkgs: pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Elements to add to the `-C target-feature=` argument passed to `rustc`
  # (separated by `,`, prefixed with `+`).
  # Used for conditional compilation based on CPU feature detection.
, targetFeatures ? []
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #


  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "authority-selection-inherents" = rec {
      packageId = "authority-selection-inherents";
      build = internal.buildRustCrateWithFeatures {
        packageId = "authority-selection-inherents";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "byte-string-derive" = rec {
      packageId = "byte-string-derive";
      build = internal.buildRustCrateWithFeatures {
        packageId = "byte-string-derive";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "cli-commands" = rec {
      packageId = "cli-commands";
      build = internal.buildRustCrateWithFeatures {
        packageId = "cli-commands";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "db-sync-sqlx" = rec {
      packageId = "db-sync-sqlx";
      build = internal.buildRustCrateWithFeatures {
        packageId = "db-sync-sqlx";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "ogmios-client" = rec {
      packageId = "ogmios-client";
      build = internal.buildRustCrateWithFeatures {
        packageId = "ogmios-client";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "pallet-address-associations" = rec {
      packageId = "pallet-address-associations";
      build = internal.buildRustCrateWithFeatures {
        packageId = "pallet-address-associations";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "pallet-block-participation" = rec {
      packageId = "pallet-block-participation";
      build = internal.buildRustCrateWithFeatures {
        packageId = "pallet-block-participation";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "pallet-block-producer-fees" = rec {
      packageId = "pallet-block-producer-fees";
      build = internal.buildRustCrateWithFeatures {
        packageId = "pallet-block-producer-fees";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "pallet-block-producer-fees-rpc" = rec {
      packageId = "pallet-block-producer-fees-rpc";
      build = internal.buildRustCrateWithFeatures {
        packageId = "pallet-block-producer-fees-rpc";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "pallet-block-producer-metadata" = rec {
      packageId = "pallet-block-producer-metadata";
      build = internal.buildRustCrateWithFeatures {
        packageId = "pallet-block-producer-metadata";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "pallet-block-producer-metadata-rpc" = rec {
      packageId = "pallet-block-producer-metadata-rpc";
      build = internal.buildRustCrateWithFeatures {
        packageId = "pallet-block-producer-metadata-rpc";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "pallet-block-production-log" = rec {
      packageId = "pallet-block-production-log";
      build = internal.buildRustCrateWithFeatures {
        packageId = "pallet-block-production-log";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "pallet-governed-map" = rec {
      packageId = "pallet-governed-map";
      build = internal.buildRustCrateWithFeatures {
        packageId = "pallet-governed-map";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "pallet-native-token-management" = rec {
      packageId = "pallet-native-token-management";
      build = internal.buildRustCrateWithFeatures {
        packageId = "pallet-native-token-management";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "pallet-partner-chains-session" = rec {
      packageId = "pallet-partner-chains-session";
      build = internal.buildRustCrateWithFeatures {
        packageId = "pallet-partner-chains-session";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "pallet-session-validator-management" = rec {
      packageId = "pallet-session-validator-management";
      build = internal.buildRustCrateWithFeatures {
        packageId = "pallet-session-validator-management";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "pallet-session-validator-management-benchmarking" = rec {
      packageId = "pallet-session-validator-management-benchmarking";
      build = internal.buildRustCrateWithFeatures {
        packageId = "pallet-session-validator-management-benchmarking";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "pallet-session-validator-management-rpc" = rec {
      packageId = "pallet-session-validator-management-rpc";
      build = internal.buildRustCrateWithFeatures {
        packageId = "pallet-session-validator-management-rpc";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "pallet-sidechain" = rec {
      packageId = "pallet-sidechain";
      build = internal.buildRustCrateWithFeatures {
        packageId = "pallet-sidechain";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "pallet-sidechain-rpc" = rec {
      packageId = "pallet-sidechain-rpc";
      build = internal.buildRustCrateWithFeatures {
        packageId = "pallet-sidechain-rpc";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "partner-chains-cardano-offchain" = rec {
      packageId = "partner-chains-cardano-offchain";
      build = internal.buildRustCrateWithFeatures {
        packageId = "partner-chains-cardano-offchain";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "partner-chains-cli" = rec {
      packageId = "partner-chains-cli";
      build = internal.buildRustCrateWithFeatures {
        packageId = "partner-chains-cli";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "partner-chains-data-sources-cli" = rec {
      packageId = "partner-chains-data-sources-cli";
      build = internal.buildRustCrateWithFeatures {
        packageId = "partner-chains-data-sources-cli";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "partner-chains-db-sync-data-sources" = rec {
      packageId = "partner-chains-db-sync-data-sources";
      build = internal.buildRustCrateWithFeatures {
        packageId = "partner-chains-db-sync-data-sources";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "partner-chains-demo-node" = rec {
      packageId = "partner-chains-demo-node";
      build = internal.buildRustCrateWithFeatures {
        packageId = "partner-chains-demo-node";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "partner-chains-demo-runtime" = rec {
      packageId = "partner-chains-demo-runtime";
      build = internal.buildRustCrateWithFeatures {
        packageId = "partner-chains-demo-runtime";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "partner-chains-mock-data-sources" = rec {
      packageId = "partner-chains-mock-data-sources";
      build = internal.buildRustCrateWithFeatures {
        packageId = "partner-chains-mock-data-sources";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "partner-chains-node-commands" = rec {
      packageId = "partner-chains-node-commands";
      build = internal.buildRustCrateWithFeatures {
        packageId = "partner-chains-node-commands";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "partner-chains-plutus-data" = rec {
      packageId = "partner-chains-plutus-data";
      build = internal.buildRustCrateWithFeatures {
        packageId = "partner-chains-plutus-data";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "partner-chains-smart-contracts-commands" = rec {
      packageId = "partner-chains-smart-contracts-commands";
      build = internal.buildRustCrateWithFeatures {
        packageId = "partner-chains-smart-contracts-commands";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "plutus" = rec {
      packageId = "plutus";
      build = internal.buildRustCrateWithFeatures {
        packageId = "plutus";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "plutus-datum-derive" = rec {
      packageId = "plutus-datum-derive";
      build = internal.buildRustCrateWithFeatures {
        packageId = "plutus-datum-derive";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sc-partner-chains-consensus-aura" = rec {
      packageId = "sc-partner-chains-consensus-aura";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sc-partner-chains-consensus-aura";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "selection" = rec {
      packageId = "selection";
      build = internal.buildRustCrateWithFeatures {
        packageId = "selection";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sidechain-block-search" = rec {
      packageId = "sidechain-block-search";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sidechain-block-search";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sidechain-domain" = rec {
      packageId = "sidechain-domain";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sidechain-domain";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sidechain-mc-hash" = rec {
      packageId = "sidechain-mc-hash";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sidechain-mc-hash";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sidechain-slots" = rec {
      packageId = "sidechain-slots";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sidechain-slots";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sp-block-participation" = rec {
      packageId = "sp-block-participation";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sp-block-participation";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sp-block-producer-fees" = rec {
      packageId = "sp-block-producer-fees";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sp-block-producer-fees";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sp-block-producer-metadata" = rec {
      packageId = "sp-block-producer-metadata";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sp-block-producer-metadata";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sp-block-production-log" = rec {
      packageId = "sp-block-production-log";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sp-block-production-log";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sp-governed-map" = rec {
      packageId = "sp-governed-map";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sp-governed-map";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sp-native-token-management" = rec {
      packageId = "sp-native-token-management";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sp-native-token-management";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sp-partner-chains-consensus-aura" = rec {
      packageId = "sp-partner-chains-consensus-aura";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sp-partner-chains-consensus-aura";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sp-session-validator-management" = rec {
      packageId = "sp-session-validator-management";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sp-session-validator-management";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sp-session-validator-management-query" = rec {
      packageId = "sp-session-validator-management-query";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sp-session-validator-management-query";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "sp-sidechain" = rec {
      packageId = "sp-sidechain";
      build = internal.buildRustCrateWithFeatures {
        packageId = "sp-sidechain";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "time-source" = rec {
      packageId = "time-source";
      build = internal.buildRustCrateWithFeatures {
        packageId = "time-source";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
      name = "all-workspace-members";
      paths =
        let members = builtins.attrValues workspaceMembers;
        in builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "Inflector" = rec {
        crateName = "Inflector";
        version = "0.11.4";
        edition = "2015";
        sha256 = "1lqmcni21ifzyq41fhz6k1j2b23cmsx469s4g4sf01l78miqqhzy";
        libName = "inflector";
        authors = [
          "Josh Teeter<joshteeter@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
          }
        ];
        features = {
          "default" = [ "heavyweight" ];
          "heavyweight" = [ "regex" "lazy_static" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "regex" = [ "dep:regex" ];
        };
        resolvedDefaultFeatures = [ "default" "heavyweight" "lazy_static" "regex" ];
      };
      "addr2line 0.19.0" = rec {
        crateName = "addr2line";
        version = "0.19.0";
        edition = "2015";
        sha256 = "15ywmr5wx22q69ffnn79qp65ir5p1x0k2q06plcpv6v74c5xcvx7";
        dependencies = [
          {
            name = "gimli";
            packageId = "gimli 0.27.3";
            usesDefaultFeatures = false;
            features = [ "read" ];
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [ "rustc-demangle" "cpp_demangle" "std-object" "fallible-iterator" "smallvec" ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "object" = [ "dep:object" ];
          "rustc-demangle" = [ "dep:rustc-demangle" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "gimli/rustc-dep-of-std" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "gimli/std" ];
          "std-object" = [ "std" "object" "object/std" "object/compression" "gimli/endian-reader" ];
        };
      };
      "addr2line 0.24.2" = rec {
        crateName = "addr2line";
        version = "0.24.2";
        edition = "2018";
        crateBin = [];
        sha256 = "1hd1i57zxgz08j6h5qrhsnm2fi0bcqvsh389fw400xm3arz2ggnz";
        dependencies = [
          {
            name = "gimli";
            packageId = "gimli 0.31.1";
            usesDefaultFeatures = false;
            features = [ "read" ];
          }
        ];
        features = {
          "all" = [ "bin" ];
          "alloc" = [ "dep:alloc" ];
          "bin" = [ "loader" "rustc-demangle" "cpp_demangle" "fallible-iterator" "smallvec" "dep:clap" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [ "rustc-demangle" "cpp_demangle" "loader" "fallible-iterator" "smallvec" ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "loader" = [ "std" "dep:object" "dep:memmap2" "dep:typed-arena" ];
          "rustc-demangle" = [ "dep:rustc-demangle" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "gimli/rustc-dep-of-std" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "gimli/std" ];
        };
      };
      "adler2" = rec {
        crateName = "adler2";
        version = "2.0.0";
        edition = "2021";
        sha256 = "09r6drylvgy8vv8k20lnbvwq8gp09h7smfn6h1rxsy15pgh629si";
        authors = [
          "Jonas Schievink <jonasschievink@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "aead" = rec {
        crateName = "aead";
        version = "0.5.2";
        edition = "2021";
        sha256 = "1c32aviraqag7926xcb9sybdm36v5vh9gnxpn4pxdwjc50zl28ni";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arrayvec" = [ "dep:arrayvec" ];
          "blobby" = [ "dep:blobby" ];
          "bytes" = [ "dep:bytes" ];
          "default" = [ "rand_core" ];
          "dev" = [ "blobby" ];
          "getrandom" = [ "crypto-common/getrandom" "rand_core" ];
          "heapless" = [ "dep:heapless" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [ "alloc" "crypto-common/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "rand_core" "std" ];
      };
      "aes" = rec {
        crateName = "aes";
        version = "0.8.4";
        edition = "2021";
        sha256 = "1853796anlwp4kqim0s6wm1srl4ib621nm0cl2h3c8klsjkgfsdi";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cipher";
            packageId = "cipher 0.4.4";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher 0.4.4";
            features = [ "dev" ];
          }
        ];
        features = {
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "aes-gcm" = rec {
        crateName = "aes-gcm";
        version = "0.10.3";
        edition = "2021";
        sha256 = "1lgaqgg1gh9crg435509lqdhajg1m2vgma6f7fdj1qa2yyh10443";
        libName = "aes_gcm";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "aead";
            packageId = "aead";
            usesDefaultFeatures = false;
          }
          {
            name = "aes";
            packageId = "aes";
            optional = true;
          }
          {
            name = "cipher";
            packageId = "cipher 0.4.4";
          }
          {
            name = "ctr";
            packageId = "ctr";
          }
          {
            name = "ghash";
            packageId = "ghash";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle 2.6.1";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "aead";
            packageId = "aead";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
        ];
        features = {
          "aes" = [ "dep:aes" ];
          "alloc" = [ "aead/alloc" ];
          "arrayvec" = [ "aead/arrayvec" ];
          "default" = [ "aes" "alloc" "getrandom" ];
          "getrandom" = [ "aead/getrandom" "rand_core" ];
          "heapless" = [ "aead/heapless" ];
          "rand_core" = [ "aead/rand_core" ];
          "std" = [ "aead/std" "alloc" ];
          "stream" = [ "aead/stream" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "aes" "alloc" "default" "getrandom" "rand_core" "std" ];
      };
      "ahash" = rec {
        crateName = "ahash";
        version = "0.8.12";
        edition = "2018";
        sha256 = "0xbsp9rlm5ki017c0w6ay8kjwinwm8knjncci95mii30rmwz25as";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            target = { target, features }: (!(("arm" == target."arch" or null) && ("none" == target."os" or null)));
            features = [ "alloc" ];
          }
          {
            name = "zerocopy";
            packageId = "zerocopy";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "atomic-polyfill" = [ "dep:portable-atomic" "once_cell/critical-section" ];
          "compile-time-rng" = [ "const-random" ];
          "const-random" = [ "dep:const-random" ];
          "default" = [ "std" "runtime-rng" ];
          "getrandom" = [ "dep:getrandom" ];
          "runtime-rng" = [ "getrandom" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "getrandom" "runtime-rng" "std" ];
      };
      "aho-corasick" = rec {
        crateName = "aho-corasick";
        version = "1.1.3";
        edition = "2021";
        sha256 = "05mrpkvdgp5d20y2p989f187ry9diliijgwrs254fs9s1m1x6q4f";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "perf-literal" ];
          "logging" = [ "dep:log" ];
          "perf-literal" = [ "dep:memchr" ];
          "std" = [ "memchr?/std" ];
        };
        resolvedDefaultFeatures = [ "perf-literal" "std" ];
      };
      "allocator-api2" = rec {
        crateName = "allocator-api2";
        version = "0.2.21";
        edition = "2018";
        sha256 = "08zrzs022xwndihvzdn78yqarv2b9696y67i6h78nla3ww87jgb8";
        libName = "allocator_api2";
        authors = [
          "Zakarum <zaq.dev@icloud.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "android-tzdata" = rec {
        crateName = "android-tzdata";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1w7ynjxrfs97xg3qlcdns4kgfpwcdv824g611fq32cag4cdr96g9";
        libName = "android_tzdata";
        authors = [
          "RumovZ"
        ];

      };
      "android_system_properties" = rec {
        crateName = "android_system_properties";
        version = "0.1.5";
        edition = "2018";
        sha256 = "04b3wrz12837j7mdczqd95b732gw5q7q66cv4yn4646lvccp57l1";
        authors = [
          "Nicolas Silva <nical@fastmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "anstream" = rec {
        crateName = "anstream";
        version = "0.6.18";
        edition = "2021";
        sha256 = "16sjk4x3ns2c3ya1x28a44kh6p47c7vhk27251i015hik1lm7k4a";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "anstyle-parse";
            packageId = "anstyle-parse";
          }
          {
            name = "anstyle-query";
            packageId = "anstyle-query";
            optional = true;
          }
          {
            name = "anstyle-wincon";
            packageId = "anstyle-wincon";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "colorchoice";
            packageId = "colorchoice";
          }
          {
            name = "is_terminal_polyfill";
            packageId = "is_terminal_polyfill";
          }
          {
            name = "utf8parse";
            packageId = "utf8parse";
          }
        ];
        features = {
          "auto" = [ "dep:anstyle-query" ];
          "default" = [ "auto" "wincon" ];
          "wincon" = [ "dep:anstyle-wincon" ];
        };
        resolvedDefaultFeatures = [ "auto" "default" "wincon" ];
      };
      "anstyle" = rec {
        crateName = "anstyle";
        version = "1.0.10";
        edition = "2021";
        sha256 = "1yai2vppmd7zlvlrp9grwll60knrmscalf8l2qpfz8b7y5lkpk2m";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "anstyle-parse" = rec {
        crateName = "anstyle-parse";
        version = "0.2.6";
        edition = "2021";
        sha256 = "1acqayy22fwzsrvr6n0lz6a4zvjjcvgr5sm941m7m0b2fr81cb9v";
        libName = "anstyle_parse";
        dependencies = [
          {
            name = "utf8parse";
            packageId = "utf8parse";
            optional = true;
          }
        ];
        features = {
          "core" = [ "dep:arrayvec" ];
          "default" = [ "utf8" ];
          "utf8" = [ "dep:utf8parse" ];
        };
        resolvedDefaultFeatures = [ "default" "utf8" ];
      };
      "anstyle-query" = rec {
        crateName = "anstyle-query";
        version = "1.1.2";
        edition = "2021";
        sha256 = "036nm3lkyk43xbps1yql3583fp4hg3b1600is7mcyxs1gzrpm53r";
        libName = "anstyle_query";
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Console" "Win32_Foundation" ];
          }
        ];

      };
      "anstyle-wincon" = rec {
        crateName = "anstyle-wincon";
        version = "3.0.7";
        edition = "2021";
        sha256 = "0kmf0fq4c8yribdpdpylzz1zccpy84hizmcsac3wrac1f7kk8dfa";
        libName = "anstyle_wincon";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Console" "Win32_Foundation" ];
          }
        ];

      };
      "anyhow" = rec {
        crateName = "anyhow";
        version = "1.0.98";
        edition = "2018";
        sha256 = "11ylvjdrcjs0q9jgk1af4r5cx1qppj63plxqkq595vmc24rjsvg1";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "approx" = rec {
        crateName = "approx";
        version = "0.5.1";
        edition = "2015";
        sha256 = "1ilpv3dgd58rasslss0labarq7jawxmivk17wsh8wmkdm3q15cfa";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "num-complex" = [ "dep:num-complex" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "aquamarine" = rec {
        crateName = "aquamarine";
        version = "0.5.0";
        edition = "2018";
        sha256 = "0kizryj8h9zgwrb0q5q5f1c6bg56gnbg19wan5g06icj6141bk11";
        procMacro = true;
        authors = [
          "Mike Lubinets <git@mkl.dev>"
          "Frank Rehberger <frehberg@gmail.com>"
        ];
        dependencies = [
          {
            name = "include_dir";
            packageId = "include_dir";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "proc-macro-error";
            packageId = "proc-macro-error";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "arc-swap" = rec {
        crateName = "arc-swap";
        version = "1.7.1";
        edition = "2018";
        sha256 = "0mrl9a9r9p9bln74q6aszvf22q1ijiw089jkrmabfqkbj31zixv9";
        libName = "arc_swap";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "ark-bls12-377" = rec {
        crateName = "ark-bls12-377";
        version = "0.4.0";
        edition = "2021";
        sha256 = "0kqavkzp6fmfxf67599r1a7ydi4rb3jhvg96s0xwwlagm0xjj07v";
        libName = "ark_bls12_377";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ec";
            packageId = "ark-ec 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-ff";
            packageId = "ark-ff 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.4.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ark-r1cs-std" = [ "dep:ark-r1cs-std" ];
          "curve" = [ "scalar_field" "base_field" ];
          "default" = [ "curve" ];
          "r1cs" = [ "base_field" "ark-r1cs-std" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-ec/std" ];
        };
        resolvedDefaultFeatures = [ "base_field" "curve" "scalar_field" ];
      };
      "ark-bls12-381 0.4.0" = rec {
        crateName = "ark-bls12-381";
        version = "0.4.0";
        edition = "2021";
        sha256 = "127lmg29wz42jcvsb2ls8k3q21x5nrxm9syawjmagjv9478z0xf7";
        libName = "ark_bls12_381";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ec";
            packageId = "ark-ec 0.4.2";
          }
          {
            name = "ark-ff";
            packageId = "ark-ff 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.4.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "curve" = [ "scalar_field" ];
          "default" = [ "curve" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-ec/std" ];
        };
        resolvedDefaultFeatures = [ "curve" "scalar_field" ];
      };
      "ark-bls12-381 0.5.0" = rec {
        crateName = "ark-bls12-381";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1mdqcc9zfnj9wzfygbis6lw2gw634dgq7nmhhv6ng67q3z0drx1x";
        libName = "ark_bls12_381";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ec";
            packageId = "ark-ec 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-ff";
            packageId = "ark-ff 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.5.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "curve" = [ "scalar_field" ];
          "default" = [ "curve" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-ec/std" ];
        };
        resolvedDefaultFeatures = [ "curve" "scalar_field" ];
      };
      "ark-ec 0.4.2" = rec {
        crateName = "ark-ec";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1fkh0rswp4d5rn4hmmbibz2wh6x6k3sp21faijb29b2nkm1rmzfy";
        libName = "ark_ec";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ff";
            packageId = "ark-ff 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-poly";
            packageId = "ark-poly 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.4.0";
            usesDefaultFeatures = false;
          }
          {
            name = "derivative";
            packageId = "derivative";
            features = [ "use_core" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.13.2";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        features = {
          "parallel" = [ "std" "rayon" "ark-std/parallel" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-serialize/std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "ark-ec 0.5.0" = rec {
        crateName = "ark-ec";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1klgh7ns6g4f393hriqcny9bhcfiqjkmbrrq29n88qk1a4nqzmj3";
        libName = "ark_ec";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            usesDefaultFeatures = false;
            target = { target, features }: (("8" == target."has_atomic" or null) && ("16" == target."has_atomic" or null) && ("32" == target."has_atomic" or null) && ("64" == target."has_atomic" or null) && ("ptr" == target."has_atomic" or null));
          }
          {
            name = "ark-ff";
            packageId = "ark-ff 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-poly";
            packageId = "ark-poly 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "educe";
            packageId = "educe";
          }
          {
            name = "fnv";
            packageId = "fnv";
            usesDefaultFeatures = false;
            target = { target, features }: (!(("8" == target."has_atomic" or null) && ("16" == target."has_atomic" or null) && ("32" == target."has_atomic" or null) && ("64" == target."has_atomic" or null) && ("ptr" == target."has_atomic" or null)));
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.3";
            usesDefaultFeatures = false;
            features = [ "inline-more" "allocator-api2" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        features = {
          "parallel" = [ "std" "rayon" "ark-std/parallel" "ark-serialize/parallel" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-serialize/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "ark-ed-on-bls12-381-bandersnatch" = rec {
        crateName = "ark-ed-on-bls12-381-bandersnatch";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1x9dy3cc2sibsm6cb0crp4d2m5gnhaidbmb2imy0yvrghgiv51hp";
        libName = "ark_ed_on_bls12_381_bandersnatch";
        authors = [
          "zhenfei zhang"
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-bls12-381";
            packageId = "ark-bls12-381 0.5.0";
            usesDefaultFeatures = false;
            features = [ "scalar_field" ];
          }
          {
            name = "ark-ec";
            packageId = "ark-ec 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-ff";
            packageId = "ark-ff 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.5.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ark-r1cs-std" = [ "dep:ark-r1cs-std" ];
          "r1cs" = [ "ark-r1cs-std" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-ec/std" "ark-bls12-381/std" ];
        };
      };
      "ark-ff 0.4.2" = rec {
        crateName = "ark-ff";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1fk6546nddgs3lsnv1s06fh8mnik5h1ijmck928d4jpla3w7m17c";
        libName = "ark_ff";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ff-asm";
            packageId = "ark-ff-asm 0.4.2";
          }
          {
            name = "ark-ff-macros";
            packageId = "ark-ff-macros 0.4.2";
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.4.0";
            usesDefaultFeatures = false;
          }
          {
            name = "derivative";
            packageId = "derivative";
            features = [ "use_core" ];
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "parallel" = [ "std" "rayon" "ark-std/parallel" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-serialize/std" "itertools/use_std" ];
        };
      };
      "ark-ff 0.5.0" = rec {
        crateName = "ark-ff";
        version = "0.5.0";
        edition = "2021";
        sha256 = "0w7aawjjs8d1b11c215b5s6asvdlx410avczm9ibn3qyxnhanxx1";
        libName = "ark_ff";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ff-asm";
            packageId = "ark-ff-asm 0.5.0";
          }
          {
            name = "ark-ff-macros";
            packageId = "ark-ff-macros 0.5.0";
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "arrayvec";
            packageId = "arrayvec 0.7.6";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "educe";
            packageId = "educe";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        features = {
          "parallel" = [ "std" "rayon" "ark-std/parallel" "ark-serialize/parallel" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-serialize/std" "itertools/use_std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "ark-ff-asm 0.4.2" = rec {
        crateName = "ark-ff-asm";
        version = "0.4.2";
        edition = "2021";
        sha256 = "0j13p6ymma3ypbjipfkc937pn57as8qpwgrpg5nvrl2mw97smm1y";
        procMacro = true;
        libName = "ark_ff_asm";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "parsing" "extra-traits" ];
          }
        ];

      };
      "ark-ff-asm 0.5.0" = rec {
        crateName = "ark-ff-asm";
        version = "0.5.0";
        edition = "2021";
        sha256 = "0q3bg9nak0nv7a2mzyb95r8b5xg0y24s82j0zqqjmq3dgqpmm532";
        procMacro = true;
        libName = "ark_ff_asm";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "parsing" "extra-traits" ];
          }
        ];

      };
      "ark-ff-macros 0.4.2" = rec {
        crateName = "ark-ff-macros";
        version = "0.4.2";
        edition = "2021";
        sha256 = "0ra5a4paqbqqlc9a3cnwkwxh7l1411wsnna1az28k218wjq7kgks";
        procMacro = true;
        libName = "ark_ff_macros";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "parsing" "extra-traits" ];
          }
        ];

      };
      "ark-ff-macros 0.5.0" = rec {
        crateName = "ark-ff-macros";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1cy40yp7hkr3y443cmkrnx9mdkdc875058pa7ilzfczf6c3i5gh9";
        procMacro = true;
        libName = "ark_ff_macros";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "parsing" "extra-traits" ];
          }
        ];

      };
      "ark-poly 0.4.2" = rec {
        crateName = "ark-poly";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1gw6zrbl1rx1jwcnwwaq2p727fda66yaipxsrjcxi1g19v2by86k";
        libName = "ark_poly";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ff";
            packageId = "ark-ff 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.4.2";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.4.0";
            usesDefaultFeatures = false;
          }
          {
            name = "derivative";
            packageId = "derivative";
            usesDefaultFeatures = false;
            features = [ "use_core" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.13.2";
          }
        ];
        features = {
          "parallel" = [ "std" "ark-ff/parallel" "rayon" "ark-std/parallel" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-ff/std" ];
        };
      };
      "ark-poly 0.5.0" = rec {
        crateName = "ark-poly";
        version = "0.5.0";
        edition = "2021";
        sha256 = "09zy0dvin1g5jdvab54j5wg37d371vjpj5ndi4mz01x2kn1hb4sp";
        libName = "ark_poly";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            usesDefaultFeatures = false;
            target = { target, features }: (("8" == target."has_atomic" or null) && ("16" == target."has_atomic" or null) && ("32" == target."has_atomic" or null) && ("64" == target."has_atomic" or null) && ("ptr" == target."has_atomic" or null));
          }
          {
            name = "ark-ff";
            packageId = "ark-ff 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.5.0";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "educe";
            packageId = "educe";
          }
          {
            name = "fnv";
            packageId = "fnv";
            usesDefaultFeatures = false;
            target = { target, features }: (!(("8" == target."has_atomic" or null) && ("16" == target."has_atomic" or null) && ("32" == target."has_atomic" or null) && ("64" == target."has_atomic" or null) && ("ptr" == target."has_atomic" or null)));
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.3";
            usesDefaultFeatures = false;
            features = [ "inline-more" "allocator-api2" ];
          }
        ];
        features = {
          "parallel" = [ "std" "ark-ff/parallel" "rayon" "ark-std/parallel" "ark-serialize/parallel" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-serialize/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "ark-serialize 0.4.2" = rec {
        crateName = "ark-serialize";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1992x2cd05pw3v5hfqnb8114g2cwdk3cmmcvz0i2ygdq09dbidxd";
        libName = "ark_serialize";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-serialize-derive";
            packageId = "ark-serialize-derive 0.4.2";
            optional = true;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.4.0";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ark-serialize-derive" = [ "dep:ark-serialize-derive" ];
          "derive" = [ "ark-serialize-derive" ];
          "std" = [ "ark-std/std" ];
        };
        resolvedDefaultFeatures = [ "ark-serialize-derive" "derive" ];
      };
      "ark-serialize 0.5.0" = rec {
        crateName = "ark-serialize";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1xw860hc2m6a8q0kd3mc634hy3h3z14cfaxmvzbvqzhhmy50ck9z";
        libName = "ark_serialize";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-serialize-derive";
            packageId = "ark-serialize-derive 0.5.0";
            optional = true;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "arrayvec";
            packageId = "arrayvec 0.7.6";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ark-serialize-derive" = [ "dep:ark-serialize-derive" ];
          "derive" = [ "ark-serialize-derive" ];
          "parallel" = [ "rayon" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" ];
        };
        resolvedDefaultFeatures = [ "ark-serialize-derive" "derive" "std" ];
      };
      "ark-serialize-derive 0.4.2" = rec {
        crateName = "ark-serialize-derive";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1sl2yrpk88v4lfgkblwgd2yqa89hw48jbd9jmx4ybmqgdny82cmf";
        procMacro = true;
        libName = "ark_serialize_derive";
        authors = [
          "arkworks Contributors"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "ark-serialize-derive 0.5.0" = rec {
        crateName = "ark-serialize-derive";
        version = "0.5.0";
        edition = "2021";
        sha256 = "17dn3c1pgzdsjpvcv315by403jjvq15fb23y4l6wmp7xc3v8hf11";
        procMacro = true;
        libName = "ark_serialize_derive";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "ark-std 0.4.0" = rec {
        crateName = "ark-std";
        version = "0.4.0";
        edition = "2021";
        sha256 = "11aigd20y0x9l3mw1bxsrgklzbscn86lrp78mmjbgskf1hg3z2cl";
        libName = "ark_std";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "std_rng" ];
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "std" ];
          }
        ];
        features = {
          "colored" = [ "dep:colored" ];
          "default" = [ "std" ];
          "getrandom" = [ "rand/std" ];
          "parallel" = [ "rayon" "std" ];
          "print-trace" = [ "std" "colored" ];
          "rayon" = [ "dep:rayon" ];
        };
      };
      "ark-std 0.5.0" = rec {
        crateName = "ark-std";
        version = "0.5.0";
        edition = "2021";
        sha256 = "16j4d5p8901bwhicqz2xy7zn2xyn347sy6a6ybj9w7hkqrf24si4";
        libName = "ark_std";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "std_rng" ];
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "std" ];
          }
        ];
        features = {
          "colored" = [ "dep:colored" ];
          "default" = [ "std" ];
          "getrandom" = [ "rand/std" ];
          "parallel" = [ "rayon" "std" ];
          "print-trace" = [ "std" "colored" ];
          "rayon" = [ "dep:rayon" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "ark-transcript" = rec {
        crateName = "ark-transcript";
        version = "0.0.3";
        edition = "2021";
        sha256 = "17qkm49xhk20qaayx7h9ygzr9159sd8pdjsxrcjgzn5rxllckha7";
        libName = "ark_transcript";
        authors = [
          "Jeff Burdges <jeff@web3.foundation>"
        ];
        dependencies = [
          {
            name = "ark-ff";
            packageId = "ark-ff 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "sha3";
            packageId = "sha3";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug-transcript" = [ "std" ];
        };
      };
      "ark-vrf" = rec {
        crateName = "ark-vrf";
        version = "0.1.0";
        edition = "2021";
        sha256 = "0vgymlcz6s6h9npmaq8ijj5j6z94bbypmyrlp47gwalvaqcdl0cm";
        libName = "ark_vrf";
        authors = [
          "Davide Galassi <davxy@datawok.net>"
        ];
        dependencies = [
          {
            name = "ark-bls12-381";
            packageId = "ark-bls12-381 0.5.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ark-ec";
            packageId = "ark-ec 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-ed-on-bls12-381-bandersnatch";
            packageId = "ark-ed-on-bls12-381-bandersnatch";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ark-ff";
            packageId = "ark-ff 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.3.1";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            usesDefaultFeatures = false;
          }
          {
            name = "w3f-ring-proof";
            packageId = "w3f-ring-proof";
            rename = "ring-proof";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "ark-std";
            packageId = "ark-std 0.5.0";
            usesDefaultFeatures = false;
            features = [ "getrandom" ];
          }
        ];
        features = {
          "ark-bls12-381" = [ "dep:ark-bls12-381" ];
          "ark-bn254" = [ "dep:ark-bn254" ];
          "ark-ed-on-bls12-381" = [ "dep:ark-ed-on-bls12-381" ];
          "ark-ed-on-bls12-381-bandersnatch" = [ "dep:ark-ed-on-bls12-381-bandersnatch" ];
          "ark-ed-on-bn254" = [ "dep:ark-ed-on-bn254" ];
          "ark-ed25519" = [ "dep:ark-ed25519" ];
          "ark-secp256r1" = [ "dep:ark-secp256r1" ];
          "asm" = [ "ark-ff/asm" "ring-proof?/asm" ];
          "baby-jubjub" = [ "ark-ed-on-bn254" "ark-bn254/curve" ];
          "bandersnatch" = [ "ark-ed-on-bls12-381-bandersnatch" "ark-bls12-381/curve" ];
          "default" = [ "std" ];
          "ed25519" = [ "ark-ed25519" ];
          "full" = [ "secp256r1" "ed25519" "bandersnatch" "jubjub" "baby-jubjub" "ring" ];
          "hmac" = [ "dep:hmac" ];
          "jubjub" = [ "ark-ed-on-bls12-381" "ark-bls12-381/curve" ];
          "parallel" = [ "ark-ec/parallel" "ark-ff/parallel" "ark-std/parallel" "ring-proof?/parallel" "rayon" ];
          "rayon" = [ "dep:rayon" ];
          "rfc-6979" = [ "hmac" ];
          "ring" = [ "ring-proof" ];
          "ring-proof" = [ "dep:ring-proof" ];
          "secp256r1" = [ "ark-secp256r1" "rfc-6979" ];
          "secret-split" = [ "ark-std/getrandom" ];
          "std" = [ "ark-std/std" "ark-ec/std" "ring-proof?/std" ];
          "test-vectors" = [ "ring-proof?/test-vectors" ];
        };
        resolvedDefaultFeatures = [ "ark-bls12-381" "ark-ed-on-bls12-381-bandersnatch" "bandersnatch" "ring" "ring-proof" "std" ];
      };
      "array-bytes" = rec {
        crateName = "array-bytes";
        version = "6.2.3";
        edition = "2021";
        sha256 = "14w23czh8s1b5ic1vfczymf674jn1jwxkcmv0blijhfk3c3dwpax";
        libName = "array_bytes";
        authors = [
          "Xavier Lau <xavier@inv.cafe>"
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "arrayref" = rec {
        crateName = "arrayref";
        version = "0.3.9";
        edition = "2015";
        sha256 = "1jzyp0nvp10dmahaq9a2rnxqdd5wxgbvp8xaibps3zai8c9fi8kn";
        authors = [
          "David Roundy <roundyd@physics.oregonstate.edu>"
        ];

      };
      "arrayvec 0.5.2" = rec {
        crateName = "arrayvec";
        version = "0.5.2";
        edition = "2018";
        sha256 = "12q6hn01x5435bprwlb7w9m7817dyfq55yrl4psygr78bp32zdi3";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "arrayvec 0.7.6" = rec {
        crateName = "arrayvec";
        version = "0.7.6";
        edition = "2018";
        sha256 = "0l1fz4ccgv6pm609rif37sl5nv5k6lbzi7kkppgzqzh1vwix20kw";
        authors = [
          "bluss"
        ];
        features = {
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "asn1-rs 0.6.2" = rec {
        crateName = "asn1-rs";
        version = "0.6.2";
        edition = "2018";
        sha256 = "0j5h437ycgih5hnrma6kmaxi4zb8csynnd66h9rzvxxcvfzc74sl";
        libName = "asn1_rs";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "asn1-rs-derive";
            packageId = "asn1-rs-derive 0.5.1";
          }
          {
            name = "asn1-rs-impl";
            packageId = "asn1-rs-impl";
          }
          {
            name = "displaydoc";
            packageId = "displaydoc";
          }
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "rusticata-macros";
            packageId = "rusticata-macros";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "time";
            packageId = "time";
            optional = true;
            features = [ "macros" "parsing" "formatting" ];
          }
        ];
        features = {
          "bigint" = [ "num-bigint" ];
          "bits" = [ "bitvec" ];
          "bitvec" = [ "dep:bitvec" ];
          "colored" = [ "dep:colored" ];
          "cookie-factory" = [ "dep:cookie-factory" ];
          "datetime" = [ "time" ];
          "debug" = [ "colored" ];
          "default" = [ "std" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "serialize" = [ "cookie-factory" ];
          "time" = [ "dep:time" ];
          "trace" = [ "debug" ];
        };
        resolvedDefaultFeatures = [ "datetime" "default" "std" "time" ];
      };
      "asn1-rs 0.7.1" = rec {
        crateName = "asn1-rs";
        version = "0.7.1";
        edition = "2018";
        sha256 = "0q0ydbjh2cawwic3r9rfk6lyas2qnj6f2aiic5nw5f1bi2b4lqjn";
        libName = "asn1_rs";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "asn1-rs-derive";
            packageId = "asn1-rs-derive 0.6.0";
          }
          {
            name = "asn1-rs-impl";
            packageId = "asn1-rs-impl";
          }
          {
            name = "displaydoc";
            packageId = "displaydoc";
          }
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "rusticata-macros";
            packageId = "rusticata-macros";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "time";
            packageId = "time";
            optional = true;
            features = [ "macros" "parsing" "formatting" ];
          }
        ];
        features = {
          "bigint" = [ "num-bigint" ];
          "bits" = [ "bitvec" ];
          "bitvec" = [ "dep:bitvec" ];
          "colored" = [ "dep:colored" ];
          "cookie-factory" = [ "dep:cookie-factory" ];
          "datetime" = [ "time" ];
          "debug" = [ "std" "colored" ];
          "default" = [ "std" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "serialize" = [ "cookie-factory" ];
          "time" = [ "dep:time" ];
          "trace" = [ "debug" ];
        };
        resolvedDefaultFeatures = [ "datetime" "default" "std" "time" ];
      };
      "asn1-rs-derive 0.5.1" = rec {
        crateName = "asn1-rs-derive";
        version = "0.5.1";
        edition = "2018";
        sha256 = "140ldl0vp1d0090bpm0w9j8g80dwc03wp928w5kv5diwwlrjsp4n";
        procMacro = true;
        libName = "asn1_rs_derive";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
          {
            name = "synstructure";
            packageId = "synstructure 0.13.2";
          }
        ];

      };
      "asn1-rs-derive 0.6.0" = rec {
        crateName = "asn1-rs-derive";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0b7fpyjs2kyb2i922br5mbg8rml46rihr8qmcpdyj2a93sdy829i";
        procMacro = true;
        libName = "asn1_rs_derive";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
          {
            name = "synstructure";
            packageId = "synstructure 0.13.2";
          }
        ];

      };
      "asn1-rs-impl" = rec {
        crateName = "asn1-rs-impl";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1xv56m0wrwix4av3w86sih1nsa5g1dgfz135lz1qdznn5h60a63v";
        procMacro = true;
        libName = "asn1_rs_impl";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "assert_cmd" = rec {
        crateName = "assert_cmd";
        version = "2.0.17";
        edition = "2021";
        crateBin = [];
        sha256 = "0rhb6b0w23pbqcj1mkgdv8j3g9602d4jjmg45ql022lpnaj8klrb";
        authors = [
          "Pascal Hertleif <killercup@gmail.com>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "bstr";
            packageId = "bstr";
          }
          {
            name = "doc-comment";
            packageId = "doc-comment";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: false;
          }
          {
            name = "predicates";
            packageId = "predicates";
            usesDefaultFeatures = false;
            features = [ "diff" ];
          }
          {
            name = "predicates-core";
            packageId = "predicates-core";
          }
          {
            name = "predicates-tree";
            packageId = "predicates-tree";
          }
          {
            name = "wait-timeout";
            packageId = "wait-timeout";
          }
        ];
        features = {
          "color" = [ "dep:anstream" "predicates/color" ];
          "color-auto" = [ "color" ];
        };
      };
      "async-channel" = rec {
        crateName = "async-channel";
        version = "1.9.0";
        edition = "2018";
        sha256 = "0dbdlkzlncbibd3ij6y6jmvjd0cmdn48ydcfdpfhw09njd93r5c1";
        libName = "async_channel";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
          }
          {
            name = "event-listener";
            packageId = "event-listener 2.5.3";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
        ];

      };
      "async-io" = rec {
        crateName = "async-io";
        version = "2.4.0";
        edition = "2021";
        sha256 = "0n8h0vy53n4vdkq529scqnkzm9vcl3r73za9nj81s2nfrhiv78j3";
        libName = "async_io";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-lock";
            packageId = "async-lock";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
            usesDefaultFeatures = false;
          }
          {
            name = "parking";
            packageId = "parking";
          }
          {
            name = "polling";
            packageId = "polling";
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.44";
            usesDefaultFeatures = false;
            features = [ "fs" "net" "std" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" ];
          }
        ];

      };
      "async-lock" = rec {
        crateName = "async-lock";
        version = "3.4.0";
        edition = "2021";
        sha256 = "060vh45i809wcqyxzs5g69nqiqah7ydz0hpkcjys9258vqn4fvpz";
        libName = "async_lock";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "event-listener";
            packageId = "event-listener 5.4.0";
            usesDefaultFeatures = false;
          }
          {
            name = "event-listener-strategy";
            packageId = "event-listener-strategy";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "event-listener/loom" "dep:loom" ];
          "std" = [ "event-listener/std" "event-listener-strategy/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "async-stream" = rec {
        crateName = "async-stream";
        version = "0.3.6";
        edition = "2021";
        sha256 = "0xl4zqncrdmw2g6241wgr11dxdg4h7byy6bz3l6si03qyfk72nhb";
        libName = "async_stream";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "async-stream-impl";
            packageId = "async-stream-impl";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];

      };
      "async-stream-impl" = rec {
        crateName = "async-stream-impl";
        version = "0.3.6";
        edition = "2021";
        sha256 = "0kaplfb5axsvf1gfs2gk6c4zx6zcsns0yf3ssk7iwni7bphlvhn7";
        procMacro = true;
        libName = "async_stream_impl";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "visit-mut" ];
          }
        ];

      };
      "async-trait" = rec {
        crateName = "async-trait";
        version = "0.1.88";
        edition = "2021";
        sha256 = "1dgxvz7g75cmz6vqqz0mri4xazc6a8xfj1db6r9fxz29lzyd6fg5";
        procMacro = true;
        libName = "async_trait";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "full" "parsing" "printing" "proc-macro" "visit-mut" ];
          }
        ];

      };
      "asynchronous-codec 0.6.2" = rec {
        crateName = "asynchronous-codec";
        version = "0.6.2";
        edition = "2018";
        sha256 = "0s2mnrgnkbybq33k4issnxvbz6wf7i1kiyr2iqazrcnv5b1z4ms0";
        libName = "asynchronous_codec";
        authors = [
          "Max Inden <mail@max-inden.de>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            features = [ "io" ];
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "cbor" = [ "serde" "serde_cbor" ];
          "json" = [ "serde" "serde_json" ];
          "serde" = [ "dep:serde" ];
          "serde_cbor" = [ "dep:serde_cbor" ];
          "serde_json" = [ "dep:serde_json" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "asynchronous-codec 0.7.0" = rec {
        crateName = "asynchronous-codec";
        version = "0.7.0";
        edition = "2018";
        sha256 = "0cy2aqcq7km8ggpjmfvrbckvjgf1bpxh803kb4z90zqp48h0fq58";
        libName = "asynchronous_codec";
        authors = [
          "Max Inden <mail@max-inden.de>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            features = [ "io" ];
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "cbor" = [ "serde" "serde_cbor" ];
          "json" = [ "serde" "serde_json" ];
          "serde" = [ "dep:serde" ];
          "serde_cbor" = [ "dep:serde_cbor" ];
          "serde_json" = [ "dep:serde_json" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "atoi" = rec {
        crateName = "atoi";
        version = "2.0.0";
        edition = "2021";
        sha256 = "0a05h42fggmy7h0ajjv6m7z72l924i7igbx13hk9d8pyign9k3gj";
        authors = [
          "Markus Klein"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "atomic" = rec {
        crateName = "atomic";
        version = "0.6.0";
        edition = "2018";
        sha256 = "15193mfhmrq3p6vi1a10hw3n6kvzf5h32zikhby3mdj0ww1q10cd";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
        ];
        devDependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "fallback" ];
        };
        resolvedDefaultFeatures = [ "default" "fallback" ];
      };
      "atomic-waker" = rec {
        crateName = "atomic-waker";
        version = "1.1.2";
        edition = "2018";
        sha256 = "1h5av1lw56m0jf0fd3bchxq8a30xv0b4wv8s4zkp4s0i7mfvs18m";
        libName = "atomic_waker";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Contributors to futures-rs"
        ];
        features = {
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
      };
      "attohttpc" = rec {
        crateName = "attohttpc";
        version = "0.24.1";
        edition = "2018";
        sha256 = "18mj9g4xsxkmagykszmwpmqcddn23ikipf8ip7h9wx4snzw9p6ld";
        authors = [
          "Simon Bernier St-Pierre <git@sbstp.ca>"
        ];
        dependencies = [
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        features = {
          "__rustls" = [ "rustls-opt-dep" "webpki" ];
          "base64" = [ "dep:base64" ];
          "basic-auth" = [ "base64" ];
          "charsets" = [ "encoding_rs" "encoding_rs_io" ];
          "compress" = [ "flate2/default" ];
          "compress-zlib" = [ "flate2/zlib" ];
          "compress-zlib-ng" = [ "flate2/zlib-ng" ];
          "default" = [ "compress" "tls-native" ];
          "encoding_rs" = [ "dep:encoding_rs" ];
          "encoding_rs_io" = [ "dep:encoding_rs_io" ];
          "flate2" = [ "dep:flate2" ];
          "form" = [ "serde" "serde_urlencoded" ];
          "json" = [ "serde" "serde_json" ];
          "mime" = [ "dep:mime" ];
          "multipart" = [ "dep:multipart" ];
          "multipart-form" = [ "multipart" "mime" ];
          "native-tls" = [ "dep:native-tls" ];
          "rustls" = [ "tls-rustls-webpki-roots" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-opt-dep" = [ "dep:rustls-opt-dep" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "serde_urlencoded" = [ "dep:serde_urlencoded" ];
          "tls" = [ "tls-native" ];
          "tls-native" = [ "native-tls" ];
          "tls-native-vendored" = [ "native-tls/vendored" ];
          "tls-rustls" = [ "tls-rustls-webpki-roots" ];
          "tls-rustls-native-roots" = [ "__rustls" "rustls-native-certs" ];
          "tls-rustls-webpki-roots" = [ "__rustls" "webpki-roots" ];
          "tls-vendored" = [ "tls-native-vendored" ];
          "webpki" = [ "dep:webpki" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
        };
      };
      "authority-selection-inherents" = rec {
        crateName = "authority-selection-inherents";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/committee-selection/authority-selection-inherents; };
        libName = "authority_selection_inherents";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "minicbor";
            packageId = "minicbor";
            features = [ "alloc" ];
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "plutus";
            packageId = "plutus";
            usesDefaultFeatures = false;
          }
          {
            name = "plutus-datum-derive";
            packageId = "plutus-datum-derive";
            usesDefaultFeatures = false;
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "selection";
            packageId = "selection";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
          }
          {
            name = "sidechain-slots";
            packageId = "sidechain-slots";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-slots";
            packageId = "sp-consensus-slots";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-session-validator-management";
            packageId = "sp-session-validator-management";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-std";
            packageId = "sp-std";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "hex-literal";
            packageId = "hex-literal 1.0.0";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" ];
          }
        ];
        features = {
          "async-trait" = [ "dep:async-trait" ];
          "default" = [ "std" ];
          "sidechain-slots" = [ "dep:sidechain-slots" ];
          "std" = [ "frame-support/std" "sidechain-domain/std" "parity-scale-codec/std" "serde/std" "sidechain-slots" "sidechain-slots/std" "sidechain-slots/serde" "sp-api/std" "sp-session-validator-management/std" "sp-session-validator-management/serde" "sp-core/std" "sp-inherents/std" "sp-runtime/std" "sp-std/std" "thiserror" "async-trait" "selection/std" ];
          "thiserror" = [ "dep:thiserror" ];
        };
        resolvedDefaultFeatures = [ "async-trait" "default" "mock" "sidechain-slots" "std" "thiserror" ];
      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.4.0";
        edition = "2015";
        sha256 = "09lz3by90d2hphbq56znag9v87gfpd9gb8nr82hll8z6x2nhprdc";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];

      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.75";
        edition = "2021";
        sha256 = "00hhizz29mvd7cdqyz5wrj98vqkihgcxmv2vl7z0d0f53qrac1k8";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "addr2line";
            packageId = "addr2line 0.24.2";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "object";
            packageId = "object 0.36.7";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
            features = [ "read_core" "elf" "macho" "pe" "xcoff" "unaligned" "archive" ];
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            target = { target, features }: ((target."windows" or false) || ("cygwin" == target."os" or null));
          }
        ];
        features = {
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [ "std" ];
          "ruzstd" = [ "dep:ruzstd" ];
          "serde" = [ "dep:serde" ];
          "serialize-serde" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "base-x" = rec {
        crateName = "base-x";
        version = "0.2.11";
        edition = "2015";
        sha256 = "0w02sdqvg7zwm91agb2phikw4ri8jmncw32paxsv8ra1jv8ckfsc";
        libName = "base_x";
        authors = [
          "Alex R. <alexei.rudenko@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "base16ct" = rec {
        crateName = "base16ct";
        version = "0.2.0";
        edition = "2021";
        sha256 = "1kylrjhdzk7qpknrvlphw8ywdnvvg39dizw9622w3wk5xba04zsc";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "base58" = rec {
        crateName = "base58";
        version = "0.2.0";
        edition = "2015";
        sha256 = "10gmsivqfg1rpg8rzv1xbdsaa379yplxjy581na6hak8wqdzw1v1";
        authors = [
          "debris <marek.kotewicz@gmail.com>"
        ];

      };
      "base64 0.21.7" = rec {
        crateName = "base64";
        version = "0.21.7";
        edition = "2018";
        sha256 = "0rw52yvsk75kar9wgqfwgb414kvil1gn7mqkrhn9zf1537mpsacx";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "base64 0.22.1" = rec {
        crateName = "base64";
        version = "0.22.1";
        edition = "2018";
        sha256 = "1imqzgh7bxcikp5vx3shqvw9j09g9ly0xr0jma0q66i52r7jbcvj";
        authors = [
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "base64ct" = rec {
        crateName = "base64ct";
        version = "1.7.3";
        edition = "2021";
        sha256 = "18scrpjl145msdb64q4nbb0plm4wbmp5lml134nz0c5rvxm5pql9";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "bech32 0.11.0" = rec {
        crateName = "bech32";
        version = "0.11.0";
        edition = "2018";
        sha256 = "07cmbj8ynqpj01wzj4pgj27i2c6n66gf8zma8k6xxdz3jrhl8rfr";
        authors = [
          "Clark Moody"
          "Andrew Poelstra"
          "Tobin Harding"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "bech32 0.7.3" = rec {
        crateName = "bech32";
        version = "0.7.3";
        edition = "2015";
        sha256 = "1lai6xi1li8y30kx9icscmi2j6s6j323sy9hfdzm1fbgz4svxard";
        authors = [
          "Clark Moody"
        ];
        features = {
        };
      };
      "bech32 0.9.1" = rec {
        crateName = "bech32";
        version = "0.9.1";
        edition = "2018";
        sha256 = "0igl565rfpxwbh0g36cb7469sjkiap8yd21kcr0ppi2jfbwr6syq";
        authors = [
          "Clark Moody"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bigdecimal" = rec {
        crateName = "bigdecimal";
        version = "0.4.8";
        edition = "2015";
        sha256 = "04q0d4f9k3czy6ynydd8gspig046f85kav6cgh1266vsmclg48hs";
        authors = [
          "Andrew Kubera"
        ];
        dependencies = [
          {
            name = "libm";
            packageId = "libm";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde-json" = [ "serde/derive" "serde_json" ];
          "serde_json" = [ "dep:serde_json" ];
          "std" = [ "num-bigint/std" "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "binary-merkle-tree" = rec {
        crateName = "binary-merkle-tree";
        version = "16.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "binary_merkle_tree";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "hash-db";
            packageId = "hash-db";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "array-bytes" = [ "dep:array-bytes" ];
          "debug" = [ "array-bytes" "log" ];
          "default" = [ "debug" "std" ];
          "log" = [ "dep:log" ];
          "std" = [ "codec/std" "hash-db/std" "log/std" ];
        };
        resolvedDefaultFeatures = [ "log" "std" ];
      };
      "bincode" = rec {
        crateName = "bincode";
        version = "1.3.3";
        edition = "2015";
        sha256 = "1bfw3mnwzx5g1465kiqllp5n4r10qrqy88kdlp3jfwnq2ya5xx5i";
        authors = [
          "Ty Overby <ty@pre-alpha.com>"
          "Francesco Mazzoli <f@mazzo.li>"
          "David Tolnay <dtolnay@gmail.com>"
          "Zoey Riordan <zoey@dos.cafe>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
        };
      };
      "bindgen" = rec {
        crateName = "bindgen";
        version = "0.65.1";
        edition = "2018";
        sha256 = "1i9wci1h3xnk8hi7cf06capgifnmpk9dd59zqznh6jcsdx37ppyg";
        libPath = "lib.rs";
        authors = [
          "Jyun-Yan You <jyyou.tw@gmail.com>"
          "Emilio Cobos Álvarez <emilio@crisal.io>"
          "Nick Fitzgerald <fitzgen@gmail.com>"
          "The Servo project developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "cexpr";
            packageId = "cexpr";
          }
          {
            name = "clang-sys";
            packageId = "clang-sys";
            features = [ "clang_6_0" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "lazycell";
            packageId = "lazycell";
          }
          {
            name = "peeking_take_while";
            packageId = "peeking_take_while";
          }
          {
            name = "prettyplease";
            packageId = "prettyplease";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" "unicode" ];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 1.1.0";
          }
          {
            name = "shlex";
            packageId = "shlex";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "extra-traits" "visit-mut" ];
          }
        ];
        features = {
          "annotate-snippets" = [ "dep:annotate-snippets" ];
          "default" = [ "logging" "runtime" "which-rustfmt" ];
          "experimental" = [ "annotate-snippets" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" ];
          "runtime" = [ "clang-sys/runtime" ];
          "static" = [ "clang-sys/static" ];
          "which" = [ "dep:which" ];
          "which-rustfmt" = [ "which" ];
        };
        resolvedDefaultFeatures = [ "runtime" ];
      };
      "bit-set" = rec {
        crateName = "bit-set";
        version = "0.8.0";
        edition = "2015";
        sha256 = "18riaa10s6n59n39vix0cr7l2dgwdhcpbcm97x1xbyfp1q47x008";
        libName = "bit_set";
        authors = [
          "Alexis Beingessner <a.beingessner@gmail.com>"
        ];
        dependencies = [
          {
            name = "bit-vec";
            packageId = "bit-vec";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" "bit-vec/serde" ];
          "std" = [ "bit-vec/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bit-vec" = rec {
        crateName = "bit-vec";
        version = "0.8.0";
        edition = "2015";
        sha256 = "1xxa1s2cj291r7k1whbxq840jxvmdsq9xgh7bvrxl46m80fllxjy";
        libName = "bit_vec";
        authors = [
          "Alexis Beingessner <a.beingessner@gmail.com>"
        ];
        features = {
          "borsh" = [ "dep:borsh" ];
          "borsh_std" = [ "borsh/std" ];
          "default" = [ "std" ];
          "miniserde" = [ "dep:miniserde" ];
          "nanoserde" = [ "dep:nanoserde" ];
          "serde" = [ "dep:serde" ];
          "serde_no_std" = [ "serde/alloc" ];
          "serde_std" = [ "std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bitcoin-internals" = rec {
        crateName = "bitcoin-internals";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1yxv9v37nkmm8p4gi7vz3js77kiwa5adw15frgx87jc9f2zw69cl";
        libName = "bitcoin_internals";
        authors = [
          "Andrew Poelstra <apoelstra@wpsoftware.net>"
          "The Rust Bitcoin developers"
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bitcoin-io" = rec {
        crateName = "bitcoin-io";
        version = "0.1.3";
        edition = "2021";
        sha256 = "1bvbhm5yqv3kqrwm5d79yjak1djjkgnkamcc373v1vckgamw8iqb";
        libName = "bitcoin_io";
        authors = [
          "Matt Corallo <birchneutea@mattcorallo.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "bitcoin_hashes 0.13.0" = rec {
        crateName = "bitcoin_hashes";
        version = "0.13.0";
        edition = "2018";
        sha256 = "0fr9vqg97pv8s5pj1asz6056z1z27az8xc9dk7cxgf7bpzda8c0r";
        authors = [
          "Andrew Poelstra <apoelstra@wpsoftware.net>"
        ];
        dependencies = [
          {
            name = "bitcoin-internals";
            packageId = "bitcoin-internals";
            rename = "internals";
          }
          {
            name = "hex-conservative";
            packageId = "hex-conservative 0.1.2";
            rename = "hex";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "actual-core2" = [ "dep:actual-core2" ];
          "alloc" = [ "internals/alloc" "hex/alloc" ];
          "core2" = [ "actual-core2" "hex/core2" ];
          "default" = [ "std" ];
          "schemars" = [ "dep:schemars" ];
          "serde" = [ "dep:serde" ];
          "serde-std" = [ "serde/std" ];
          "std" = [ "alloc" "internals/std" "hex/std" ];
        };
      };
      "bitcoin_hashes 0.14.0" = rec {
        crateName = "bitcoin_hashes";
        version = "0.14.0";
        edition = "2021";
        sha256 = "05jdirz6p2q1fbg65c1xfhf8bsx7snpzm9i1g8a7w95h1lyw065v";
        authors = [
          "Andrew Poelstra <apoelstra@wpsoftware.net>"
        ];
        dependencies = [
          {
            name = "bitcoin-io";
            packageId = "bitcoin-io";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "hex-conservative";
            packageId = "hex-conservative 0.2.1";
            rename = "hex";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "hex/alloc" ];
          "bitcoin-io" = [ "dep:bitcoin-io" ];
          "default" = [ "std" ];
          "io" = [ "bitcoin-io" ];
          "schemars" = [ "dep:schemars" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" "hex/std" "bitcoin-io/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bitcoin-io" "std" ];
      };
      "bitflags 1.3.2" = rec {
        crateName = "bitflags";
        version = "1.3.2";
        edition = "2018";
        sha256 = "12ki6w8gn1ldq7yz9y680llwk5gmrhrzszaa17g1sbrw2r2qvwxy";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bitflags 2.9.1" = rec {
        crateName = "bitflags";
        version = "2.9.1";
        edition = "2021";
        sha256 = "0rz9rpp5wywwqb3mxfkywh4drmzci2fch780q7lifbf6bsc5d3hv";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" "std" ];
      };
      "bitvec" = rec {
        crateName = "bitvec";
        version = "1.0.1";
        edition = "2021";
        sha256 = "173ydyj2q5vwj88k6xgjnfsshs4x9wbvjjv7sm0h36r34hn87hhv";
        dependencies = [
          {
            name = "funty";
            packageId = "funty";
            usesDefaultFeatures = false;
          }
          {
            name = "radium";
            packageId = "radium";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "wyz";
            packageId = "wyz";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "atomic" "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "atomic" "default" "std" ];
      };
      "blake2 0.10.6" = rec {
        crateName = "blake2";
        version = "0.10.6";
        edition = "2018";
        sha256 = "1zlf7w7gql12v61d9jcbbswa3dw8qxsjglylsiljp9f9b3a2ll26";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "mac" ];
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "simd_asm" = [ "simd_opt" ];
          "simd_opt" = [ "simd" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "blake2 0.8.1" = rec {
        crateName = "blake2";
        version = "0.8.1";
        edition = "2015";
        sha256 = "0c4k11j04kqhkci6i9b7lz6p13kpcv228pdqixgrawvavaq0gjwl";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "byte-tools";
            packageId = "byte-tools";
          }
          {
            name = "crypto-mac";
            packageId = "crypto-mac 0.7.0";
          }
          {
            name = "digest";
            packageId = "digest 0.8.1";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug 0.2.3";
          }
        ];
        devDependencies = [
          {
            name = "crypto-mac";
            packageId = "crypto-mac 0.7.0";
            features = [ "dev" ];
          }
          {
            name = "digest";
            packageId = "digest 0.8.1";
            features = [ "dev" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "simd_asm" = [ "simd_opt" ];
          "simd_opt" = [ "simd" ];
          "std" = [ "digest/std" "crypto-mac/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "blake2b_simd" = rec {
        crateName = "blake2b_simd";
        version = "1.0.3";
        edition = "2021";
        sha256 = "16cxmm4pr5jx9xc0msj1qn018ram3vz9k17cj57r97hm1fi07s86";
        authors = [
          "Jack O'Connor"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec 0.7.6";
            usesDefaultFeatures = false;
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "blake2s_simd" = rec {
        crateName = "blake2s_simd";
        version = "1.0.3";
        edition = "2021";
        sha256 = "1pvl05pjviisyf3pzgg14ip7f9wlsvmhz93lp1g0k4xcrzp7s3z9";
        authors = [
          "Jack O'Connor"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec 0.7.6";
            usesDefaultFeatures = false;
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "blake3" = rec {
        crateName = "blake3";
        version = "1.8.2";
        edition = "2021";
        sha256 = "1854x65zmjh9w9cfhyyyg0wmm2k5d87l13l4m7y40ajbkslam21q";
        authors = [
          "Jack O'Connor <oconnor663@gmail.com>"
          "Samuel Neves"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec 0.7.6";
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "default" = [ "std" ];
          "digest" = [ "dep:digest" ];
          "mmap" = [ "std" "dep:memmap2" ];
          "rayon" = [ "dep:rayon-core" ];
          "serde" = [ "dep:serde" ];
          "traits-preview" = [ "dep:digest" ];
          "zeroize" = [ "dep:zeroize" "arrayvec/zeroize" ];
        };
      };
      "block-buffer 0.10.4" = rec {
        crateName = "block-buffer";
        version = "0.10.4";
        edition = "2018";
        sha256 = "0w9sa2ypmrsqqvc20nhwr75wbb5cjr4kkyhpjm1z1lv2kdicfy1h";
        libName = "block_buffer";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
          }
        ];

      };
      "block-buffer 0.9.0" = rec {
        crateName = "block-buffer";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1r4pf90s7d7lj1wdjhlnqa26vvbm6pnc33z138lxpnp9srpi2lj1";
        libName = "block_buffer";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
          }
        ];
        features = {
          "block-padding" = [ "dep:block-padding" ];
        };
      };
      "blst" = rec {
        crateName = "blst";
        version = "0.3.14";
        edition = "2018";
        links = "blst";
        sha256 = "13dk7l8d9w0b4vmm7rm7lqlaqrrsa4rh6rw7p30f7bczc6a9mis7";
        authors = [
          "sean-sn <sean@supranational.net>"
        ];
        dependencies = [
          {
            name = "threadpool";
            packageId = "threadpool";
            target = { target, features }: (!(("wasm32" == target."arch" or null) || ("none" == target."os" or null) || ("unknown" == target."os" or null) || ("uefi" == target."os" or null)));
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            features = [ "zeroize_derive" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "glob";
            packageId = "glob";
            target = {target, features}: ("msvc" == target."env" or null);
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde-secret" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bollard-stubs" = rec {
        crateName = "bollard-stubs";
        version = "1.42.0-rc.3";
        edition = "2021";
        sha256 = "0r3qkqwyjwna696rwvsahicfh8yz1y01zdviz5x8vx28030bangd";
        libName = "bollard_stubs";
        authors = [
          "Bollard contributors"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
        ];
        features = {
          "chrono" = [ "dep:chrono" ];
          "time" = [ "dep:time" ];
        };
      };
      "bounded-collections" = rec {
        crateName = "bounded-collections";
        version = "0.2.4";
        edition = "2021";
        sha256 = "0kc0bw1b4ayb2qbahk4ym4w21h4cwp1cw8sxgaqg09vqxl5qmbb4";
        libName = "bounded_collections";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "json-schema" = [ "dep:schemars" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "log/std" "codec/std" "scale-info/std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "serde" "std" ];
      };
      "bs58" = rec {
        crateName = "bs58";
        version = "0.5.1";
        edition = "2021";
        sha256 = "1x3v51n5n2s3l0rgrsn142akdf331n2qsa75pscw71fi848vm25z";
        dependencies = [
          {
            name = "tinyvec";
            packageId = "tinyvec";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "grab_spare_slice" ];
          }
        ];
        devDependencies = [
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "rustc_1_55" ];
          }
        ];
        features = {
          "alloc" = [ "tinyvec?/alloc" ];
          "cb58" = [ "sha2" ];
          "check" = [ "sha2" ];
          "default" = [ "std" ];
          "sha2" = [ "dep:sha2" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "alloc" "tinyvec?/std" ];
          "tinyvec" = [ "dep:tinyvec" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "bstr" = rec {
        crateName = "bstr";
        version = "1.12.0";
        edition = "2021";
        sha256 = "195i0gd7r7jg7a8spkmw08492n7rmiabcvz880xn2z8dkp8i6h93";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "regex-automata";
            packageId = "regex-automata 0.4.9";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "dfa-search" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "memchr/alloc" "serde?/alloc" ];
          "default" = [ "std" "unicode" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" "memchr/std" "serde?/std" ];
          "unicode" = [ "dep:regex-automata" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" "unicode" ];
      };
      "build-helper" = rec {
        crateName = "build-helper";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0pxddbizzd3mvg3777hlg92la5qacjs8734cjk79ajgsycdikkmx";
        libName = "build_helper";
        authors = [
          "Daniel Keep <daniel.keep@gmail.com>"
        ];
        dependencies = [
          {
            name = "semver";
            packageId = "semver 0.6.0";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bumpalo" = rec {
        crateName = "bumpalo";
        version = "3.17.0";
        edition = "2021";
        sha256 = "1gxxsn2fsjmv03g8p3m749mczv2k4m8xspifs5l7bcx0vx3gna0n";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
          "allocator-api2" = [ "dep:allocator-api2" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "byte-slice-cast" = rec {
        crateName = "byte-slice-cast";
        version = "1.2.3";
        edition = "2018";
        sha256 = "178c6ghnqwq472xypxabk27kjid01qxifw3bff8nj63jf8pihxbm";
        libName = "byte_slice_cast";
        authors = [
          "Sebastian Dröge <sebastian@centricular.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "byte-string-derive" = rec {
        crateName = "byte-string-derive";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/utils/byte-string-derivation; };
        procMacro = true;
        libName = "byte_string_derive";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];
        devDependencies = [
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_test";
            packageId = "serde_test";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];

      };
      "byte-tools" = rec {
        crateName = "byte-tools";
        version = "0.3.1";
        edition = "2015";
        sha256 = "1mqi29wsm8njpl51pfwr31wmpzs5ahlcb40wsjyd92l90ixcmdg3";
        libName = "byte_tools";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "bytemuck" = rec {
        crateName = "bytemuck";
        version = "1.23.0";
        edition = "2018";
        sha256 = "134mywp7bqm252c851h3bny75g0l5kw99738a1mkcjyf07pscd4i";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        features = {
          "bytemuck_derive" = [ "dep:bytemuck_derive" ];
          "derive" = [ "bytemuck_derive" ];
          "extern_crate_std" = [ "extern_crate_alloc" ];
          "latest_stable_rust" = [ "aarch64_simd" "avx512_simd" "align_offset" "alloc_uninit" "const_zeroed" "derive" "impl_core_error" "min_const_generics" "must_cast" "must_cast_extra" "pod_saturating" "track_caller" "transparentwrapper_extra" "wasm_simd" "zeroable_atomics" "zeroable_maybe_uninit" "zeroable_unwind_fn" ];
          "must_cast_extra" = [ "must_cast" ];
        };
      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0jzncxyf404mwqdbspihyzpkndfgda450l0893pz5xj685cg5l0z";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bytes" = rec {
        crateName = "bytes";
        version = "1.10.1";
        edition = "2018";
        sha256 = "0smd4wi2yrhp5pmq571yiaqx84bjqlm1ixqhnvfwzzc6pqkn26yp";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
          "extra-platforms" = [ "dep:extra-platforms" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bzip2-sys" = rec {
        crateName = "bzip2-sys";
        version = "0.1.13+1.0.8";
        edition = "2015";
        links = "bzip2";
        sha256 = "056c39pgjh4272bdslv445f5ry64xvb0f7nph3z7860ln8rzynr2";
        libName = "bzip2_sys";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "static" ];
      };
      "c2-chacha" = rec {
        crateName = "c2-chacha";
        version = "0.3.3";
        edition = "2018";
        sha256 = "106w8wdzskawky038wm86nq2d34hjv1rl5spvhj087kvzs9swzfj";
        libName = "c2_chacha";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "cipher";
            packageId = "cipher 0.2.5";
            optional = true;
          }
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            rename = "ppv-lite86";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "cipher" = [ "dep:cipher" ];
          "default" = [ "std" "rustcrypto_api" ];
          "no_simd" = [ "ppv-lite86/no_simd" ];
          "rustcrypto_api" = [ "cipher" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "cipher" "default" "rustcrypto_api" "std" ];
      };
      "camino" = rec {
        crateName = "camino";
        version = "1.1.9";
        edition = "2018";
        sha256 = "1lqszl12l1146jf8g01rvjmapif82mhzih870ln3x0dmcr4yr5lb";
        authors = [
          "Without Boats <saoirse@without.boats>"
          "Ashley Williams <ashley666ashley@gmail.com>"
          "Steve Klabnik <steve@steveklabnik.com>"
          "Rain <rain@sunshowers.io>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "proptest" = [ "dep:proptest" ];
          "proptest1" = [ "proptest" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "serde" "serde1" ];
      };
      "cardano-serialization-lib" = rec {
        crateName = "cardano-serialization-lib";
        version = "14.1.1";
        edition = "2018";
        sha256 = "0g1p389pxvc6f7q5wbzjkmiy7cy5f5hj2rfcq9bi1aslig225495";
        libName = "cardano_serialization_lib";type = [ "cdylib" "rlib" ];
        authors = [
          "EMURGO"
        ];
        dependencies = [
          {
            name = "bech32";
            packageId = "bech32 0.7.3";
          }
          {
            name = "cbor_event";
            packageId = "cbor_event";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "clear_on_drop";
            packageId = "clear_on_drop";
            features = [ "no_cc" ];
          }
          {
            name = "cryptoxide";
            packageId = "cryptoxide";
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
          {
            name = "ed25519-bip32";
            packageId = "ed25519-bip32";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
            features = [ "js" ];
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            target = { target, features }: (!(("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null))));
          }
          {
            name = "hashlink";
            packageId = "hashlink 0.9.1";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
          }
          {
            name = "noop_proc_macro";
            packageId = "noop_proc_macro";
            target = { target, features }: (!(("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null))));
          }
          {
            name = "num";
            packageId = "num";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-integer";
            packageId = "num-integer";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rand_os";
            packageId = "rand_os";
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
            features = [ "wasm-bindgen" ];
          }
          {
            name = "rand_os";
            packageId = "rand_os";
            target = { target, features }: (!(("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null))));
          }
          {
            name = "schemars";
            packageId = "schemars";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde-wasm-bindgen";
            packageId = "serde-wasm-bindgen";
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha2";
            packageId = "sha2 0.9.9";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
          }
        ];
        buildDependencies = [
          {
            name = "schemars";
            packageId = "schemars";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        devDependencies = [
          {
            name = "rand_os";
            packageId = "rand_os";
          }
        ];
        features = {
          "arbitrary-precision-json" = [ "serde_json/arbitrary_precision" ];
          "default" = [ "arbitrary-precision-json" ];
        };
      };
      "cargo-platform" = rec {
        crateName = "cargo-platform";
        version = "0.1.9";
        edition = "2021";
        sha256 = "1sinpmqjdk3q9llbmxr0h0nyvqrif1r5qs34l000z73b024z2np3";
        libName = "cargo_platform";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "cargo_metadata" = rec {
        crateName = "cargo_metadata";
        version = "0.15.4";
        edition = "2018";
        sha256 = "0fm767r349p5rh50k21g8w2hpcg2970kjx0ff517mz163wzj9r7f";
        authors = [
          "Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de>"
        ];
        dependencies = [
          {
            name = "camino";
            packageId = "camino";
            features = [ "serde1" ];
          }
          {
            name = "cargo-platform";
            packageId = "cargo-platform";
          }
          {
            name = "semver";
            packageId = "semver 1.0.26";
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "unbounded_depth" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "builder" = [ "derive_builder" ];
          "derive_builder" = [ "dep:derive_builder" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "cbor_event" = rec {
        crateName = "cbor_event";
        version = "2.4.0";
        edition = "2015";
        sha256 = "0g1d5y6g7wblqir134hvwvq971fqxwqh11hiir7fandws5hh56h8";
        authors = [
          "Nicolas Di Prima <nicolas@primetype.co.uk>"
          "Vincent Hanquez <vincent@typed.io>"
        ];

      };
      "cc" = rec {
        crateName = "cc";
        version = "1.2.22";
        edition = "2018";
        sha256 = "1lfg9bd56iq6mf5rwndjnj3mrc6r9kwk5jc1g360licqz7nrbnrj";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "jobserver";
            packageId = "jobserver";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "shlex";
            packageId = "shlex";
          }
        ];
        features = {
          "parallel" = [ "dep:libc" "dep:jobserver" ];
        };
        resolvedDefaultFeatures = [ "parallel" ];
      };
      "cesu8" = rec {
        crateName = "cesu8";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0g6q58wa7khxrxcxgnqyi9s1z2cjywwwd3hzr5c55wskhx6s0hvd";
        authors = [
          "Eric Kidd <git@randomhacks.net>"
        ];
        features = {
        };
      };
      "cexpr" = rec {
        crateName = "cexpr";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0rl77bwhs5p979ih4r0202cn5jrfsrbgrksp40lkfz5vk1x3ib3g";
        authors = [
          "Jethro Beekman <jethro@jbeekman.nl>"
        ];
        dependencies = [
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];

      };
      "cfg-expr" = rec {
        crateName = "cfg-expr";
        version = "0.15.8";
        edition = "2021";
        sha256 = "00lgf717pmf5qd2qsxxzs815v6baqg38d6m5i6wlh235p14asryh";
        libName = "cfg_expr";
        authors = [
          "Embark <opensource@embark-studios.com>"
          "Jake Shadle <jake.shadle@embark-studios.com>"
        ];
        dependencies = [
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];
        features = {
          "target-lexicon" = [ "dep:target-lexicon" ];
          "targets" = [ "target-lexicon" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1za0vb97n4brpzpv8lsbnzmq5r8f2b0cpqqr0sy8h5bn751xxwds";
        libName = "cfg_if";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "cfg_aliases 0.1.1" = rec {
        crateName = "cfg_aliases";
        version = "0.1.1";
        edition = "2018";
        sha256 = "17p821nc6jm830vzl2lmwz60g3a30hcm33nk6l257i1rjdqw85px";
        authors = [
          "Zicklag <zicklag@katharostech.com>"
        ];

      };
      "cfg_aliases 0.2.1" = rec {
        crateName = "cfg_aliases";
        version = "0.2.1";
        edition = "2018";
        sha256 = "092pxdc1dbgjb6qvh83gk56rkic2n2ybm4yvy76cgynmzi3zwfk1";
        authors = [
          "Zicklag <zicklag@katharostech.com>"
        ];

      };
      "chacha" = rec {
        crateName = "chacha";
        version = "0.3.0";
        edition = "2015";
        sha256 = "0qj839h7fjkmxlwyx5yqrcj0rlgvw2cfkaj0arhyb8gvnn0w1wyx";
        authors = [
          "Peter Reid <peter.d.reid@gmail.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "keystream";
            packageId = "keystream";
          }
        ];
        features = {
        };
      };
      "chacha20" = rec {
        crateName = "chacha20";
        version = "0.9.1";
        edition = "2021";
        sha256 = "0678wipx6kghp71hpzhl2qvx80q7caz3vm8vsvd07b1fpms3yqf3";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cipher";
            packageId = "cipher 0.4.4";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher 0.4.4";
            features = [ "dev" ];
          }
        ];
        features = {
          "std" = [ "cipher/std" ];
          "zeroize" = [ "cipher/zeroize" ];
        };
        resolvedDefaultFeatures = [ "zeroize" ];
      };
      "chacha20poly1305" = rec {
        crateName = "chacha20poly1305";
        version = "0.10.1";
        edition = "2021";
        sha256 = "0dfwq9ag7x7lnd0znafpcn8h7k4nfr9gkzm0w7sc1lcj451pkk8h";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "aead";
            packageId = "aead";
            usesDefaultFeatures = false;
          }
          {
            name = "chacha20";
            packageId = "chacha20";
            features = [ "zeroize" ];
          }
          {
            name = "cipher";
            packageId = "cipher 0.4.4";
          }
          {
            name = "poly1305";
            packageId = "poly1305";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "aead";
            packageId = "aead";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
        ];
        features = {
          "alloc" = [ "aead/alloc" ];
          "default" = [ "alloc" "getrandom" ];
          "getrandom" = [ "aead/getrandom" "rand_core" ];
          "heapless" = [ "aead/heapless" ];
          "rand_core" = [ "aead/rand_core" ];
          "std" = [ "aead/std" "alloc" ];
          "stream" = [ "aead/stream" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "rand_core" ];
      };
      "chrono" = rec {
        crateName = "chrono";
        version = "0.4.41";
        edition = "2021";
        sha256 = "0k8wy2mph0mgipq28vv3wirivhb31pqs7jyid0dzjivz0i9djsf4";
        dependencies = [
          {
            name = "android-tzdata";
            packageId = "android-tzdata";
            optional = true;
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "iana-time-zone";
            packageId = "iana-time-zone";
            optional = true;
            target = { target, features }: (target."unix" or false);
            features = [ "fallback" ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = { target, features }: (("wasm32" == target."arch" or null) && (!(("emscripten" == target."os" or null) || ("wasi" == target."os" or null))));
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            target = { target, features }: (("wasm32" == target."arch" or null) && (!(("emscripten" == target."os" or null) || ("wasi" == target."os" or null))));
          }
          {
            name = "windows-link";
            packageId = "windows-link";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "android-tzdata" = [ "dep:android-tzdata" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "clock" = [ "winapi" "iana-time-zone" "android-tzdata" "now" ];
          "default" = [ "clock" "std" "oldtime" "wasmbind" ];
          "iana-time-zone" = [ "dep:iana-time-zone" ];
          "js-sys" = [ "dep:js-sys" ];
          "now" = [ "std" ];
          "pure-rust-locales" = [ "dep:pure-rust-locales" ];
          "rkyv" = [ "dep:rkyv" "rkyv/size_32" ];
          "rkyv-16" = [ "dep:rkyv" "rkyv?/size_16" ];
          "rkyv-32" = [ "dep:rkyv" "rkyv?/size_32" ];
          "rkyv-64" = [ "dep:rkyv" "rkyv?/size_64" ];
          "rkyv-validation" = [ "rkyv?/validation" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "unstable-locales" = [ "pure-rust-locales" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
          "wasmbind" = [ "wasm-bindgen" "js-sys" ];
          "winapi" = [ "windows-link" ];
          "windows-link" = [ "dep:windows-link" ];
        };
        resolvedDefaultFeatures = [ "alloc" "android-tzdata" "clock" "default" "iana-time-zone" "js-sys" "now" "oldtime" "std" "wasm-bindgen" "wasmbind" "winapi" "windows-link" ];
      };
      "cid 0.11.1" = rec {
        crateName = "cid";
        version = "0.11.1";
        edition = "2021";
        sha256 = "0fngi9wm3rw4k10f7a8v36wdz7gpk3fr84g5kk9cr84g5qkxhiri";
        authors = [
          "Friedel Ziegelmayer <dignifiedquire@gmail.com>"
        ];
        dependencies = [
          {
            name = "core2";
            packageId = "core2";
            usesDefaultFeatures = false;
          }
          {
            name = "multibase";
            packageId = "multibase";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "multihash";
            packageId = "multihash 0.19.3";
            usesDefaultFeatures = false;
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint 0.8.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:multibase" "core2/alloc" "multihash/alloc" ];
          "arb" = [ "dep:arbitrary" "dep:quickcheck" "dep:rand" "multihash/arb" ];
          "default" = [ "std" ];
          "scale-codec" = [ "dep:parity-scale-codec" "multihash/scale-codec" ];
          "serde" = [ "alloc" "dep:serde" "dep:serde_bytes" "multihash/serde" ];
          "serde-codec" = [ "serde" ];
          "std" = [ "alloc" "core2/alloc" "multihash/std" "unsigned-varint/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "cid 0.9.0" = rec {
        crateName = "cid";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0hz13lr926wirglmhy0mmzw4rbbilargs6nphx0xab4qjcqqxdmr";
        authors = [
          "Friedel Ziegelmayer <dignifiedquire@gmail.com>"
        ];
        dependencies = [
          {
            name = "core2";
            packageId = "core2";
            usesDefaultFeatures = false;
          }
          {
            name = "multibase";
            packageId = "multibase";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "multihash";
            packageId = "multihash 0.17.0";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint 0.7.2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "multibase" "multihash/alloc" "core2/alloc" "serde/alloc" ];
          "arb" = [ "quickcheck" "rand" "multihash/arb" "multihash/sha2" "arbitrary" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" "multihash/default" ];
          "multibase" = [ "dep:multibase" ];
          "parity-scale-codec" = [ "dep:parity-scale-codec" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rand" = [ "dep:rand" ];
          "scale-codec" = [ "parity-scale-codec" "multihash/scale-codec" ];
          "serde" = [ "dep:serde" ];
          "serde-codec" = [ "alloc" "serde" "multihash/serde-codec" "serde_bytes" ];
          "serde_bytes" = [ "dep:serde_bytes" ];
          "std" = [ "multihash/std" "unsigned-varint/std" "alloc" "multibase/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "multibase" "serde" "std" ];
      };
      "cipher 0.2.5" = rec {
        crateName = "cipher";
        version = "0.2.5";
        edition = "2018";
        sha256 = "00b8imbmdg7zdrbaczlivmdfdy09xldg95wl4iijl15xgjcfgy0j";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "dev" = [ "blobby" ];
        };
      };
      "cipher 0.4.4" = rec {
        crateName = "cipher";
        version = "0.4.4";
        edition = "2021";
        sha256 = "1b9x9agg67xq5nq879z66ni4l08m6m3hqcshk37d4is4ysd3ngvp";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "inout";
            packageId = "inout";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "block-padding" = [ "inout/block-padding" ];
          "dev" = [ "blobby" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [ "alloc" "crypto-common/std" "inout/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "zeroize" ];
      };
      "clang-sys" = rec {
        crateName = "clang-sys";
        version = "1.8.1";
        edition = "2021";
        links = "clang";
        sha256 = "1x1r9yqss76z8xwpdanw313ss6fniwc1r7dzb5ycjn0ph53kj0hb";
        libName = "clang_sys";
        authors = [
          "Kyle Mayes <kyle@mayeses.com>"
        ];
        dependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "libloading";
            packageId = "libloading";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
        ];
        devDependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
        ];
        features = {
          "clang_10_0" = [ "clang_9_0" ];
          "clang_11_0" = [ "clang_10_0" ];
          "clang_12_0" = [ "clang_11_0" ];
          "clang_13_0" = [ "clang_12_0" ];
          "clang_14_0" = [ "clang_13_0" ];
          "clang_15_0" = [ "clang_14_0" ];
          "clang_16_0" = [ "clang_15_0" ];
          "clang_17_0" = [ "clang_16_0" ];
          "clang_18_0" = [ "clang_17_0" ];
          "clang_3_6" = [ "clang_3_5" ];
          "clang_3_7" = [ "clang_3_6" ];
          "clang_3_8" = [ "clang_3_7" ];
          "clang_3_9" = [ "clang_3_8" ];
          "clang_4_0" = [ "clang_3_9" ];
          "clang_5_0" = [ "clang_4_0" ];
          "clang_6_0" = [ "clang_5_0" ];
          "clang_7_0" = [ "clang_6_0" ];
          "clang_8_0" = [ "clang_7_0" ];
          "clang_9_0" = [ "clang_8_0" ];
          "libloading" = [ "dep:libloading" ];
          "runtime" = [ "libloading" ];
        };
        resolvedDefaultFeatures = [ "clang_3_5" "clang_3_6" "clang_3_7" "clang_3_8" "clang_3_9" "clang_4_0" "clang_5_0" "clang_6_0" "libloading" "runtime" ];
      };
      "clap" = rec {
        crateName = "clap";
        version = "4.5.38";
        edition = "2021";
        crateBin = [];
        sha256 = "0060d8gx692via31il45pdnc6pix8l2hynf28bgk1acbby0bk4zd";
        dependencies = [
          {
            name = "clap_builder";
            packageId = "clap_builder";
            usesDefaultFeatures = false;
          }
          {
            name = "clap_derive";
            packageId = "clap_derive";
            optional = true;
          }
        ];
        features = {
          "cargo" = [ "clap_builder/cargo" ];
          "color" = [ "clap_builder/color" ];
          "debug" = [ "clap_builder/debug" "clap_derive?/debug" ];
          "default" = [ "std" "color" "help" "usage" "error-context" "suggestions" ];
          "deprecated" = [ "clap_builder/deprecated" "clap_derive?/deprecated" ];
          "derive" = [ "dep:clap_derive" ];
          "env" = [ "clap_builder/env" ];
          "error-context" = [ "clap_builder/error-context" ];
          "help" = [ "clap_builder/help" ];
          "std" = [ "clap_builder/std" ];
          "string" = [ "clap_builder/string" ];
          "suggestions" = [ "clap_builder/suggestions" ];
          "unicode" = [ "clap_builder/unicode" ];
          "unstable-doc" = [ "clap_builder/unstable-doc" "derive" ];
          "unstable-ext" = [ "clap_builder/unstable-ext" ];
          "unstable-markdown" = [ "clap_derive/unstable-markdown" ];
          "unstable-styles" = [ "clap_builder/unstable-styles" ];
          "unstable-v5" = [ "clap_builder/unstable-v5" "clap_derive?/unstable-v5" "deprecated" ];
          "usage" = [ "clap_builder/usage" ];
          "wrap_help" = [ "clap_builder/wrap_help" ];
        };
        resolvedDefaultFeatures = [ "color" "default" "derive" "env" "error-context" "help" "std" "string" "suggestions" "usage" "wrap_help" ];
      };
      "clap_builder" = rec {
        crateName = "clap_builder";
        version = "4.5.38";
        edition = "2021";
        sha256 = "0821n0ri2nf1xqj11q1fn78i2hhw6qs96qpan08zdb1z53zjd41p";
        dependencies = [
          {
            name = "anstream";
            packageId = "anstream";
            optional = true;
          }
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "clap_lex";
            packageId = "clap_lex";
          }
          {
            name = "strsim";
            packageId = "strsim 0.11.1";
            optional = true;
          }
          {
            name = "terminal_size";
            packageId = "terminal_size";
            optional = true;
          }
        ];
        features = {
          "color" = [ "dep:anstream" ];
          "debug" = [ "dep:backtrace" ];
          "default" = [ "std" "color" "help" "usage" "error-context" "suggestions" ];
          "std" = [ "anstyle/std" ];
          "suggestions" = [ "dep:strsim" "error-context" ];
          "unicode" = [ "dep:unicode-width" "dep:unicase" ];
          "unstable-doc" = [ "cargo" "wrap_help" "env" "unicode" "string" "unstable-ext" ];
          "unstable-styles" = [ "color" ];
          "unstable-v5" = [ "deprecated" ];
          "wrap_help" = [ "help" "dep:terminal_size" ];
        };
        resolvedDefaultFeatures = [ "color" "env" "error-context" "help" "std" "string" "suggestions" "usage" "wrap_help" ];
      };
      "clap_derive" = rec {
        crateName = "clap_derive";
        version = "4.5.32";
        edition = "2021";
        sha256 = "1mqcag8qapb5yhygg2hi153kzmbf7w5hqp3nl3fvl5cn4yp6l5q9";
        procMacro = true;
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];
        features = {
          "raw-deprecated" = [ "deprecated" ];
          "unstable-markdown" = [ "dep:pulldown-cmark" "dep:anstyle" ];
          "unstable-v5" = [ "deprecated" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "clap_lex" = rec {
        crateName = "clap_lex";
        version = "0.7.4";
        edition = "2021";
        sha256 = "19nwfls5db269js5n822vkc8dw0wjq2h1wf0hgr06ld2g52d2spl";

      };
      "clear_on_drop" = rec {
        crateName = "clear_on_drop";
        version = "0.2.5";
        edition = "2018";
        sha256 = "08vl9ykz9fsiy6iwc3px66mmv3nlvgx6d6dwzr4017wpyiiqll1q";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "nightly" = [ "no_cc" ];
        };
        resolvedDefaultFeatures = [ "no_cc" ];
      };
      "cli-commands" = rec {
        crateName = "cli-commands";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/cli/commands; };
        libName = "cli_commands";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "ed25519-zebra";
            packageId = "ed25519-zebra";
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "hex-literal";
            packageId = "hex-literal 1.0.0";
          }
          {
            name = "k256";
            packageId = "k256";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "pallet-address-associations";
            packageId = "pallet-address-associations";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "plutus";
            packageId = "plutus";
            usesDefaultFeatures = false;
          }
          {
            name = "plutus-datum-derive";
            packageId = "plutus-datum-derive";
            usesDefaultFeatures = false;
          }
          {
            name = "secp256k1";
            packageId = "secp256k1 0.30.0";
            usesDefaultFeatures = false;
            features = [ "std" "global-context" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-block-producer-metadata";
            packageId = "sp-block-producer-metadata";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-sidechain";
            packageId = "sp-sidechain";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "assert_cmd";
            packageId = "assert_cmd";
          }
          {
            name = "pretty_assertions";
            packageId = "pretty_assertions";
          }
        ];

      };
      "cloudabi" = rec {
        crateName = "cloudabi";
        version = "0.0.3";
        edition = "2015";
        sha256 = "0kxcg83jlihy0phnd2g8c2c303px3l2p3pkjz357ll6llnd5pz6x";
        libPath = "cloudabi.rs";
        authors = [
          "Nuxi (https://nuxi.nl/) and contributors"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
            optional = true;
          }
        ];
        features = {
          "bitflags" = [ "dep:bitflags" ];
          "default" = [ "bitflags" ];
        };
        resolvedDefaultFeatures = [ "bitflags" "default" ];
      };
      "codespan-reporting" = rec {
        crateName = "codespan-reporting";
        version = "0.12.0";
        edition = "2021";
        sha256 = "108g41xqzhr8fx8hlpy5qzmqq8ylldbj37wndkaqm34yy1d2wvgy";
        libName = "codespan_reporting";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "termcolor";
            packageId = "termcolor";
            optional = true;
          }
          {
            name = "unicode-width";
            packageId = "unicode-width 0.2.0";
          }
        ];
        features = {
          "default" = [ "std" "termcolor" ];
          "serde" = [ "dep:serde" ];
          "serialization" = [ "serde" ];
          "std" = [ "serde?/std" ];
          "termcolor" = [ "std" "dep:termcolor" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "termcolor" ];
      };
      "colorchoice" = rec {
        crateName = "colorchoice";
        version = "1.0.3";
        edition = "2021";
        sha256 = "1439m3r3jy3xqck8aa13q658visn71ki76qa93cy55wkmalwlqsv";

      };
      "colored" = rec {
        crateName = "colored";
        version = "3.0.0";
        edition = "2021";
        sha256 = "0plizddhxc4vgkzdbzky5zggyaqfrmyim2d0n6sb7py9j3nf1q7x";
        authors = [
          "Thomas Wickham <mackwic@gmail.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Console" ];
          }
        ];
        features = {
        };
      };
      "combine" = rec {
        crateName = "combine";
        version = "4.6.7";
        edition = "2018";
        sha256 = "1z8rh8wp59gf8k23ar010phgs0wgf5i8cx4fg01gwcnzfn5k0nms";
        authors = [
          "Markus Westerlind <marwes91@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "bytes_05" = [ "dep:bytes_05" ];
          "default" = [ "std" ];
          "futures-03" = [ "pin-project" "std" "futures-core-03" "futures-io-03" "pin-project-lite" ];
          "futures-core-03" = [ "dep:futures-core-03" ];
          "futures-io-03" = [ "dep:futures-io-03" ];
          "pin-project" = [ "pin-project-lite" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "regex" = [ "dep:regex" ];
          "std" = [ "memchr/std" "bytes" "alloc" ];
          "tokio" = [ "tokio-dep" "tokio-util/io" "futures-core-03" "pin-project-lite" ];
          "tokio-02" = [ "pin-project" "std" "tokio-02-dep" "futures-core-03" "pin-project-lite" "bytes_05" ];
          "tokio-02-dep" = [ "dep:tokio-02-dep" ];
          "tokio-03" = [ "pin-project" "std" "tokio-03-dep" "futures-core-03" "pin-project-lite" ];
          "tokio-03-dep" = [ "dep:tokio-03-dep" ];
          "tokio-dep" = [ "dep:tokio-dep" ];
          "tokio-util" = [ "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bytes" "default" "std" ];
      };
      "common-path" = rec {
        crateName = "common-path";
        version = "1.0.0";
        edition = "2015";
        sha256 = "00firjly5xpb5hhmivnnhwakr1cwbqv8ckzyj0vbxczl89czg0i3";
        libName = "common_path";
        authors = [
          "Paul Woolcock <paul@woolcock.us>"
        ];

      };
      "concurrent-queue" = rec {
        crateName = "concurrent-queue";
        version = "2.5.0";
        edition = "2021";
        sha256 = "0wrr3mzq2ijdkxwndhf79k952cp4zkz35ray8hvsxl96xrx1k82c";
        libName = "concurrent_queue";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Taiki Endo <te316e89@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "console" = rec {
        crateName = "console";
        version = "0.15.11";
        edition = "2021";
        sha256 = "1n5gmsjk6isbnw6qss043377kln20lfwlmdk3vswpwpr21dwnk05";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        dependencies = [
          {
            name = "encode_unicode";
            packageId = "encode_unicode";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width 0.2.0";
            optional = true;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Console" "Win32_Storage_FileSystem" "Win32_UI_Input_KeyboardAndMouse" ];
          }
        ];
        features = {
          "default" = [ "unicode-width" "ansi-parsing" ];
          "unicode-width" = [ "dep:unicode-width" ];
          "windows-console-colors" = [ "ansi-parsing" ];
        };
        resolvedDefaultFeatures = [ "ansi-parsing" "default" "unicode-width" ];
      };
      "const-hex" = rec {
        crateName = "const-hex";
        version = "1.14.0";
        edition = "2021";
        sha256 = "030nnsbd0pvkibpqh8pky3wabzhr30wwagvjy6l1ic1rp2x8a12b";
        libName = "const_hex";
        authors = [
          "DaniPopes <57450786+DaniPopes@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("x86" == target."arch" or null) || ("x86_64" == target."arch" or null));
          }
          {
            name = "hex";
            packageId = "hex";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "proptest";
            packageId = "proptest";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "__fuzzing" = [ "dep:proptest" "std" ];
          "alloc" = [ "hex?/alloc" "serde?/alloc" "proptest?/alloc" ];
          "default" = [ "std" ];
          "hex" = [ "dep:hex" ];
          "serde" = [ "hex?/serde" "dep:serde" ];
          "std" = [ "hex?/std" "serde?/std" "proptest?/std" "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "const-oid" = rec {
        crateName = "const-oid";
        version = "0.9.6";
        edition = "2021";
        sha256 = "1y0jnqaq7p2wvspnx7qj76m7hjcqpz73qzvr9l2p9n2s51vr6if2";
        libName = "const_oid";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
        };
      };
      "const-random" = rec {
        crateName = "const-random";
        version = "0.1.18";
        edition = "2018";
        sha256 = "0n8kqz3y82ks8znvz1mxn3a9hadca3amzf33gmi6dc3lzs103q47";
        libName = "const_random";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "const-random-macro";
            packageId = "const-random-macro";
          }
        ];

      };
      "const-random-macro" = rec {
        crateName = "const-random-macro";
        version = "0.1.16";
        edition = "2018";
        sha256 = "03iram4ijjjq9j5a7hbnmdngj8935wbsd0f5bm8yw2hblbr3kn7r";
        procMacro = true;
        libName = "const_random_macro";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [ "race" "alloc" ];
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            features = [ "shake" ];
          }
        ];

      };
      "const_format" = rec {
        crateName = "const_format";
        version = "0.2.34";
        edition = "2021";
        sha256 = "1pb3vx4k0bl3cy45fmba36hzds1jhkr8y9k3j5nnvm4abjb9fvqj";
        authors = [
          "rodrimati1992 <rodrimatt1985@gmail.com>"
        ];
        dependencies = [
          {
            name = "const_format_proc_macros";
            packageId = "const_format_proc_macros";
          }
        ];
        features = {
          "__debug" = [ "const_format_proc_macros/debug" ];
          "__inline_const_pat_tests" = [ "__test" "fmt" ];
          "__only_new_tests" = [ "__test" ];
          "all" = [ "fmt" "derive" "rust_1_64" "assert" ];
          "assert" = [ "assertc" ];
          "assertc" = [ "fmt" "assertcp" ];
          "assertcp" = [ "rust_1_51" ];
          "const_generics" = [ "rust_1_51" ];
          "constant_time_as_str" = [ "fmt" ];
          "derive" = [ "fmt" "const_format_proc_macros/derive" ];
          "fmt" = [ "rust_1_83" ];
          "konst" = [ "dep:konst" ];
          "more_str_macros" = [ "rust_1_64" ];
          "nightly_const_generics" = [ "const_generics" ];
          "rust_1_64" = [ "rust_1_51" "konst" "konst/rust_1_64" ];
          "rust_1_83" = [ "rust_1_64" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "const_format_proc_macros" = rec {
        crateName = "const_format_proc_macros";
        version = "0.2.34";
        edition = "2021";
        sha256 = "0i3pxxcl4xvwq4mlfg3csb4j0n6v0mhj07p6yk0vlvdirznc4mqx";
        procMacro = true;
        authors = [
          "rodrimati1992 <rodrimatt1985@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "all" = [ "derive" ];
          "debug" = [ "syn/extra-traits" ];
          "derive" = [ "syn" "syn/derive" "syn/printing" ];
          "syn" = [ "dep:syn" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "constant_time_eq" = rec {
        crateName = "constant_time_eq";
        version = "0.3.1";
        edition = "2021";
        sha256 = "19nwwczii762pwlsm7bpizgjg8hkg1kqi32b2g4rglijklsbhx3w";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        features = {
        };
      };
      "convert_case" = rec {
        crateName = "convert_case";
        version = "0.4.0";
        edition = "2018";
        sha256 = "03jaf1wrsyqzcaah9jf8l1iznvdw5mlsca2qghhzr9w27sddaib2";
        authors = [
          "David Purdum <purdum41@gmail.com>"
        ];
        features = {
          "rand" = [ "dep:rand" ];
          "random" = [ "rand" ];
        };
      };
      "core-foundation 0.10.0" = rec {
        crateName = "core-foundation";
        version = "0.10.0";
        edition = "2018";
        sha256 = "0qscay14s2rwkg8nd8ljhiaf149hj8sfy95d70zssy64r3jp2lmm";
        libName = "core_foundation";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = [ "link" ];
          "link" = [ "core-foundation-sys/link" ];
          "mac_os_10_7_support" = [ "core-foundation-sys/mac_os_10_7_support" ];
          "mac_os_10_8_features" = [ "core-foundation-sys/mac_os_10_8_features" ];
          "uuid" = [ "dep:uuid" ];
          "with-uuid" = [ "uuid" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "core-foundation 0.9.4" = rec {
        crateName = "core-foundation";
        version = "0.9.4";
        edition = "2018";
        sha256 = "13zvbbj07yk3b61b8fhwfzhy35535a583irf23vlcg59j7h9bqci";
        libName = "core_foundation";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "chrono" = [ "dep:chrono" ];
          "default" = [ "link" ];
          "link" = [ "core-foundation-sys/link" ];
          "mac_os_10_7_support" = [ "core-foundation-sys/mac_os_10_7_support" ];
          "mac_os_10_8_features" = [ "core-foundation-sys/mac_os_10_8_features" ];
          "uuid" = [ "dep:uuid" ];
          "with-chrono" = [ "chrono" ];
          "with-uuid" = [ "uuid" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "core-foundation-sys" = rec {
        crateName = "core-foundation-sys";
        version = "0.8.7";
        edition = "2018";
        sha256 = "12w8j73lazxmr1z0h98hf3z623kl8ms7g07jch7n4p8f9nwlhdkp";
        libName = "core_foundation_sys";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = [ "link" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "core2" = rec {
        crateName = "core2";
        version = "0.4.0";
        edition = "2018";
        sha256 = "01f5xv0kf3ds3xm7byg78hycbanb8zlpvsfv4j47y46n3bpsg6xl";
        authors = [
          "Brendan Molloy <brendan@bbqsrc.net>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "cpp_demangle" = rec {
        crateName = "cpp_demangle";
        version = "0.3.5";
        edition = "2015";
        crateBin = [];
        sha256 = "03vi33qz8x7lll0xd3acd3jp39nvzv174wg424qsb1nkm8z9bapf";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
          "Jim Blandy <jimb@red-bean.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "afl" = [ "dep:afl" ];
          "default" = [ "std" ];
          "fuzz" = [ "afl" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "cpufeatures" = rec {
        crateName = "cpufeatures";
        version = "0.2.17";
        edition = "2018";
        sha256 = "10023dnnaghhdl70xcds12fsx2b966sxbxjq5sxs49mvxqw5ivar";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-linux-android");
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("aarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("aarch64" == target."arch" or null) && ("apple" == target."vendor" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("loongarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
        ];

      };
      "cranelift-bforest" = rec {
        crateName = "cranelift-bforest";
        version = "0.95.1";
        edition = "2021";
        sha256 = "0w2frrg17kdccqnapvn7ygvsb76l77kd7ppj9bnci0mwjkxgnxqj";
        libName = "cranelift_bforest";
        authors = [
          "The Cranelift Project Developers"
        ];
        dependencies = [
          {
            name = "cranelift-entity";
            packageId = "cranelift-entity";
          }
        ];

      };
      "cranelift-codegen" = rec {
        crateName = "cranelift-codegen";
        version = "0.95.1";
        edition = "2021";
        sha256 = "081j3mk4dkwwfhznpc52pvisrc71iy4271y3xsd0w9xjscdc7s66";
        libName = "cranelift_codegen";
        authors = [
          "The Cranelift Project Developers"
        ];
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "cranelift-bforest";
            packageId = "cranelift-bforest";
          }
          {
            name = "cranelift-codegen-shared";
            packageId = "cranelift-codegen-shared";
          }
          {
            name = "cranelift-entity";
            packageId = "cranelift-entity";
          }
          {
            name = "gimli";
            packageId = "gimli 0.27.3";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "read" "std" "write" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.13.2";
            features = [ "raw" ];
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "regalloc2";
            packageId = "regalloc2 0.6.1";
            features = [ "checker" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = [ "union" ];
          }
          {
            name = "target-lexicon";
            packageId = "target-lexicon";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        buildDependencies = [
          {
            name = "cranelift-codegen-meta";
            packageId = "cranelift-codegen-meta";
          }
          {
            name = "cranelift-isle";
            packageId = "cranelift-isle";
          }
        ];
        features = {
          "all-arch" = [ "x86" "arm64" "s390x" "riscv64" ];
          "anyhow" = [ "dep:anyhow" ];
          "bincode" = [ "dep:bincode" ];
          "capstone" = [ "dep:capstone" ];
          "default" = [ "std" "unwind" "trace-log" ];
          "disas" = [ "anyhow" "capstone" ];
          "enable-serde" = [ "serde" "cranelift-entity/enable-serde" "regalloc2/enable-serde" "smallvec/serde" ];
          "gimli" = [ "dep:gimli" ];
          "incremental-cache" = [ "enable-serde" "bincode" "sha2" ];
          "isle-errors" = [ "cranelift-isle/fancy-errors" ];
          "serde" = [ "dep:serde" ];
          "sha2" = [ "dep:sha2" ];
          "souper-harvest" = [ "souper-ir" "souper-ir/stringify" ];
          "souper-ir" = [ "dep:souper-ir" ];
          "unwind" = [ "gimli" ];
        };
        resolvedDefaultFeatures = [ "default" "gimli" "std" "trace-log" "unwind" ];
      };
      "cranelift-codegen-meta" = rec {
        crateName = "cranelift-codegen-meta";
        version = "0.95.1";
        edition = "2021";
        sha256 = "1nn9qmvs4q3m71mxw209zln9rzdxdmh6n7v529pxdck21p1mmb68";
        libName = "cranelift_codegen_meta";
        authors = [
          "The Cranelift Project Developers"
        ];
        dependencies = [
          {
            name = "cranelift-codegen-shared";
            packageId = "cranelift-codegen-shared";
          }
        ];

      };
      "cranelift-codegen-shared" = rec {
        crateName = "cranelift-codegen-shared";
        version = "0.95.1";
        edition = "2021";
        sha256 = "1f286whpp4zmrhds3m17512igxahxgfw1gfrkssk8y14fsrvi0nx";
        libName = "cranelift_codegen_shared";
        authors = [
          "The Cranelift Project Developers"
        ];

      };
      "cranelift-entity" = rec {
        crateName = "cranelift-entity";
        version = "0.95.1";
        edition = "2021";
        sha256 = "1c30hqkgg7q8v5l4ib9ip5r7l0wr46svm29zwq2yadqv0qw9s2a0";
        libName = "cranelift_entity";
        authors = [
          "The Cranelift Project Developers"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "enable-serde" = [ "serde" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "enable-serde" "serde" ];
      };
      "cranelift-frontend" = rec {
        crateName = "cranelift-frontend";
        version = "0.95.1";
        edition = "2021";
        sha256 = "0bg860zfi488xq74yibmf5qb81wmqmg12d1w8sf0gqqa1afmv8k4";
        libName = "cranelift_frontend";
        authors = [
          "The Cranelift Project Developers"
        ];
        dependencies = [
          {
            name = "cranelift-codegen";
            packageId = "cranelift-codegen";
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = [ "union" ];
          }
          {
            name = "target-lexicon";
            packageId = "target-lexicon";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "core" = [ "hashbrown" "cranelift-codegen/core" ];
          "default" = [ "std" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "std" = [ "cranelift-codegen/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "cranelift-isle" = rec {
        crateName = "cranelift-isle";
        version = "0.95.1";
        edition = "2021";
        sha256 = "1fk98h6ld1cnk1xhh07adbxwix1bj54yr1wzbyysrr460iynmpl0";
        libName = "cranelift_isle";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "codespan-reporting" = [ "dep:codespan-reporting" ];
          "fancy-errors" = [ "codespan-reporting" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "cranelift-native" = rec {
        crateName = "cranelift-native";
        version = "0.95.1";
        edition = "2021";
        sha256 = "004vqzkz5lzhzc7wqi3r9sj0f33mjj57bq4cznrw809qw3h06sxv";
        libName = "cranelift_native";
        authors = [
          "The Cranelift Project Developers"
        ];
        dependencies = [
          {
            name = "cranelift-codegen";
            packageId = "cranelift-codegen";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (("s390x" == target."arch" or null) || ("riscv64" == target."arch" or null));
          }
          {
            name = "target-lexicon";
            packageId = "target-lexicon";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "core" = [ "cranelift-codegen/core" ];
          "default" = [ "std" ];
          "std" = [ "cranelift-codegen/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "cranelift-wasm" = rec {
        crateName = "cranelift-wasm";
        version = "0.95.1";
        edition = "2021";
        sha256 = "1b1p0z4p2fk72c9239jlnnpiipmkm3m7mpar3vcqm4ixk9420cpz";
        libName = "cranelift_wasm";
        authors = [
          "The Cranelift Project Developers"
        ];
        dependencies = [
          {
            name = "cranelift-codegen";
            packageId = "cranelift-codegen";
          }
          {
            name = "cranelift-entity";
            packageId = "cranelift-entity";
          }
          {
            name = "cranelift-frontend";
            packageId = "cranelift-frontend";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = [ "union" ];
          }
          {
            name = "wasmparser";
            packageId = "wasmparser";
          }
          {
            name = "wasmtime-types";
            packageId = "wasmtime-types";
          }
        ];
        features = {
          "core" = [ "hashbrown" "cranelift-codegen/core" "cranelift-frontend/core" ];
          "default" = [ "std" ];
          "enable-serde" = [ "serde" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "cranelift-codegen/std" "cranelift-frontend/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crc" = rec {
        crateName = "crc";
        version = "3.3.0";
        edition = "2021";
        sha256 = "0xg6yg57lbyzf69y8znq5gjb333w1fnlis2gnjg38blwffrx644p";
        authors = [
          "Rui Hu <code@mrhooray.com>"
          "Akhil Velagapudi <4@4khil.com>"
        ];
        dependencies = [
          {
            name = "crc-catalog";
            packageId = "crc-catalog";
          }
        ];

      };
      "crc-catalog" = rec {
        crateName = "crc-catalog";
        version = "2.4.0";
        edition = "2018";
        sha256 = "1xg7sz82w3nxp1jfn425fvn1clvbzb3zgblmxsyqpys0dckp9lqr";
        libName = "crc_catalog";
        authors = [
          "Akhil Velagapudi <akhilvelagapudi@gmail.com>"
        ];

      };
      "crc32fast" = rec {
        crateName = "crc32fast";
        version = "1.4.2";
        edition = "2015";
        sha256 = "1czp7vif73b8xslr3c9yxysmh9ws2r8824qda7j47ffs9pcnjxx9";
        authors = [
          "Sam Rijs <srijs@airpost.net>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-deque" = rec {
        crateName = "crossbeam-deque";
        version = "0.8.6";
        edition = "2021";
        sha256 = "0l9f1saqp1gn5qy0rxvkmz4m6n7fc0b3dbm6q1r5pmgpnyvi3lcx";
        libName = "crossbeam_deque";
        dependencies = [
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
            usesDefaultFeatures = false;
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "crossbeam-epoch/std" "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-epoch" = rec {
        crateName = "crossbeam-epoch";
        version = "0.9.18";
        edition = "2021";
        sha256 = "03j2np8llwf376m3fxqx859mgp9f83hj1w34153c7a9c7i5ar0jv";
        libName = "crossbeam_epoch";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "loom-crate" "crossbeam-utils/loom" ];
          "loom-crate" = [ "dep:loom-crate" ];
          "nightly" = [ "crossbeam-utils/nightly" ];
          "std" = [ "alloc" "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "crossbeam-queue" = rec {
        crateName = "crossbeam-queue";
        version = "0.3.12";
        edition = "2021";
        sha256 = "059igaxckccj6ndmg45d5yf7cm4ps46c18m21afq3pwiiz1bnn0g";
        libName = "crossbeam_queue";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "nightly" = [ "crossbeam-utils/nightly" ];
          "std" = [ "alloc" "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "crossbeam-utils" = rec {
        crateName = "crossbeam-utils";
        version = "0.8.21";
        edition = "2021";
        sha256 = "0a3aa2bmc8q35fb67432w16wvi54sfmb69rk9h5bhd18vw0c99fh";
        libName = "crossbeam_utils";
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossterm" = rec {
        crateName = "crossterm";
        version = "0.25.0";
        edition = "2021";
        sha256 = "0rsbkkhdf61aipc06b7vpl4cw3wnxz0miizp0ms3a5rcpq7nqkp6";
        authors = [
          "T. Post"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "crossterm_winapi";
            packageId = "crossterm_winapi";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "mio";
            packageId = "mio 0.8.11";
            target = { target, features }: (target."unix" or false);
            features = [ "os-poll" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "signal-hook";
            packageId = "signal-hook";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "signal-hook-mio";
            packageId = "signal-hook-mio";
            target = { target, features }: (target."unix" or false);
            features = [ "support-v0_8" ];
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "winuser" "winerror" ];
          }
        ];
        features = {
          "default" = [ "bracketed-paste" ];
          "event-stream" = [ "futures-core" ];
          "futures-core" = [ "dep:futures-core" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "bracketed-paste" "default" ];
      };
      "crossterm_winapi" = rec {
        crateName = "crossterm_winapi";
        version = "0.9.1";
        edition = "2018";
        sha256 = "0axbfb2ykbwbpf1hmxwpawwfs8wvmkcka5m561l7yp36ldi7rpdc";
        authors = [
          "T. Post"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "winbase" "consoleapi" "processenv" "handleapi" "synchapi" "impl-default" ];
          }
        ];

      };
      "crunchy" = rec {
        crateName = "crunchy";
        version = "0.2.3";
        edition = "2021";
        sha256 = "0aa9k4izp962qlsn5ndgw2zq62mizcpnkns8bxscgz3gqr35knj3";
        authors = [
          "Eira Fransham <jackefransham@gmail.com>"
        ];
        features = {
          "default" = [ "limit_128" ];
        };
        resolvedDefaultFeatures = [ "default" "limit_128" "std" ];
      };
      "crypto-bigint" = rec {
        crateName = "crypto-bigint";
        version = "0.5.5";
        edition = "2021";
        sha256 = "0xmbdff3g6ii5sbxjxc31xfkv9lrmyril4arh3dzckd4gjsjzj8d";
        libName = "crypto_bigint";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
            optional = true;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
          }
          {
            name = "subtle";
            packageId = "subtle 2.6.1";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            features = [ "std" ];
          }
        ];
        features = {
          "alloc" = [ "serdect?/alloc" ];
          "default" = [ "rand" ];
          "der" = [ "dep:der" ];
          "generic-array" = [ "dep:generic-array" ];
          "rand" = [ "rand_core/std" ];
          "rand_core" = [ "dep:rand_core" ];
          "rlp" = [ "dep:rlp" ];
          "serde" = [ "dep:serdect" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "generic-array" "rand_core" "zeroize" ];
      };
      "crypto-common" = rec {
        crateName = "crypto-common";
        version = "0.1.6";
        edition = "2018";
        sha256 = "1cvby95a6xg7kxdz5ln3rl9xh66nz66w46mm3g56ri1z5x815yqv";
        libName = "crypto_common";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
            features = [ "more_lengths" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "getrandom" = [ "rand_core/getrandom" ];
          "rand_core" = [ "dep:rand_core" ];
        };
        resolvedDefaultFeatures = [ "getrandom" "rand_core" "std" ];
      };
      "crypto-mac 0.7.0" = rec {
        crateName = "crypto-mac";
        version = "0.7.0";
        edition = "2015";
        sha256 = "1rbrq6qy9dl0pj4ym2zy33miaaa8vpzdss60p9bdb58xy46l0d24";
        libName = "crypto_mac";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.12.4";
          }
          {
            name = "subtle";
            packageId = "subtle 1.0.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "dev" = [ "blobby" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "crypto-mac 0.8.0" = rec {
        crateName = "crypto-mac";
        version = "0.8.0";
        edition = "2018";
        sha256 = "1axfs4zmy74rn9666p92j7nmcv11zdp2d51yrppc2dv26cqa715m";
        libName = "crypto_mac";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
          }
          {
            name = "subtle";
            packageId = "subtle 2.6.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "dev" = [ "blobby" ];
        };
      };
      "cryptoxide" = rec {
        crateName = "cryptoxide";
        version = "0.4.4";
        edition = "2018";
        sha256 = "03bnrnbdmbrqj2lwxfkvfqnjnm6bx08aclrmbl2ibf2v1a1fhb1q";
        authors = [
          "Vincent Hanquez <vincent@typed.io>"
          "Nicolas Di Prima <nicolas@prime-type.co.uk>"
          "The Rust-Crypto Project Developers"
        ];
        features = {
          "argon2" = [ "blake2" ];
          "blake2" = [ "digest" "mac" ];
          "default" = [ "argon2" "blake2" "sha1" "sha2" "sha3" "ripemd160" "chacha" "salsa" "hkdf" "hmac" "pbkdf2" "poly1305" "scrypt" "curve25519" "ed25519" "x25519" ];
          "ed25519" = [ "sha2" "curve25519" ];
          "hkdf" = [ "digest" "hmac" ];
          "hmac" = [ "digest" "mac" ];
          "mac" = [ "digest" ];
          "pbkdf2" = [ "mac" ];
          "poly1305" = [ "mac" ];
          "ripemd160" = [ "digest" ];
          "scrypt" = [ "pbkdf2" "mac" "hmac" ];
          "sha1" = [ "digest" ];
          "sha2" = [ "digest" ];
          "sha3" = [ "digest" ];
          "x25519" = [ "curve25519" ];
        };
        resolvedDefaultFeatures = [ "argon2" "blake2" "chacha" "curve25519" "default" "digest" "ed25519" "hkdf" "hmac" "mac" "pbkdf2" "poly1305" "ripemd160" "salsa" "scrypt" "sha1" "sha2" "sha3" "x25519" ];
      };
      "ctor" = rec {
        crateName = "ctor";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1d87fvd1jq3mgql8xqcbhqji2zca09hx8cnaaa01i8d6bck5ywx4";
        authors = [
          "Matt Mastracci <matthew@mastracci.com>"
        ];
        dependencies = [
          {
            name = "ctor-proc-macro";
            packageId = "ctor-proc-macro";
            optional = true;
          }
          {
            name = "dtor";
            packageId = "dtor";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "__no_warn_on_missing_unsafe" = [ "dtor?/__no_warn_on_missing_unsafe" ];
          "default" = [ "dtor" "proc_macro" "__no_warn_on_missing_unsafe" ];
          "dtor" = [ "dep:dtor" ];
          "proc_macro" = [ "dep:ctor-proc-macro" "dtor?/proc_macro" ];
          "used_linker" = [ "dtor?/used_linker" ];
        };
        resolvedDefaultFeatures = [ "__no_warn_on_missing_unsafe" "default" "dtor" "proc_macro" ];
      };
      "ctor-proc-macro" = rec {
        crateName = "ctor-proc-macro";
        version = "0.0.5";
        edition = "2021";
        sha256 = "0kcwswgqir8mdrhsskksxp1ipfi6wksssmvfz42d3zcf3pv1l8ag";
        procMacro = true;
        libName = "ctor_proc_macro";
        authors = [
          "Matt Mastracci <matthew@mastracci.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "ctr" = rec {
        crateName = "ctr";
        version = "0.9.2";
        edition = "2021";
        sha256 = "0d88b73waamgpfjdml78icxz45d95q7vi2aqa604b0visqdfws83";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cipher";
            packageId = "cipher 0.4.4";
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher 0.4.4";
            features = [ "dev" ];
          }
        ];
        features = {
          "alloc" = [ "cipher/alloc" ];
          "block-padding" = [ "cipher/block-padding" ];
          "std" = [ "cipher/std" "alloc" ];
          "zeroize" = [ "cipher/zeroize" ];
        };
      };
      "curve25519-dalek" = rec {
        crateName = "curve25519-dalek";
        version = "4.1.3";
        edition = "2021";
        sha256 = "1gmjb9dsknrr8lypmhkyjd67p1arb8mbfamlwxm7vph38my8pywp";
        libName = "curve25519_dalek";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: ("x86_64" == target."arch" or null);
          }
          {
            name = "curve25519-dalek-derive";
            packageId = "curve25519-dalek-derive";
            target = { target, features }: ((!("fiat" == target."curve25519_dalek_backend" or null)) && (!("serial" == target."curve25519_dalek_backend" or null)) && ("x86_64" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "fiat-crypto";
            packageId = "fiat-crypto";
            usesDefaultFeatures = false;
            target = { target, features }: ("fiat" == target."curve25519_dalek_backend" or null);
          }
          {
            name = "subtle";
            packageId = "subtle 2.6.1";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "alloc" = [ "zeroize?/alloc" ];
          "default" = [ "alloc" "precomputed-tables" "zeroize" ];
          "digest" = [ "dep:digest" ];
          "ff" = [ "dep:ff" ];
          "group" = [ "dep:group" "rand_core" ];
          "group-bits" = [ "group" "ff/bits" ];
          "rand_core" = [ "dep:rand_core" ];
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "digest" "legacy_compatibility" "precomputed-tables" "zeroize" ];
      };
      "curve25519-dalek-derive" = rec {
        crateName = "curve25519-dalek-derive";
        version = "0.1.1";
        edition = "2021";
        sha256 = "1cry71xxrr0mcy5my3fb502cwfxy6822k4pm19cwrilrg7hq4s7l";
        procMacro = true;
        libName = "curve25519_dalek_derive";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "cxx" = rec {
        crateName = "cxx";
        version = "1.0.158";
        edition = "2021";
        links = "cxxbridge1";
        sha256 = "0hfp54s6snhdp2g00sx8i6zd99nkwjgkrf2h9jkgzxvkkkraf7m7";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "cxxbridge-macro";
            packageId = "cxxbridge-macro";
          }
          {
            name = "foldhash";
            packageId = "foldhash";
            usesDefaultFeatures = false;
          }
          {
            name = "link-cplusplus";
            packageId = "link-cplusplus";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "cxxbridge-flags";
            packageId = "cxxbridge-flags";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "c++14" = [ "cxxbridge-flags/c++14" ];
          "c++17" = [ "cxxbridge-flags/c++17" ];
          "c++20" = [ "cxxbridge-flags/c++20" ];
          "default" = [ "std" "cxxbridge-flags/default" ];
          "std" = [ "alloc" "foldhash/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "cxx-build" = rec {
        crateName = "cxx-build";
        version = "1.0.158";
        edition = "2021";
        sha256 = "1rvzg4327g4vkxp2vxc5zjdsiq6gsdbn2wll6dqwyvfnc4k27a1n";
        libName = "cxx_build";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "codespan-reporting";
            packageId = "codespan-reporting";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
            features = [ "span-locations" ];
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "scratch";
            packageId = "scratch";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "full" "parsing" "printing" ];
          }
        ];
        features = {
          "parallel" = [ "cc/parallel" ];
        };
        resolvedDefaultFeatures = [ "parallel" ];
      };
      "cxxbridge-flags" = rec {
        crateName = "cxxbridge-flags";
        version = "1.0.158";
        edition = "2021";
        sha256 = "1r5q9whyjp4j0s6v75n2fkjyh7545rp8gaabwhd9hxn1h70njby4";
        libName = "cxxbridge_flags";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "cxxbridge-macro" = rec {
        crateName = "cxxbridge-macro";
        version = "1.0.158";
        edition = "2021";
        sha256 = "1a35nnpi2yzqjfhl9r3f8b68429vpz62kpw7h520j1vy8vagbbwg";
        procMacro = true;
        libName = "cxxbridge_macro";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];
        features = {
          "clang-ast" = [ "dep:clang-ast" ];
          "experimental-enum-variants-from-header" = [ "clang-ast" "flate2" "memmap" "serde" "serde_derive" "serde_json" ];
          "flate2" = [ "dep:flate2" ];
          "memmap" = [ "dep:memmap" ];
          "serde" = [ "dep:serde" ];
          "serde_derive" = [ "dep:serde_derive" ];
          "serde_json" = [ "dep:serde_json" ];
        };
      };
      "darling" = rec {
        crateName = "darling";
        version = "0.13.4";
        edition = "2018";
        sha256 = "0g25pad4mhq7315mw9n4wpg8j3mwyhwvr541kgdl0aar1j2ra7d0";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "darling_macro";
            packageId = "darling_macro";
          }
        ];
        features = {
          "default" = [ "suggestions" ];
          "diagnostics" = [ "darling_core/diagnostics" ];
          "suggestions" = [ "darling_core/suggestions" ];
        };
        resolvedDefaultFeatures = [ "default" "suggestions" ];
      };
      "darling_core" = rec {
        crateName = "darling_core";
        version = "0.13.4";
        edition = "2018";
        sha256 = "046n83f9jpszlngpjxkqi39ayzxf5a35q673c69jr1dn0ylnb7c5";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "ident_case";
            packageId = "ident_case";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "strsim";
            packageId = "strsim 0.10.0";
            optional = true;
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "extra-traits" ];
          }
        ];
        features = {
          "strsim" = [ "dep:strsim" ];
          "suggestions" = [ "strsim" ];
        };
        resolvedDefaultFeatures = [ "strsim" "suggestions" ];
      };
      "darling_macro" = rec {
        crateName = "darling_macro";
        version = "0.13.4";
        edition = "2018";
        sha256 = "0d8q8ibmsb1yzby6vwgh2wx892jqqfv9clwhpm19rprvz1wjd5ww";
        procMacro = true;
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "dashmap" = rec {
        crateName = "dashmap";
        version = "5.5.3";
        edition = "2018";
        sha256 = "0miqnlxi501vfbv6mw5jbmzgnj0wjrch3p4abvpd59s9v30lg1wp";
        authors = [
          "Acrimon <joel.wejdenstal@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            usesDefaultFeatures = false;
          }
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core 0.9.10";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "inline" = [ "hashbrown/inline-more" ];
          "rayon" = [ "dep:rayon" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "data-encoding" = rec {
        crateName = "data-encoding";
        version = "2.9.0";
        edition = "2018";
        sha256 = "0xm46371aw613ghc12ay4vsnn49hpcmcwlijnqy8lbp2bpd308ra";
        libName = "data_encoding";
        authors = [
          "Julien Cretin <git@ia0.eu>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "data-encoding-macro" = rec {
        crateName = "data-encoding-macro";
        version = "0.1.18";
        edition = "2018";
        sha256 = "0gb7xr2a7gg62bfmkg32kvcwhnmx24v6i1d1488z00h1xab6rkj7";
        libName = "data_encoding_macro";
        authors = [
          "Julien Cretin <cretin@google.com>"
        ];
        dependencies = [
          {
            name = "data-encoding";
            packageId = "data-encoding";
            usesDefaultFeatures = false;
          }
          {
            name = "data-encoding-macro-internal";
            packageId = "data-encoding-macro-internal";
          }
        ];

      };
      "data-encoding-macro-internal" = rec {
        crateName = "data-encoding-macro-internal";
        version = "0.1.16";
        edition = "2018";
        sha256 = "0xhrbiib486iggdzlcmpi13xvd7dqdd4zacdi940b6d6vbp2n5ld";
        procMacro = true;
        libName = "data_encoding_macro_internal";
        authors = [
          "Julien Cretin <cretin@google.com>"
        ];
        dependencies = [
          {
            name = "data-encoding";
            packageId = "data-encoding";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "parsing" "proc-macro" ];
          }
        ];

      };
      "db-sync-sqlx" = rec {
        crateName = "db-sync-sqlx";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/utils/db-sync-sqlx; };
        libName = "db_sync_sqlx";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sqlx";
            packageId = "sqlx";
            usesDefaultFeatures = false;
            features = [ "runtime-tokio-rustls" "postgres" "macros" "chrono" "migrate" "bigdecimal" ];
          }
        ];

      };
      "der" = rec {
        crateName = "der";
        version = "0.7.10";
        edition = "2021";
        sha256 = "1jyxacyxdx6mxbkfw99jz59dzvcd9k17rq01a7xvn1dr6wl87hg7";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "const-oid";
            packageId = "const-oid";
            optional = true;
          }
          {
            name = "pem-rfc7468";
            packageId = "pem-rfc7468";
            optional = true;
            features = [ "alloc" ];
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "zeroize?/alloc" ];
          "arbitrary" = [ "dep:arbitrary" "const-oid?/arbitrary" "std" ];
          "bytes" = [ "dep:bytes" "alloc" ];
          "derive" = [ "dep:der_derive" ];
          "flagset" = [ "dep:flagset" ];
          "oid" = [ "dep:const-oid" ];
          "pem" = [ "dep:pem-rfc7468" "alloc" "zeroize" ];
          "std" = [ "alloc" ];
          "time" = [ "dep:time" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "oid" "pem" "std" "zeroize" ];
      };
      "der-parser 10.0.0" = rec {
        crateName = "der-parser";
        version = "10.0.0";
        edition = "2018";
        sha256 = "19n13gjidjcbj23ps6fww322zx8mz4kfs4cvsd6kqnjx84b51nh7";
        libName = "der_parser";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "asn1-rs";
            packageId = "asn1-rs 0.7.1";
          }
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "nom";
            packageId = "nom";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
            optional = true;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "rusticata-macros";
            packageId = "rusticata-macros";
          }
        ];
        features = {
          "as_bitvec" = [ "bitvec" ];
          "bigint" = [ "num-bigint" ];
          "bitvec" = [ "dep:bitvec" ];
          "cookie-factory" = [ "dep:cookie-factory" ];
          "default" = [ "std" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "serialize" = [ "std" "cookie-factory" ];
        };
        resolvedDefaultFeatures = [ "bigint" "default" "num-bigint" "std" ];
      };
      "der-parser 9.0.0" = rec {
        crateName = "der-parser";
        version = "9.0.0";
        edition = "2018";
        sha256 = "0lxmykajggvaq5mvpm2avgzwib4n9nyxii0kqaz2d5k88g3abl2w";
        libName = "der_parser";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "asn1-rs";
            packageId = "asn1-rs 0.6.2";
          }
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "nom";
            packageId = "nom";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
            optional = true;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "rusticata-macros";
            packageId = "rusticata-macros";
          }
        ];
        features = {
          "bigint" = [ "num-bigint" ];
          "cookie-factory" = [ "dep:cookie-factory" ];
          "default" = [ "std" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "serialize" = [ "std" "cookie-factory" ];
        };
        resolvedDefaultFeatures = [ "bigint" "default" "num-bigint" "std" ];
      };
      "deranged" = rec {
        crateName = "deranged";
        version = "0.4.0";
        edition = "2021";
        sha256 = "13h6skwk411wzhf1l9l7d3yz5y6vg9d7s3dwhhb4a942r88nm7lw";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];
        dependencies = [
          {
            name = "powerfmt";
            packageId = "powerfmt";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "macros" = [ "dep:deranged-macros" ];
          "num" = [ "dep:num-traits" ];
          "powerfmt" = [ "dep:powerfmt" ];
          "quickcheck" = [ "dep:quickcheck" "alloc" ];
          "rand" = [ "rand08" "rand09" ];
          "rand08" = [ "dep:rand08" ];
          "rand09" = [ "dep:rand09" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "powerfmt" "serde" "std" ];
      };
      "derivative" = rec {
        crateName = "derivative";
        version = "2.2.0";
        edition = "2015";
        sha256 = "02vpb81wisk2zh1d5f44szzxamzinqgq2k8ydrfjj2wwkrgdvhzw";
        procMacro = true;
        authors = [
          "mcarton <cartonmartin+git@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "visit" "extra-traits" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "use_core" ];
      };
      "derive-new" = rec {
        crateName = "derive-new";
        version = "0.7.0";
        edition = "2021";
        sha256 = "1k5y4lrj182n86zjb3q0rkajgfqazamjzinsi7prw616yi88vp1c";
        procMacro = true;
        libName = "derive_new";
        authors = [
          "Nick Cameron <nrc@ncameron.org>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "parsing" ];
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "derive-syn-parse" = rec {
        crateName = "derive-syn-parse";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0qjplkxiia1b8yaghv3q1lm93862l5arlkbs95a0wz1b2gl7qpfn";
        procMacro = true;
        libName = "derive_syn_parse";
        authors = [
          "sharnoff <git@sharnoff.io>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "derive" "parsing" ];
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "extra-traits" ];
          }
        ];
        features = {
          "full" = [ "syn/full" ];
        };
      };
      "derive-where" = rec {
        crateName = "derive-where";
        version = "1.4.0";
        edition = "2021";
        sha256 = "00kr3npm8n8fgpbqd5glmfghq84lk2ik92d2vi0sqg5xsj92cgz7";
        procMacro = true;
        libName = "derive_where";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "derive" "extra-traits" "full" "parsing" "printing" ];
          }
        ];
        features = {
          "zeroize-on-drop" = [ "zeroize" ];
        };
      };
      "derive_more 0.99.20" = rec {
        crateName = "derive_more";
        version = "0.99.20";
        edition = "2018";
        sha256 = "0zvz94kbc5d4r817wni1l7xk8f289nhf73vqk677p5rxlij4pnvf";
        procMacro = true;
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "convert_case";
            packageId = "convert_case";
            optional = true;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
            optional = true;
          }
        ];
        features = {
          "convert_case" = [ "dep:convert_case" ];
          "default" = [ "add_assign" "add" "as_mut" "as_ref" "constructor" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "iterator" "mul_assign" "mul" "not" "sum" "try_into" "is_variant" "unwrap" ];
          "display" = [ "syn/extra-traits" ];
          "error" = [ "syn/extra-traits" ];
          "from" = [ "syn/extra-traits" ];
          "generate-parsing-rs" = [ "peg" ];
          "into" = [ "syn/extra-traits" ];
          "is_variant" = [ "convert_case" ];
          "mul" = [ "syn/extra-traits" ];
          "mul_assign" = [ "syn/extra-traits" ];
          "not" = [ "syn/extra-traits" ];
          "peg" = [ "dep:peg" ];
          "rustc_version" = [ "dep:rustc_version" ];
          "testing-helpers" = [ "rustc_version" ];
          "try_into" = [ "syn/extra-traits" ];
          "unwrap" = [ "convert_case" "rustc_version" ];
        };
        resolvedDefaultFeatures = [ "add" "add_assign" "as_mut" "as_ref" "constructor" "convert_case" "default" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "is_variant" "iterator" "mul" "mul_assign" "not" "rustc_version" "sum" "try_into" "unwrap" ];
      };
      "derive_more 1.0.0" = rec {
        crateName = "derive_more";
        version = "1.0.0";
        edition = "2021";
        sha256 = "01cd8pskdjg10dvfchi6b8a9pa1ja1ic0kbn45dl8jdyrfwrk6sa";
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "derive_more-impl";
            packageId = "derive_more-impl 1.0.0";
          }
        ];
        features = {
          "add" = [ "derive_more-impl/add" ];
          "add_assign" = [ "derive_more-impl/add_assign" ];
          "as_ref" = [ "derive_more-impl/as_ref" ];
          "constructor" = [ "derive_more-impl/constructor" ];
          "debug" = [ "derive_more-impl/debug" ];
          "default" = [ "std" ];
          "deref" = [ "derive_more-impl/deref" ];
          "deref_mut" = [ "derive_more-impl/deref_mut" ];
          "display" = [ "derive_more-impl/display" ];
          "error" = [ "derive_more-impl/error" ];
          "from" = [ "derive_more-impl/from" ];
          "from_str" = [ "derive_more-impl/from_str" ];
          "full" = [ "add" "add_assign" "as_ref" "constructor" "debug" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "is_variant" "mul" "mul_assign" "not" "sum" "try_from" "try_into" "try_unwrap" "unwrap" ];
          "index" = [ "derive_more-impl/index" ];
          "index_mut" = [ "derive_more-impl/index_mut" ];
          "into" = [ "derive_more-impl/into" ];
          "into_iterator" = [ "derive_more-impl/into_iterator" ];
          "is_variant" = [ "derive_more-impl/is_variant" ];
          "mul" = [ "derive_more-impl/mul" ];
          "mul_assign" = [ "derive_more-impl/mul_assign" ];
          "not" = [ "derive_more-impl/not" ];
          "sum" = [ "derive_more-impl/sum" ];
          "testing-helpers" = [ "derive_more-impl/testing-helpers" "dep:rustc_version" ];
          "try_from" = [ "derive_more-impl/try_from" ];
          "try_into" = [ "derive_more-impl/try_into" ];
          "try_unwrap" = [ "derive_more-impl/try_unwrap" ];
          "unwrap" = [ "derive_more-impl/unwrap" ];
        };
        resolvedDefaultFeatures = [ "from" ];
      };
      "derive_more 2.0.1" = rec {
        crateName = "derive_more";
        version = "2.0.1";
        edition = "2021";
        sha256 = "0y3n97cc7rsvgnj211p92y1ppzh6jzvq5kvk6340ghkhfp7l4ch9";
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "derive_more-impl";
            packageId = "derive_more-impl 2.0.1";
          }
        ];
        features = {
          "add" = [ "derive_more-impl/add" ];
          "add_assign" = [ "derive_more-impl/add_assign" ];
          "as_ref" = [ "derive_more-impl/as_ref" ];
          "constructor" = [ "derive_more-impl/constructor" ];
          "debug" = [ "derive_more-impl/debug" ];
          "default" = [ "std" ];
          "deref" = [ "derive_more-impl/deref" ];
          "deref_mut" = [ "derive_more-impl/deref_mut" ];
          "display" = [ "derive_more-impl/display" ];
          "error" = [ "derive_more-impl/error" ];
          "from" = [ "derive_more-impl/from" ];
          "from_str" = [ "derive_more-impl/from_str" ];
          "full" = [ "add" "add_assign" "as_ref" "constructor" "debug" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "is_variant" "mul" "mul_assign" "not" "sum" "try_from" "try_into" "try_unwrap" "unwrap" ];
          "index" = [ "derive_more-impl/index" ];
          "index_mut" = [ "derive_more-impl/index_mut" ];
          "into" = [ "derive_more-impl/into" ];
          "into_iterator" = [ "derive_more-impl/into_iterator" ];
          "is_variant" = [ "derive_more-impl/is_variant" ];
          "mul" = [ "derive_more-impl/mul" ];
          "mul_assign" = [ "derive_more-impl/mul_assign" ];
          "not" = [ "derive_more-impl/not" ];
          "sum" = [ "derive_more-impl/sum" ];
          "testing-helpers" = [ "derive_more-impl/testing-helpers" "dep:rustc_version" ];
          "try_from" = [ "derive_more-impl/try_from" ];
          "try_into" = [ "derive_more-impl/try_into" ];
          "try_unwrap" = [ "derive_more-impl/try_unwrap" ];
          "unwrap" = [ "derive_more-impl/unwrap" ];
        };
        resolvedDefaultFeatures = [ "from" "from_str" "into" ];
      };
      "derive_more-impl 1.0.0" = rec {
        crateName = "derive_more-impl";
        version = "1.0.0";
        edition = "2021";
        sha256 = "08mxyd456ygk68v5nfn4dyisn82k647w9ri2jl19dqpvmnp30wyb";
        procMacro = true;
        libName = "derive_more_impl";
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];
        features = {
          "as_ref" = [ "syn/extra-traits" "syn/visit" ];
          "debug" = [ "syn/extra-traits" "dep:unicode-xid" ];
          "display" = [ "syn/extra-traits" "dep:unicode-xid" ];
          "error" = [ "syn/extra-traits" ];
          "from" = [ "syn/extra-traits" ];
          "full" = [ "add" "add_assign" "as_ref" "constructor" "debug" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "is_variant" "mul" "mul_assign" "not" "sum" "try_from" "try_into" "try_unwrap" "unwrap" ];
          "into" = [ "syn/extra-traits" ];
          "is_variant" = [ "dep:convert_case" ];
          "mul" = [ "syn/extra-traits" ];
          "mul_assign" = [ "syn/extra-traits" ];
          "not" = [ "syn/extra-traits" ];
          "testing-helpers" = [ "dep:rustc_version" ];
          "try_into" = [ "syn/extra-traits" ];
          "try_unwrap" = [ "dep:convert_case" ];
          "unwrap" = [ "dep:convert_case" ];
        };
        resolvedDefaultFeatures = [ "default" "from" ];
      };
      "derive_more-impl 2.0.1" = rec {
        crateName = "derive_more-impl";
        version = "2.0.1";
        edition = "2021";
        sha256 = "1wqxcb7d5lzvpplz9szp4rwy1r23f5wmixz0zd2vcjscqknji9mx";
        procMacro = true;
        libName = "derive_more_impl";
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];
        features = {
          "as_ref" = [ "syn/extra-traits" "syn/visit" ];
          "debug" = [ "syn/extra-traits" "dep:unicode-xid" ];
          "display" = [ "syn/extra-traits" "dep:unicode-xid" ];
          "error" = [ "syn/extra-traits" ];
          "from" = [ "syn/extra-traits" ];
          "full" = [ "add" "add_assign" "as_ref" "constructor" "debug" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "is_variant" "mul" "mul_assign" "not" "sum" "try_from" "try_into" "try_unwrap" "unwrap" ];
          "into" = [ "syn/extra-traits" ];
          "is_variant" = [ "dep:convert_case" ];
          "mul" = [ "syn/extra-traits" ];
          "mul_assign" = [ "syn/extra-traits" ];
          "not" = [ "syn/extra-traits" ];
          "testing-helpers" = [ "dep:rustc_version" ];
          "try_into" = [ "syn/extra-traits" ];
          "try_unwrap" = [ "dep:convert_case" ];
          "unwrap" = [ "dep:convert_case" ];
        };
        resolvedDefaultFeatures = [ "default" "from" "from_str" "into" ];
      };
      "destructure_traitobject" = rec {
        crateName = "destructure_traitobject";
        version = "0.2.0";
        edition = "2015";
        sha256 = "1ir5x9f5zksr1fs788jy5g2hyyc2hnnx7kwi87wd451wd5apb1rw";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
          "Steven Fackler <sfackler@gmail.com>"
          "Alexander Regueiro <alexreg@me.com>"
          "Philip Peterson <philip.c.peterson@gmail.com>"
        ];

      };
      "diff" = rec {
        crateName = "diff";
        version = "0.1.13";
        edition = "2015";
        sha256 = "1j0nzjxci2zqx63hdcihkp0a4dkdmzxd7my4m7zk6cjyfy34j9an";
        authors = [
          "Utkarsh Kukreti <utkarshkukreti@gmail.com>"
        ];

      };
      "difflib" = rec {
        crateName = "difflib";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1s7byq4d7jgf2hcp2lcqxi2piqwl8xqlharfbi8kf90n8csy7131";
        authors = [
          "Dima Kudosh <dimakudosh@gmail.com>"
        ];

      };
      "digest 0.10.7" = rec {
        crateName = "digest";
        version = "0.10.7";
        edition = "2018";
        sha256 = "14p2n6ih29x81akj097lvz7wi9b6b9hvls0lwrv7b6xwyy0s5ncy";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer 0.10.4";
            optional = true;
          }
          {
            name = "const-oid";
            packageId = "const-oid";
            optional = true;
          }
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "subtle";
            packageId = "subtle 2.6.1";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "block-buffer" = [ "dep:block-buffer" ];
          "const-oid" = [ "dep:const-oid" ];
          "core-api" = [ "block-buffer" ];
          "default" = [ "core-api" ];
          "dev" = [ "blobby" ];
          "mac" = [ "subtle" ];
          "oid" = [ "const-oid" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [ "alloc" "crypto-common/std" ];
          "subtle" = [ "dep:subtle" ];
        };
        resolvedDefaultFeatures = [ "alloc" "block-buffer" "const-oid" "core-api" "default" "mac" "oid" "std" "subtle" ];
      };
      "digest 0.8.1" = rec {
        crateName = "digest";
        version = "0.8.1";
        edition = "2015";
        sha256 = "1madjl27f3kj5ql7kwgvb9c8b7yb7bv7yfgx7rqzj4i3fp4cil7k";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.12.4";
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "dev" = [ "blobby" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "digest 0.9.0" = rec {
        crateName = "digest";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0rmhvk33rgvd6ll71z8sng91a52rw14p0drjn1da0mqa138n1pfk";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "dev" = [ "blobby" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "directories" = rec {
        crateName = "directories";
        version = "5.0.1";
        edition = "2015";
        sha256 = "0dba6xzk79s1clqzxh2qlgzk3lmvvks1lzzjhhi3hd70hhxifjcs";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "dirs-sys";
            packageId = "dirs-sys";
          }
        ];

      };
      "directories-next" = rec {
        crateName = "directories-next";
        version = "2.0.0";
        edition = "2018";
        sha256 = "1g1vq8d8mv0vp0l317gh9y46ipqg2fxjnbc7lnjhwqbsv4qf37ik";
        libName = "directories_next";
        authors = [
          "The @xdg-rs members"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "dirs-sys-next";
            packageId = "dirs-sys-next";
          }
        ];

      };
      "dirs" = rec {
        crateName = "dirs";
        version = "5.0.1";
        edition = "2015";
        sha256 = "0992xk5vx75b2x91nw9ssb51mpl8x73j9rxmpi96cryn0ffmmi24";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "dirs-sys";
            packageId = "dirs-sys";
          }
        ];

      };
      "dirs-sys" = rec {
        crateName = "dirs-sys";
        version = "0.4.1";
        edition = "2015";
        sha256 = "071jy0pvaad9lsa6mzawxrh7cmr7hsmsdxwzm7jzldfkrfjha3sj";
        libName = "dirs_sys";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "option-ext";
            packageId = "option-ext";
          }
          {
            name = "redox_users";
            packageId = "redox_users";
            usesDefaultFeatures = false;
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_UI_Shell" "Win32_Foundation" "Win32_Globalization" "Win32_System_Com" ];
          }
        ];

      };
      "dirs-sys-next" = rec {
        crateName = "dirs-sys-next";
        version = "0.1.2";
        edition = "2018";
        sha256 = "0kavhavdxv4phzj4l0psvh55hszwnr0rcz8sxbvx20pyqi2a3gaf";
        libName = "dirs_sys_next";
        authors = [
          "The @xdg-rs members"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_users";
            packageId = "redox_users";
            usesDefaultFeatures = false;
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "knownfolders" "objbase" "shlobj" "winbase" "winerror" ];
          }
        ];

      };
      "displaydoc" = rec {
        crateName = "displaydoc";
        version = "0.2.5";
        edition = "2021";
        sha256 = "1q0alair462j21iiqwrr21iabkfnb13d6x5w95lkdg21q2xrqdlp";
        procMacro = true;
        authors = [
          "Jane Lusby <jlusby@yaah.dev>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "doc-comment" = rec {
        crateName = "doc-comment";
        version = "0.3.3";
        edition = "2015";
        sha256 = "043sprsf3wl926zmck1bm7gw0jq50mb76lkpk49vasfr6ax1p97y";
        libName = "doc_comment";
        authors = [
          "Guillaume Gomez <guillaume1.gomez@gmail.com>"
        ];
        features = {
        };
      };
      "docify" = rec {
        crateName = "docify";
        version = "0.2.9";
        edition = "2021";
        sha256 = "15jq58njb2bpq2dsj5vny4z4bqda2w5w3p1d8dhg1j1p30mvcwm7";
        authors = [
          "sam0x17"
        ];
        dependencies = [
          {
            name = "docify_macros";
            packageId = "docify_macros";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "docify_macros" = rec {
        crateName = "docify_macros";
        version = "0.2.9";
        edition = "2021";
        sha256 = "1xszr6j2ydmpidri3rlxw2spnrjsyfdv36aag0a2lihakcjbxrk0";
        procMacro = true;
        authors = [
          "sam0x17"
        ];
        dependencies = [
          {
            name = "common-path";
            packageId = "common-path";
          }
          {
            name = "derive-syn-parse";
            packageId = "derive-syn-parse";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "visit" ];
          }
          {
            name = "termcolor";
            packageId = "termcolor";
          }
          {
            name = "toml";
            packageId = "toml 0.8.22";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];

      };
      "dotenvy" = rec {
        crateName = "dotenvy";
        version = "0.15.7";
        edition = "2018";
        crateBin = [];
        sha256 = "16s3n973n5aqym02692i1npb079n5mb0fwql42ikmwn8wnrrbbqs";
        authors = [
          "Noemi Lapresta <noemi.lapresta@gmail.com>"
          "Craig Hills <chills@gmail.com>"
          "Mike Piccolo <mfpiccolo@gmail.com>"
          "Alice Maz <alice@alicemaz.com>"
          "Sean Griffin <sean@seantheprogrammer.com>"
          "Adam Sharp <adam@sharplet.me>"
          "Arpad Borsos <arpad.borsos@googlemail.com>"
          "Allan Zhang <al@ayz.ai>"
        ];
        features = {
          "clap" = [ "dep:clap" ];
          "cli" = [ "clap" ];
        };
      };
      "downcast" = rec {
        crateName = "downcast";
        version = "0.11.0";
        edition = "2018";
        sha256 = "1wa78ahlc57wmqyq2ncr80l7plrkgz57xsg7kfzgpcnqac8gld8l";
        authors = [
          "Felix Köpge <fkoep@mailbox.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "dtoa" = rec {
        crateName = "dtoa";
        version = "1.0.10";
        edition = "2018";
        sha256 = "016gid01rarcdv57h049d7nr9daxc2hc2gqzx0mji57krywd7bfn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "dtor" = rec {
        crateName = "dtor";
        version = "0.0.6";
        edition = "2021";
        sha256 = "1a1k0rbvx6sbwjhf0bm1mfmy6c7vmdqm3w2xwbl2aq44sqmdzjwp";
        authors = [
          "Matt Mastracci <matthew@mastracci.com>"
        ];
        dependencies = [
          {
            name = "dtor-proc-macro";
            packageId = "dtor-proc-macro";
            optional = true;
          }
        ];
        features = {
          "default" = [ "proc_macro" "__no_warn_on_missing_unsafe" ];
          "proc_macro" = [ "dep:dtor-proc-macro" ];
        };
        resolvedDefaultFeatures = [ "__no_warn_on_missing_unsafe" "proc_macro" ];
      };
      "dtor-proc-macro" = rec {
        crateName = "dtor-proc-macro";
        version = "0.0.5";
        edition = "2021";
        sha256 = "0m8hgbs9p3ay96aq8mlhghdvk8xgwg2pbx7p7kah0b01z4gy8m3l";
        procMacro = true;
        libName = "dtor_proc_macro";
        authors = [
          "Matt Mastracci <matthew@mastracci.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "dyn-clonable" = rec {
        crateName = "dyn-clonable";
        version = "0.9.2";
        edition = "2018";
        sha256 = "01885xap4dmln3yspzyr0mmcwnm9mdhlp80ag0iig3nmpywznvm3";
        libName = "dyn_clonable";
        authors = [
          "Jacob Brown <kardeiz@gmail.com>"
        ];
        dependencies = [
          {
            name = "dyn-clonable-impl";
            packageId = "dyn-clonable-impl";
          }
          {
            name = "dyn-clone";
            packageId = "dyn-clone";
          }
        ];

      };
      "dyn-clonable-impl" = rec {
        crateName = "dyn-clonable-impl";
        version = "0.9.2";
        edition = "2018";
        sha256 = "0fi1fy6r2zaq88n21yszlcdbm66iz3xi2dbgl8vrm5sq83ap31ky";
        procMacro = true;
        libName = "dyn_clonable_impl";
        authors = [
          "Jacob Brown <kardeiz@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "dyn-clone" = rec {
        crateName = "dyn-clone";
        version = "1.0.19";
        edition = "2018";
        sha256 = "01ahm5abl20480v48nxy4ffyx80cs6263q9zf0gnrxpvm6w8yyhw";
        libName = "dyn_clone";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "ecdsa" = rec {
        crateName = "ecdsa";
        version = "0.16.9";
        edition = "2021";
        sha256 = "1jhb0bcbkaz4001sdmfyv8ajrv8a1cg7z7aa5myrd4jjbhmz69zf";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "der";
            packageId = "der";
            optional = true;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "oid" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve";
            usesDefaultFeatures = false;
            features = [ "digest" "sec1" ];
          }
          {
            name = "rfc6979";
            packageId = "rfc6979";
            optional = true;
          }
          {
            name = "serdect";
            packageId = "serdect";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "signature";
            packageId = "signature";
            usesDefaultFeatures = false;
            features = [ "rand_core" ];
          }
          {
            name = "spki";
            packageId = "spki";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
        ];
        features = {
          "alloc" = [ "elliptic-curve/alloc" "signature/alloc" "spki/alloc" ];
          "arithmetic" = [ "elliptic-curve/arithmetic" ];
          "default" = [ "digest" ];
          "der" = [ "dep:der" ];
          "dev" = [ "arithmetic" "digest" "elliptic-curve/dev" "hazmat" ];
          "digest" = [ "dep:digest" "signature/digest" ];
          "pem" = [ "elliptic-curve/pem" "pkcs8" ];
          "pkcs8" = [ "digest" "elliptic-curve/pkcs8" "der" ];
          "rfc6979" = [ "dep:rfc6979" ];
          "serde" = [ "elliptic-curve/serde" "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "sha2" = [ "dep:sha2" ];
          "signing" = [ "arithmetic" "digest" "hazmat" "rfc6979" ];
          "spki" = [ "dep:spki" ];
          "std" = [ "alloc" "elliptic-curve/std" "signature/std" ];
          "verifying" = [ "arithmetic" "digest" "hazmat" ];
        };
        resolvedDefaultFeatures = [ "alloc" "arithmetic" "der" "digest" "hazmat" "pkcs8" "rfc6979" "serde" "serdect" "signing" "spki" "std" "verifying" ];
      };
      "ed25519" = rec {
        crateName = "ed25519";
        version = "2.2.3";
        edition = "2021";
        sha256 = "0lydzdf26zbn82g7xfczcac9d7mzm3qgx934ijjrd5hjpjx32m8i";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "pkcs8";
            packageId = "pkcs8";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "signature";
            packageId = "signature";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "pkcs8?/alloc" ];
          "default" = [ "std" ];
          "pem" = [ "alloc" "pkcs8/pem" ];
          "pkcs8" = [ "dep:pkcs8" ];
          "serde" = [ "dep:serde" ];
          "serde_bytes" = [ "serde" "dep:serde_bytes" ];
          "std" = [ "pkcs8?/std" "signature/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "serde" "std" ];
      };
      "ed25519-bip32" = rec {
        crateName = "ed25519-bip32";
        version = "0.4.1";
        edition = "2018";
        sha256 = "089a97gsr9cx32z66n8h3ziv5c6x1h1nvza9i1k2y6yrq29qyn6b";
        libName = "ed25519_bip32";
        authors = [
          "Vincent Hanquez <vincent.hanquez@iohk.io>"
          "Nicolas Di Prima <nicolas.diprima@iohk.io>"
        ];
        dependencies = [
          {
            name = "cryptoxide";
            packageId = "cryptoxide";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "ed25519-dalek" = rec {
        crateName = "ed25519-dalek";
        version = "2.1.1";
        edition = "2021";
        sha256 = "0w88cafwglg9hjizldbmlza0ns3hls81zk1bcih3m5m3h67algaa";
        libName = "ed25519_dalek";
        authors = [
          "isis lovecruft <isis@patternsinthevoid.net>"
          "Tony Arcieri <bascule@gmail.com>"
          "Michael Rosenberg <michael@mrosenberg.pub>"
        ];
        dependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            usesDefaultFeatures = false;
            features = [ "digest" ];
          }
          {
            name = "ed25519";
            packageId = "ed25519";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle 2.6.1";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            usesDefaultFeatures = false;
            features = [ "digest" "rand_core" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "curve25519-dalek/alloc" "ed25519/alloc" "serde?/alloc" "zeroize/alloc" ];
          "asm" = [ "sha2/asm" ];
          "batch" = [ "alloc" "merlin" "rand_core" ];
          "default" = [ "fast" "std" "zeroize" ];
          "digest" = [ "signature/digest" ];
          "fast" = [ "curve25519-dalek/precomputed-tables" ];
          "legacy_compatibility" = [ "curve25519-dalek/legacy_compatibility" ];
          "merlin" = [ "dep:merlin" ];
          "pem" = [ "alloc" "ed25519/pem" "pkcs8" ];
          "pkcs8" = [ "ed25519/pkcs8" ];
          "rand_core" = [ "dep:rand_core" ];
          "serde" = [ "dep:serde" "ed25519/serde" ];
          "signature" = [ "dep:signature" ];
          "std" = [ "alloc" "ed25519/std" "serde?/std" "sha2/std" ];
          "zeroize" = [ "dep:zeroize" "curve25519-dalek/zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "fast" "rand_core" "std" "zeroize" ];
      };
      "ed25519-zebra" = rec {
        crateName = "ed25519-zebra";
        version = "4.0.3";
        edition = "2018";
        sha256 = "1ab55w7w6hh7hyyjg507ki7hrz0w9nygyifdjrc43m559n3yd73x";
        libName = "ed25519_zebra";
        authors = [
          "Henry de Valence <hdevalence@hdevalence.ca>"
          "Zcash Foundation <zebra@zfnd.org>"
        ];
        dependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            usesDefaultFeatures = false;
            features = [ "alloc" "digest" "zeroize" "precomputed-tables" ];
          }
          {
            name = "ed25519";
            packageId = "ed25519";
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            features = [ "zeroize_derive" ];
          }
        ];
        features = {
          "default" = [ "serde" "std" ];
          "der" = [ "dep:der" ];
          "pem" = [ "der" "ed25519/pem" ];
          "pkcs8" = [ "dep:pkcs8" ];
          "serde" = [ "dep:serde" "ed25519/serde" ];
          "std" = [ "ed25519/std" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "educe" = rec {
        crateName = "educe";
        version = "0.6.0";
        edition = "2021";
        sha256 = "05wlg6wzil59lxc3kbs476gwykj6m63dbfv83frxx35xw54w0yqx";
        procMacro = true;
        authors = [
          "Magic Len <len@magiclen.org>"
        ];
        dependencies = [
          {
            name = "enum-ordinalize";
            packageId = "enum-ordinalize";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];
        features = {
          "default" = [ "Debug" "Clone" "Copy" "PartialEq" "Eq" "PartialOrd" "Ord" "Hash" "Default" "Deref" "DerefMut" "Into" ];
          "full" = [ "syn/full" ];
        };
        resolvedDefaultFeatures = [ "Clone" "Copy" "Debug" "Default" "Deref" "DerefMut" "Eq" "Hash" "Into" "Ord" "PartialEq" "PartialOrd" "default" ];
      };
      "either" = rec {
        crateName = "either";
        version = "1.15.0";
        edition = "2021";
        sha256 = "069p1fknsmzn9llaizh77kip0pqmcwpdsykv2x30xpjyija5gis8";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" "use_std" ];
      };
      "elliptic-curve" = rec {
        crateName = "elliptic-curve";
        version = "0.13.8";
        edition = "2021";
        sha256 = "0ixx4brgnzi61z29r3g1606nh2za88hzyz8c5r3p6ydzhqq09rmm";
        libName = "elliptic_curve";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base16ct";
            packageId = "base16ct";
          }
          {
            name = "crypto-bigint";
            packageId = "crypto-bigint";
            usesDefaultFeatures = false;
            features = [ "rand_core" "generic-array" "zeroize" ];
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
          }
          {
            name = "ff";
            packageId = "ff";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
            usesDefaultFeatures = false;
            features = [ "zeroize" ];
          }
          {
            name = "group";
            packageId = "group";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "pkcs8";
            packageId = "pkcs8";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "sec1";
            packageId = "sec1";
            optional = true;
            features = [ "subtle" "zeroize" ];
          }
          {
            name = "serdect";
            packageId = "serdect";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "subtle";
            packageId = "subtle 2.6.1";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "base16ct/alloc" "ff?/alloc" "group?/alloc" "pkcs8?/alloc" "sec1?/alloc" "zeroize/alloc" ];
          "arithmetic" = [ "group" ];
          "bits" = [ "arithmetic" "ff/bits" "dep:tap" ];
          "default" = [ "arithmetic" ];
          "dev" = [ "arithmetic" "dep:hex-literal" "pem" "pkcs8" ];
          "digest" = [ "dep:digest" ];
          "ecdh" = [ "arithmetic" "digest" "dep:hkdf" ];
          "ff" = [ "dep:ff" ];
          "group" = [ "dep:group" "ff" ];
          "hash2curve" = [ "arithmetic" "digest" ];
          "jwk" = [ "dep:base64ct" "dep:serde_json" "alloc" "serde" "zeroize/alloc" ];
          "pem" = [ "dep:pem-rfc7468" "alloc" "arithmetic" "pkcs8" "sec1/pem" ];
          "pkcs8" = [ "dep:pkcs8" "sec1" ];
          "sec1" = [ "dep:sec1" ];
          "serde" = [ "dep:serdect" "alloc" "pkcs8" "sec1/serde" ];
          "std" = [ "alloc" "rand_core/std" "pkcs8?/std" "sec1?/std" ];
          "voprf" = [ "digest" ];
        };
        resolvedDefaultFeatures = [ "alloc" "arithmetic" "digest" "ff" "group" "hazmat" "pkcs8" "sec1" "serde" "std" ];
      };
      "encode_unicode" = rec {
        crateName = "encode_unicode";
        version = "1.0.0";
        edition = "2021";
        sha256 = "1h5j7j7byi289by63s3w4a8b3g6l5ccdrws7a67nn07vdxj77ail";
        authors = [
          "Torbjørn Birch Moltu <t.b.moltu@lyse.net>"
        ];
        features = {
          "ascii" = [ "dep:ascii" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "enum-as-inner" = rec {
        crateName = "enum-as-inner";
        version = "0.6.1";
        edition = "2018";
        sha256 = "1g3cywc65d9w974l2xy86ij13njss3qjc7b0kfbzbws9qrjs5rm1";
        procMacro = true;
        libName = "enum_as_inner";
        authors = [
          "Benjamin Fry <benjaminfry@me.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "enum-ordinalize" = rec {
        crateName = "enum-ordinalize";
        version = "4.3.0";
        edition = "2021";
        sha256 = "1max64z9giii61qcwl56rndd7pakaylkaij5zqbbbvjl9vxdr87y";
        libName = "enum_ordinalize";
        dependencies = [
          {
            name = "enum-ordinalize-derive";
            packageId = "enum-ordinalize-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "derive" "traits" ];
          "derive" = [ "dep:enum-ordinalize-derive" ];
          "traits" = [ "enum-ordinalize-derive?/traits" ];
        };
        resolvedDefaultFeatures = [ "derive" ];
      };
      "enum-ordinalize-derive" = rec {
        crateName = "enum-ordinalize-derive";
        version = "4.3.1";
        edition = "2021";
        sha256 = "1zy53fabazimwv5cl0366k834ybixzl84lxj9mfavbnlfn532a0d";
        procMacro = true;
        libName = "enum_ordinalize_derive";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];
        features = {
        };
      };
      "env_filter" = rec {
        crateName = "env_filter";
        version = "0.1.3";
        edition = "2021";
        sha256 = "1l4p6f845cylripc3zkxa0lklk8rn2q86fqm522p6l2cknjhavhq";
        dependencies = [
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "perf" ];
          }
        ];
        features = {
          "default" = [ "regex" ];
          "regex" = [ "dep:regex" ];
        };
        resolvedDefaultFeatures = [ "regex" ];
      };
      "env_logger 0.10.2" = rec {
        crateName = "env_logger";
        version = "0.10.2";
        edition = "2021";
        sha256 = "1005v71kay9kbz1d5907l0y7vh9qn2fqsp2yfgb8bjvin6m0bm2c";
        dependencies = [
          {
            name = "humantime";
            packageId = "humantime";
            optional = true;
          }
          {
            name = "is-terminal";
            packageId = "is-terminal";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "perf" ];
          }
          {
            name = "termcolor";
            packageId = "termcolor";
            optional = true;
          }
        ];
        features = {
          "auto-color" = [ "dep:is-terminal" "color" ];
          "color" = [ "dep:termcolor" ];
          "default" = [ "auto-color" "humantime" "regex" ];
          "humantime" = [ "dep:humantime" ];
          "regex" = [ "dep:regex" ];
        };
        resolvedDefaultFeatures = [ "auto-color" "color" "default" "humantime" "regex" ];
      };
      "env_logger 0.11.8" = rec {
        crateName = "env_logger";
        version = "0.11.8";
        edition = "2021";
        sha256 = "17q6zbjam4wq75fa3m4gvvmv3rj3ch25abwbm84b28a0j3q67j0k";
        dependencies = [
          {
            name = "anstream";
            packageId = "anstream";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "wincon" ];
          }
          {
            name = "anstyle";
            packageId = "anstyle";
            optional = true;
          }
          {
            name = "env_filter";
            packageId = "env_filter";
            usesDefaultFeatures = false;
          }
          {
            name = "jiff";
            packageId = "jiff";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
        ];
        features = {
          "auto-color" = [ "color" "anstream/auto" ];
          "color" = [ "dep:anstream" "dep:anstyle" ];
          "default" = [ "auto-color" "humantime" "regex" ];
          "humantime" = [ "dep:jiff" ];
          "kv" = [ "log/kv" ];
          "regex" = [ "env_filter/regex" ];
          "unstable-kv" = [ "kv" ];
        };
        resolvedDefaultFeatures = [ "auto-color" "color" "default" "humantime" "regex" ];
      };
      "env_logger 0.8.4" = rec {
        crateName = "env_logger";
        version = "0.8.4";
        edition = "2018";
        sha256 = "1qzw8g11dbdfi7ixm44ldykwcqsxqkh8vx5cgpd88zmclgz8g4d1";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "perf" ];
          }
        ];
        features = {
          "atty" = [ "dep:atty" ];
          "default" = [ "termcolor" "atty" "humantime" "regex" ];
          "humantime" = [ "dep:humantime" ];
          "regex" = [ "dep:regex" ];
          "termcolor" = [ "dep:termcolor" ];
        };
        resolvedDefaultFeatures = [ "regex" ];
      };
      "environmental" = rec {
        crateName = "environmental";
        version = "1.1.4";
        edition = "2018";
        sha256 = "0nxiw6j1kwjr7719h8aj1hv1p65nw3afar0wsn1hx1xai8195374";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "envy" = rec {
        crateName = "envy";
        version = "0.4.2";
        edition = "2018";
        sha256 = "0rar459p7pl19v6pbx98q3hi2hxfl8q1ndxxw5d4zd9cgway0irz";
        authors = [
          "softprops <d.tangren@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];

      };
      "equivalent" = rec {
        crateName = "equivalent";
        version = "1.0.2";
        edition = "2015";
        sha256 = "03swzqznragy8n0x31lqc78g2af054jwivp7lkrbrc0khz74lyl7";

      };
      "errno" = rec {
        crateName = "errno";
        version = "0.3.11";
        edition = "2018";
        sha256 = "0kjrrcaa5nvickysw7z3vm5p0l7l457idf1ff3z6ang8qwnx8vcp";
        authors = [
          "Chris Wong <lambda.fairy@gmail.com>"
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Diagnostics_Debug" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "libc/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "etcetera" = rec {
        crateName = "etcetera";
        version = "0.8.0";
        edition = "2018";
        sha256 = "0hxrsn75dirbjhwgkdkh0pnpqrnq17ypyhjpjaypgax1hd91nv8k";
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "home";
            packageId = "home";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_UI_Shell" ];
          }
        ];

      };
      "event-listener 2.5.3" = rec {
        crateName = "event-listener";
        version = "2.5.3";
        edition = "2018";
        sha256 = "1q4w3pndc518crld6zsqvvpy9lkzwahp2zgza9kbzmmqh9gif1h2";
        libName = "event_listener";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];

      };
      "event-listener 5.4.0" = rec {
        crateName = "event-listener";
        version = "5.4.0";
        edition = "2021";
        sha256 = "1bii2gn3vaa33s0gr2zph7cagiq0ppcfxcxabs24ri9z9kgar4il";
        libName = "event_listener";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            usesDefaultFeatures = false;
          }
          {
            name = "parking";
            packageId = "parking";
            optional = true;
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "critical-section" = [ "dep:critical-section" ];
          "default" = [ "std" ];
          "loom" = [ "concurrent-queue/loom" "parking?/loom" "dep:loom" ];
          "parking" = [ "dep:parking" ];
          "portable-atomic" = [ "portable-atomic-util" "portable_atomic_crate" "concurrent-queue/portable-atomic" ];
          "portable-atomic-util" = [ "dep:portable-atomic-util" ];
          "portable_atomic_crate" = [ "dep:portable_atomic_crate" ];
          "std" = [ "concurrent-queue/std" "parking" ];
        };
        resolvedDefaultFeatures = [ "default" "parking" "std" ];
      };
      "event-listener-strategy" = rec {
        crateName = "event-listener-strategy";
        version = "0.5.4";
        edition = "2021";
        sha256 = "14rv18av8s7n8yixg38bxp5vg2qs394rl1w052by5npzmbgz7scb";
        libName = "event_listener_strategy";
        authors = [
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "event-listener";
            packageId = "event-listener 5.4.0";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "event-listener/loom" ];
          "portable-atomic" = [ "event-listener/portable-atomic" ];
          "std" = [ "event-listener/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "exit-future" = rec {
        crateName = "exit-future";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1i88800r9kc3xf4319dilzflkwvhvmplsiljapqk6knn6cc2ygz4";
        libName = "exit_future";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
        ];

      };
      "expander" = rec {
        crateName = "expander";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1qm8v20f2548ny8bb1maxa1674ly8mq43cimk4bvvv4i3p3p1i72";
        authors = [
          "Bernhard Schuster <bernhard@ahoi.io>"
        ];
        dependencies = [
          {
            name = "blake2";
            packageId = "blake2 0.10.6";
          }
          {
            name = "file-guard";
            packageId = "file-guard";
          }
          {
            name = "fs-err";
            packageId = "fs-err";
          }
          {
            name = "prettyplease";
            packageId = "prettyplease";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" "parsing" "full" ];
          }
        ];
        features = {
          "default" = [ "syndicate" "pretty" ];
          "pretty" = [ "prettyplease" "syn/parsing" "syn/full" ];
          "prettyplease" = [ "dep:prettyplease" ];
          "syn" = [ "dep:syn" ];
          "syndicate" = [ "syn" ];
        };
        resolvedDefaultFeatures = [ "default" "pretty" "prettyplease" "syn" "syndicate" ];
      };
      "fallible-iterator 0.2.0" = rec {
        crateName = "fallible-iterator";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1xq759lsr8gqss7hva42azn3whgrbrs2sd9xpn92c5ickxm1fhs4";
        libName = "fallible_iterator";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "fallible-iterator 0.3.0" = rec {
        crateName = "fallible-iterator";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0ja6l56yka5vn4y4pk6hn88z0bpny7a8k1919aqjzp0j1yhy9k1a";
        libName = "fallible_iterator";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        features = {
          "default" = [ "alloc" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "fastrand" = rec {
        crateName = "fastrand";
        version = "2.3.0";
        edition = "2018";
        sha256 = "1ghiahsw1jd68df895cy5h3gzwk30hndidn3b682zmshpgmrx41p";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "getrandom" = [ "dep:getrandom" ];
          "js" = [ "std" "getrandom" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "fdlimit" = rec {
        crateName = "fdlimit";
        version = "0.3.0";
        edition = "2021";
        sha256 = "1rbz4wpf6a2csjfwxlv2hg22jiq8xaxmy71mczpxjwzgqbdzg0p1";
        authors = [
          "Parity Technologies<admin@parity.io>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "ff" = rec {
        crateName = "ff";
        version = "0.13.1";
        edition = "2021";
        sha256 = "14v3bc6q24gbcjnxjfbq2dddgf4as2z2gd4mj35gjlrncpxhpdf0";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle 2.6.1";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "bits" = [ "bitvec" ];
          "bitvec" = [ "dep:bitvec" ];
          "byteorder" = [ "dep:byteorder" ];
          "default" = [ "bits" "std" ];
          "derive" = [ "byteorder" "ff_derive" ];
          "derive_bits" = [ "bits" "ff_derive/bits" ];
          "ff_derive" = [ "dep:ff_derive" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "fiat-crypto" = rec {
        crateName = "fiat-crypto";
        version = "0.2.9";
        edition = "2018";
        sha256 = "07c1vknddv3ak7w89n85ik0g34nzzpms6yb845vrjnv9m4csbpi8";
        libName = "fiat_crypto";
        authors = [
          "Fiat Crypto library authors <jgross@mit.edu>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "figment" = rec {
        crateName = "figment";
        version = "0.10.19";
        edition = "2018";
        sha256 = "1ww9sxdzjj2i80w7bq0kllnymjyrfb1cdx2h70ap5wqcdga1rc4c";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "atomic";
            packageId = "atomic";
            target = { target, features }: (("8" == target."pointer_width" or null) || ("16" == target."pointer_width" or null) || ("32" == target."pointer_width" or null));
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
            optional = true;
          }
          {
            name = "pear";
            packageId = "pear";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
            optional = true;
          }
          {
            name = "uncased";
            packageId = "uncased";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        devDependencies = [
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        features = {
          "env" = [ "pear" "parse-value" ];
          "json" = [ "serde_json" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "parse-value" = [ "pear" ];
          "pear" = [ "dep:pear" ];
          "serde_json" = [ "dep:serde_json" ];
          "serde_yaml" = [ "dep:serde_yaml" ];
          "tempfile" = [ "dep:tempfile" ];
          "test" = [ "tempfile" "parking_lot" ];
          "toml" = [ "dep:toml" ];
          "yaml" = [ "serde_yaml" ];
        };
        resolvedDefaultFeatures = [ "env" "parking_lot" "parse-value" "pear" "tempfile" "test" ];
      };
      "file-guard" = rec {
        crateName = "file-guard";
        version = "0.2.0";
        edition = "2021";
        sha256 = "0z20z66gdd13pn2g0z01bwj0ljcrc9avwx8jyvdxghsyz6n75vr1";
        libName = "file_guard";
        authors = [
          "Jeremy Larkin <jeremylarkin@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "winerror" "minwinbase" "minwindef" "fileapi" ];
          }
        ];

      };
      "file-per-thread-logger" = rec {
        crateName = "file-per-thread-logger";
        version = "0.1.6";
        edition = "2021";
        sha256 = "0riq6p1267g9316qs4avfsccqvdczs8h2qzl9ax020krv4jy9wl4";
        libName = "file_per_thread_logger";
        authors = [
          "Benjamin Bouvier <public@benj.me>"
        ];
        dependencies = [
          {
            name = "env_logger";
            packageId = "env_logger 0.10.2";
          }
          {
            name = "log";
            packageId = "log";
          }
        ];

      };
      "filetime" = rec {
        crateName = "filetime";
        version = "0.2.25";
        edition = "2018";
        sha256 = "11l5zr86n5sr6g6k6sqldswk0jzklm0q95rzikxcns0yk0p55h1m";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "libredox";
            packageId = "libredox";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Storage_FileSystem" ];
          }
        ];

      };
      "finality-grandpa" = rec {
        crateName = "finality-grandpa";
        version = "0.16.3";
        edition = "2021";
        sha256 = "1z5x1z7sc2h5x4idz70nyyvyi2hmmf63mh0yg10ka4r0qlyz9y5l";
        libName = "finality_grandpa";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            rename = "num";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
            optional = true;
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive-codec" = [ "parity-scale-codec" "scale-info" ];
          "futures-timer" = [ "dep:futures-timer" ];
          "log" = [ "dep:log" ];
          "parity-scale-codec" = [ "dep:parity-scale-codec" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "rand" = [ "dep:rand" ];
          "scale-info" = [ "dep:scale-info" ];
          "std" = [ "parity-scale-codec/std" "num/std" "parking_lot" "log" "futures-timer" "futures/executor" "scale-info/std" ];
          "test-helpers" = [ "fuzz-helpers" "rand" "std" ];
        };
        resolvedDefaultFeatures = [ "default" "derive-codec" "futures-timer" "log" "parity-scale-codec" "parking_lot" "scale-info" "std" ];
      };
      "fixed-hash" = rec {
        crateName = "fixed-hash";
        version = "0.8.0";
        edition = "2021";
        sha256 = "0d25wr8vrvr7kwmjya6894wp461f2wic0wgxdz7im360n0n0ap43";
        libName = "fixed_hash";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustc-hex";
            packageId = "rustc-hex";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "std_rng" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "byteorder" = [ "dep:byteorder" ];
          "default" = [ "std" "rand" "rustc-hex" "byteorder" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rand" = [ "dep:rand" ];
          "rustc-hex" = [ "dep:rustc-hex" ];
          "std" = [ "rustc-hex/std" "rand/std" "byteorder/std" ];
        };
        resolvedDefaultFeatures = [ "byteorder" "rand" "rustc-hex" "std" ];
      };
      "fixedbitset" = rec {
        crateName = "fixedbitset";
        version = "0.5.7";
        edition = "2021";
        sha256 = "16fd3v9d2cms2vddf9xhlm56sz4j0zgrk3d2h6v1l7hx760lwrqx";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "flume" = rec {
        crateName = "flume";
        version = "0.11.1";
        edition = "2018";
        sha256 = "15ch0slxa8sqsi6c73a0ky6vdnh48q8cxjf7rksa3243m394s3ns";
        authors = [
          "Joshua Barretto <joshua.s.barretto@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "spin";
            packageId = "spin 0.9.8";
            rename = "spin1";
            features = [ "mutex" ];
          }
        ];
        features = {
          "async" = [ "futures-sink" "futures-core" ];
          "default" = [ "async" "select" "eventual-fairness" ];
          "eventual-fairness" = [ "select" "nanorand" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "nanorand" = [ "dep:nanorand" ];
        };
        resolvedDefaultFeatures = [ "async" "futures-core" "futures-sink" ];
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.7";
        edition = "2015";
        sha256 = "1hc2mcqha06aibcaza94vbi81j6pr9a1bbxrxjfhc91zin8yr7iz";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "foldhash" = rec {
        crateName = "foldhash";
        version = "0.1.5";
        edition = "2021";
        sha256 = "1wisr1xlc2bj7hk4rgkcjkz3j2x4dhd1h9lwk7mj8p71qpdgbi6r";
        authors = [
          "Orson Peters <orsonpeters@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "fork-tree" = rec {
        crateName = "fork-tree";
        version = "13.0.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "fork_tree";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            features = [ "derive" ];
          }
        ];

      };
      "form_urlencoded" = rec {
        crateName = "form_urlencoded";
        version = "1.2.1";
        edition = "2018";
        sha256 = "0milh8x7nl4f450s3ddhg57a3flcv6yq8hlkyk6fyr3mcb128dp1";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "percent-encoding/alloc" ];
          "default" = [ "std" ];
          "std" = [ "alloc" "percent-encoding/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "forwarded-header-value" = rec {
        crateName = "forwarded-header-value";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1scqf5ar22066i901bx7p5zja23rd5amd00a25pwhk28717zhdc8";
        libName = "forwarded_header_value";
        authors = [
          "James Brown <jbrown@easypost.com>"
        ];
        dependencies = [
          {
            name = "nonempty";
            packageId = "nonempty";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "fraction" = rec {
        crateName = "fraction";
        version = "0.15.3";
        edition = "2015";
        sha256 = "1rss1021dpzr12xl3dyqyj36ji4vv4f83yy9im039cx1y0zqw58g";
        authors = [
          "dnsl48 <dnsl48@gmail.com>"
        ];
        dependencies = [
          {
            name = "num";
            packageId = "num";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
        ];
        features = {
          "byteorder" = [ "dep:byteorder" ];
          "bytes" = [ "dep:bytes" ];
          "default" = [ "with-bigint" "with-decimal" "with-dynaint" ];
          "juniper" = [ "dep:juniper" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "postgres-types" = [ "dep:postgres-types" ];
          "serde" = [ "dep:serde" ];
          "serde_derive" = [ "dep:serde_derive" ];
          "with-approx" = [ "with-bigint" ];
          "with-bigint" = [ "num/num-bigint" "num/std" "lazy_static" ];
          "with-juniper-support" = [ "juniper" ];
          "with-postgres-support" = [ "postgres-types" "byteorder" "bytes" ];
          "with-serde-support" = [ "serde" "serde_derive" "num/serde" ];
        };
        resolvedDefaultFeatures = [ "serde" "serde_derive" "with-decimal" "with-serde-support" ];
      };
      "fragile" = rec {
        crateName = "fragile";
        version = "2.0.1";
        edition = "2018";
        sha256 = "06g69s9w3hmdnjp5b60ph15v367278mgxy1shijrllarc2pnrp98";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        features = {
          "slab" = [ "dep:slab" ];
        };
      };
      "frame-benchmarking" = rec {
        crateName = "frame-benchmarking";
        version = "40.2.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "frame_benchmarking";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-support-procedural";
            packageId = "frame-support-procedural";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "linregress";
            packageId = "linregress";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-application-crypto";
            packageId = "sp-application-crypto";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime-interface";
            packageId = "sp-runtime-interface";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-storage";
            packageId = "sp-storage";
            usesDefaultFeatures = false;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "default" = [ "std" ];
          "linregress" = [ "dep:linregress" ];
          "runtime-benchmarks" = [ "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "sc-client-db/runtime-benchmarks" "sp-runtime/runtime-benchmarks" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "codec/std" "frame-support-procedural/std" "frame-support/std" "frame-system/std" "linregress" "log/std" "scale-info/std" "serde" "sp-api/std" "sp-application-crypto/std" "sp-core/std" "sp-externalities/std" "sp-io/std" "sp-runtime-interface/std" "sp-runtime/std" "sp-state-machine/std" "sp-storage/std" ];
        };
        resolvedDefaultFeatures = [ "linregress" "runtime-benchmarks" "serde" "std" ];
      };
      "frame-executive" = rec {
        crateName = "frame-executive";
        version = "40.0.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "frame_executive";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "aquamarine";
            packageId = "aquamarine";
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-try-runtime";
            packageId = "frame-try-runtime";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-tracing";
            packageId = "sp-tracing";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-io";
            packageId = "sp-io";
          }
        ];
        features = {
          "default" = [ "std" ];
          "frame-try-runtime" = [ "dep:frame-try-runtime" ];
          "std" = [ "codec/std" "frame-support/experimental" "frame-support/std" "frame-system/std" "frame-try-runtime/std" "log/std" "scale-info/std" "sp-core/std" "sp-io/std" "sp-runtime/std" "sp-tracing/std" ];
          "try-runtime" = [ "frame-support/try-runtime" "frame-system/try-runtime" "frame-try-runtime/try-runtime" "pallet-balances/try-runtime" "pallet-transaction-payment/try-runtime" "sp-runtime/try-runtime" ];
          "with-tracing" = [ "sp-tracing/with-tracing" ];
        };
        resolvedDefaultFeatures = [ "frame-try-runtime" "std" "try-runtime" ];
      };
      "frame-metadata" = rec {
        crateName = "frame-metadata";
        version = "20.0.0";
        edition = "2021";
        sha256 = "1py85akgy8dcndi4mywl9435120hxppim0aivj2j87s6ls7q1pi6";
        libName = "frame_metadata";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "current" = [ "scale-info" ];
          "decode" = [ "scale-info/decode" ];
          "default" = [ "std" "current" ];
          "scale-info" = [ "dep:scale-info" ];
          "serde" = [ "dep:serde" ];
          "serde_full" = [ "scale-info/serde" "serde" "serde/alloc" ];
          "std" = [ "decode" "serde_full" "codec/std" "scale-info/std" "serde/std" ];
          "unstable" = [ "current" ];
        };
        resolvedDefaultFeatures = [ "current" "decode" "default" "scale-info" "serde" "serde_full" "std" "unstable" ];
      };
      "frame-metadata-hash-extension" = rec {
        crateName = "frame-metadata-hash-extension";
        version = "0.8.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "frame_metadata_hash_extension";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "array-bytes";
            packageId = "array-bytes";
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            usesDefaultFeatures = false;
          }
          {
            name = "docify";
            packageId = "docify";
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" "serde" ];
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "codec/std" "const-hex/std" "frame-support/std" "frame-system/std" "log/std" "scale-info/std" "sp-runtime/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "frame-support" = rec {
        crateName = "frame-support";
        version = "40.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "frame_support";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "aquamarine";
            packageId = "aquamarine";
          }
          {
            name = "array-bytes";
            packageId = "array-bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "binary-merkle-tree";
            packageId = "binary-merkle-tree";
            usesDefaultFeatures = false;
          }
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "docify";
            packageId = "docify";
          }
          {
            name = "environmental";
            packageId = "environmental";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-metadata";
            packageId = "frame-metadata";
            usesDefaultFeatures = false;
            features = [ "current" "unstable" ];
          }
          {
            name = "frame-support-procedural";
            packageId = "frame-support-procedural";
            usesDefaultFeatures = false;
          }
          {
            name = "impl-trait-for-tuples";
            packageId = "impl-trait-for-tuples";
          }
          {
            name = "k256";
            packageId = "k256";
            usesDefaultFeatures = false;
            features = [ "ecdsa" ];
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "macro_magic";
            packageId = "macro_magic";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
            features = [ "frame-metadata" ];
          }
          {
            name = "sp-arithmetic";
            packageId = "sp-arithmetic";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-crypto-hashing-proc-macro";
            packageId = "sp-crypto-hashing-proc-macro";
          }
          {
            name = "sp-debug-derive";
            packageId = "sp-debug-derive";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-genesis-builder";
            packageId = "sp-genesis-builder";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-metadata-ir";
            packageId = "sp-metadata-ir";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-staking";
            packageId = "sp-staking";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-state-machine";
            packageId = "sp-state-machine";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-std";
            packageId = "sp-std";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-tracing";
            packageId = "sp-tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-trie";
            packageId = "sp-trie";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-weights";
            packageId = "sp-weights";
            usesDefaultFeatures = false;
          }
          {
            name = "tt-call";
            packageId = "tt-call";
          }
        ];
        features = {
          "default" = [ "std" ];
          "experimental" = [ "frame-support-procedural/experimental" ];
          "full-metadata-docs" = [ "scale-info/docs" ];
          "no-metadata-docs" = [ "frame-support-procedural/no-metadata-docs" "sp-api/no-metadata-docs" ];
          "runtime-benchmarks" = [ "frame-system/runtime-benchmarks" "sp-runtime/runtime-benchmarks" "sp-staking/runtime-benchmarks" ];
          "sp-state-machine" = [ "dep:sp-state-machine" ];
          "std" = [ "binary-merkle-tree/std" "codec/std" "environmental/std" "frame-metadata/std" "frame-support-procedural/std" "k256/std" "log/std" "scale-info/std" "serde/std" "serde_json/std" "sp-api/std" "sp-arithmetic/std" "sp-core/std" "sp-debug-derive/std" "sp-genesis-builder/std" "sp-inherents/std" "sp-io/std" "sp-metadata-ir/std" "sp-runtime/std" "sp-staking/std" "sp-state-machine/std" "sp-std/std" "sp-timestamp/std" "sp-tracing/std" "sp-trie/std" "sp-weights/std" ];
          "try-runtime" = [ "frame-system/try-runtime" "sp-debug-derive/force-debug" "sp-runtime/try-runtime" ];
          "tuples-128" = [ "frame-support-procedural/tuples-128" ];
          "tuples-96" = [ "frame-support-procedural/tuples-96" ];
        };
        resolvedDefaultFeatures = [ "experimental" "runtime-benchmarks" "sp-state-machine" "std" "try-runtime" ];
      };
      "frame-support-procedural" = rec {
        crateName = "frame-support-procedural";
        version = "33.0.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        procMacro = true;
        libName = "frame_support_procedural";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "Inflector";
            packageId = "Inflector";
          }
          {
            name = "cfg-expr";
            packageId = "cfg-expr";
          }
          {
            name = "derive-syn-parse";
            packageId = "derive-syn-parse";
          }
          {
            name = "docify";
            packageId = "docify";
          }
          {
            name = "expander";
            packageId = "expander";
          }
          {
            name = "frame-support-procedural-tools";
            packageId = "frame-support-procedural-tools";
          }
          {
            name = "itertools";
            packageId = "itertools 0.11.0";
          }
          {
            name = "macro_magic";
            packageId = "macro_magic";
            features = [ "proc_support" ];
          }
          {
            name = "proc-macro-warning";
            packageId = "proc-macro-warning";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "sp-crypto-hashing";
            packageId = "sp-crypto-hashing";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "parsing" "visit-mut" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "codec/std" "frame-support/std" "frame-system/std" "scale-info/std" "sp-core/std" "sp-crypto-hashing/std" "sp-io/std" "sp-metadata-ir/std" "sp-runtime/std" ];
        };
        resolvedDefaultFeatures = [ "experimental" "std" ];
      };
      "frame-support-procedural-tools" = rec {
        crateName = "frame-support-procedural-tools";
        version = "13.0.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "frame_support_procedural_tools";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "frame-support-procedural-tools-derive";
            packageId = "frame-support-procedural-tools-derive";
          }
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.3.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" "full" "visit" ];
          }
        ];

      };
      "frame-support-procedural-tools-derive" = rec {
        crateName = "frame-support-procedural-tools-derive";
        version = "12.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        procMacro = true;
        libName = "frame_support_procedural_tools_derive";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
            features = [ "proc-macro" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" "full" "parsing" "proc-macro" ];
          }
        ];

      };
      "frame-system" = rec {
        crateName = "frame-system";
        version = "40.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "frame_system";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "docify";
            packageId = "docify";
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-version";
            packageId = "sp-version";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-weights";
            packageId = "sp-weights";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "experimental" = [ "frame-support/experimental" ];
          "runtime-benchmarks" = [ "frame-support/runtime-benchmarks" "sp-runtime/runtime-benchmarks" ];
          "std" = [ "codec/std" "frame-support/std" "log/std" "scale-info/std" "serde/std" "sp-core/std" "sp-io/std" "sp-runtime/std" "sp-version/std" "sp-weights/std" ];
          "try-runtime" = [ "frame-support/try-runtime" "sp-runtime/try-runtime" ];
        };
        resolvedDefaultFeatures = [ "runtime-benchmarks" "std" "try-runtime" ];
      };
      "frame-system-benchmarking" = rec {
        crateName = "frame-system-benchmarking";
        version = "40.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "frame_system_benchmarking";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "frame-benchmarking";
            packageId = "frame-benchmarking";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "runtime-benchmarks" = [ "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "sp-runtime/runtime-benchmarks" ];
          "std" = [ "codec/std" "frame-benchmarking/std" "frame-support/std" "frame-system/std" "scale-info/std" "sp-core/std" "sp-runtime/std" ];
        };
        resolvedDefaultFeatures = [ "runtime-benchmarks" "std" ];
      };
      "frame-system-rpc-runtime-api" = rec {
        crateName = "frame-system-rpc-runtime-api";
        version = "36.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "frame_system_rpc_runtime_api";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "docify";
            packageId = "docify";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "codec/std" "sp-api/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "frame-try-runtime" = rec {
        crateName = "frame-try-runtime";
        version = "0.46.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "frame_try_runtime";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "codec/std" "frame-support/std" "sp-api/std" "sp-runtime/std" ];
          "try-runtime" = [ "frame-support/try-runtime" "sp-runtime/try-runtime" ];
        };
        resolvedDefaultFeatures = [ "std" "try-runtime" ];
      };
      "fs-err" = rec {
        crateName = "fs-err";
        version = "2.11.0";
        edition = "2018";
        sha256 = "0hdajzh5sjvvdjg0n15j91mv8ydvb7ff6m909frvdmg1bw81z948";
        libName = "fs_err";
        authors = [
          "Andrew Hickman <andrew.hickman1@sky.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "tokio" = [ "dep:tokio" ];
        };
      };
      "fs2" = rec {
        crateName = "fs2";
        version = "0.4.3";
        edition = "2015";
        sha256 = "04v2hwk7035c088f19mfl5b1lz84gnvv2hv6m935n0hmirszqr4m";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "handleapi" "processthreadsapi" "winerror" "fileapi" "winbase" "std" ];
          }
        ];

      };
      "fuchsia-cprng" = rec {
        crateName = "fuchsia-cprng";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1fnkqrbz7ixxzsb04bsz9p0zzazanma8znfdqjvh39n14vapfvx0";
        libName = "fuchsia_cprng";
        authors = [
          "Erick Tryzelaar <etryzelaar@google.com>"
        ];

      };
      "funty" = rec {
        crateName = "funty";
        version = "2.0.0";
        edition = "2018";
        sha256 = "177w048bm0046qlzvp33ag3ghqkqw4ncpzcm5lq36gxf2lla7mg6";
        authors = [
          "myrrlyn <self@myrrlyn.dev>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "futures" = rec {
        crateName = "futures";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0xh8ddbkm9jy8kc5gbvjp9a4b6rqqxvc8471yb2qaz5wm2qhgg35";
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" "futures-sink/alloc" "futures-channel/alloc" "futures-util/alloc" ];
          "async-await" = [ "futures-util/async-await" "futures-util/async-await-macro" ];
          "bilock" = [ "futures-util/bilock" ];
          "compat" = [ "std" "futures-util/compat" ];
          "default" = [ "std" "async-await" "executor" ];
          "executor" = [ "std" "futures-executor/std" ];
          "futures-executor" = [ "dep:futures-executor" ];
          "io-compat" = [ "compat" "futures-util/io-compat" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "futures-io/std" "futures-sink/std" "futures-util/std" "futures-util/io" "futures-util/channel" ];
          "thread-pool" = [ "executor" "futures-executor/thread-pool" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" "futures-channel/unstable" "futures-io/unstable" "futures-util/unstable" ];
          "write-all-vectored" = [ "futures-util/write-all-vectored" ];
        };
        resolvedDefaultFeatures = [ "alloc" "async-await" "bilock" "default" "executor" "futures-executor" "std" "thread-pool" "unstable" ];
      };
      "futures-bounded" = rec {
        crateName = "futures-bounded";
        version = "0.2.4";
        edition = "2021";
        sha256 = "0bjlzysrfkm5jcc4v5rgr641hvfg817s7digj4rchpw4zgkjiwwi";
        libName = "futures_bounded";
        dependencies = [
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
        ];

      };
      "futures-channel" = rec {
        crateName = "futures-channel";
        version = "0.3.31";
        edition = "2018";
        sha256 = "040vpqpqlbk099razq8lyn74m0f161zd0rp36hciqrwcg2zibzrd";
        libName = "futures_channel";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" ];
          "default" = [ "std" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "sink" = [ "futures-sink" ];
          "std" = [ "alloc" "futures-core/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "futures-sink" "sink" "std" "unstable" ];
      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0gk6yrxgi5ihfanm2y431jadrll00n5ifhnpx090c2f2q1cr1wh5";
        libName = "futures_core";
        features = {
          "default" = [ "std" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" "unstable" ];
      };
      "futures-executor" = rec {
        crateName = "futures-executor";
        version = "0.3.31";
        edition = "2018";
        sha256 = "17vcci6mdfzx4gbk0wx64chr2f13wwwpvyf3xd5fb1gmjzcx2a0y";
        libName = "futures_executor";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "num_cpus" = [ "dep:num_cpus" ];
          "std" = [ "futures-core/std" "futures-task/std" "futures-util/std" ];
          "thread-pool" = [ "std" "num_cpus" ];
        };
        resolvedDefaultFeatures = [ "default" "num_cpus" "std" "thread-pool" ];
      };
      "futures-intrusive" = rec {
        crateName = "futures-intrusive";
        version = "0.5.0";
        edition = "2018";
        sha256 = "0vwm08d1pli6bdaj0i7xhk3476qlx4pll6i0w03gzdnh7lh0r4qx";
        libName = "futures_intrusive";
        authors = [
          "Matthias Einwag <matthias.einwag@live.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" ];
          "default" = [ "std" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "std" = [ "alloc" "parking_lot" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "parking_lot" "std" ];
      };
      "futures-io" = rec {
        crateName = "futures-io";
        version = "0.3.31";
        edition = "2018";
        sha256 = "1ikmw1yfbgvsychmsihdkwa8a1knank2d9a8dk01mbjar9w1np4y";
        libName = "futures_io";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "unstable" ];
      };
      "futures-lite" = rec {
        crateName = "futures-lite";
        version = "2.6.0";
        edition = "2021";
        sha256 = "0cmmgszlmkwsac9pyw5rfjakmshgx4wmzmlyn6mmjs0jav4axvgm";
        libName = "futures_lite";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Contributors to futures-rs"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "race" "std" ];
          "fastrand" = [ "dep:fastrand" ];
          "futures-io" = [ "dep:futures-io" ];
          "memchr" = [ "dep:memchr" ];
          "parking" = [ "dep:parking" ];
          "race" = [ "fastrand" ];
          "std" = [ "alloc" "fastrand/std" "futures-io" "parking" ];
        };
      };
      "futures-macro" = rec {
        crateName = "futures-macro";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0l1n7kqzwwmgiznn0ywdc5i24z72zvh9q1dwps54mimppi7f6bhn";
        procMacro = true;
        libName = "futures_macro";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "futures-rustls" = rec {
        crateName = "futures-rustls";
        version = "0.26.0";
        edition = "2018";
        sha256 = "1nvaqbblx1svlz0pjrm4rf1c9xd4kjzzlinp5sqnjb7r0wkg3wm8";
        libName = "futures_rustls";
        authors = [
          "quininer kel <quininer@live.com>"
        ];
        dependencies = [
          {
            name = "futures-io";
            packageId = "futures-io";
          }
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
          }
        ];
        features = {
          "aws-lc-rs" = [ "rustls/aws_lc_rs" ];
          "aws_lc_rs" = [ "aws-lc-rs" ];
          "default" = [ "aws-lc-rs" "tls12" "logging" ];
          "fips" = [ "rustls/fips" ];
          "logging" = [ "rustls/logging" ];
          "ring" = [ "rustls/ring" ];
          "tls12" = [ "rustls/tls12" ];
        };
        resolvedDefaultFeatures = [ "ring" ];
      };
      "futures-sink" = rec {
        crateName = "futures-sink";
        version = "0.3.31";
        edition = "2018";
        sha256 = "1xyly6naq6aqm52d5rh236snm08kw8zadydwqz8bip70s6vzlxg5";
        libName = "futures_sink";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-task" = rec {
        crateName = "futures-task";
        version = "0.3.31";
        edition = "2018";
        sha256 = "124rv4n90f5xwfsm9qw6y99755y021cmi5dhzh253s920z77s3zr";
        libName = "futures_task";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" "unstable" ];
      };
      "futures-timer" = rec {
        crateName = "futures-timer";
        version = "3.0.3";
        edition = "2018";
        sha256 = "094vw8k37djpbwv74bwf2qb7n6v6ghif4myss6smd6hgyajb127j";
        libName = "futures_timer";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "gloo-timers" = [ "dep:gloo-timers" ];
          "send_wrapper" = [ "dep:send_wrapper" ];
          "wasm-bindgen" = [ "gloo-timers" "send_wrapper" ];
        };
      };
      "futures-util" = rec {
        crateName = "futures-util";
        version = "0.3.31";
        edition = "2018";
        sha256 = "10aa1ar8bgkgbr4wzxlidkqkcxf77gffyj8j7768h831pcaq784z";
        libName = "futures_util";
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-macro";
            packageId = "futures-macro";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" ];
          "async-await-macro" = [ "async-await" "futures-macro" ];
          "channel" = [ "std" "futures-channel" ];
          "compat" = [ "std" "futures_01" ];
          "default" = [ "std" "async-await" "async-await-macro" ];
          "futures-channel" = [ "dep:futures-channel" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-macro" = [ "dep:futures-macro" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "futures_01" = [ "dep:futures_01" ];
          "io" = [ "std" "futures-io" "memchr" ];
          "io-compat" = [ "io" "compat" "tokio-io" ];
          "memchr" = [ "dep:memchr" ];
          "portable-atomic" = [ "futures-core/portable-atomic" ];
          "sink" = [ "futures-sink" ];
          "slab" = [ "dep:slab" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "slab" ];
          "tokio-io" = [ "dep:tokio-io" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" ];
          "write-all-vectored" = [ "io" ];
        };
        resolvedDefaultFeatures = [ "alloc" "async-await" "async-await-macro" "bilock" "channel" "default" "futures-channel" "futures-io" "futures-macro" "futures-sink" "io" "memchr" "sink" "slab" "std" "unstable" ];
      };
      "fuzzy-matcher" = rec {
        crateName = "fuzzy-matcher";
        version = "0.3.7";
        edition = "2018";
        sha256 = "153csv8rsk2vxagb68kpmiknvdd3bzqj03x805khckck28rllqal";
        libName = "fuzzy_matcher";
        authors = [
          "Jinzhou Zhang <lotabout@gmail.com>"
        ];
        dependencies = [
          {
            name = "thread_local";
            packageId = "thread_local";
          }
        ];
        features = {
        };
      };
      "fxhash" = rec {
        crateName = "fxhash";
        version = "0.2.1";
        edition = "2015";
        sha256 = "037mb9ichariqi45xm6mz0b11pa92gj38ba0409z3iz239sns6y3";
        libPath = "lib.rs";
        authors = [
          "cbreeden <github@u.breeden.cc>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
        ];

      };
      "generic-array 0.12.4" = rec {
        crateName = "generic-array";
        version = "0.12.4";
        edition = "2015";
        sha256 = "1gfpay78vijl9vrwl1k9v7fbvbhkhcmnrk4kfg9l6x24y4s9zpzz";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "generic-array 0.14.7" = rec {
        crateName = "generic-array";
        version = "0.14.7";
        edition = "2015";
        sha256 = "16lyyrzrljfq424c3n8kfwkqihlimmsg5nhshbbp48np3yjrqr45";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "more_lengths" "zeroize" ];
      };
      "getrandom 0.2.16" = rec {
        crateName = "getrandom";
        version = "0.2.16";
        edition = "2018";
        sha256 = "14l5aaia20cc6cc08xdlhrzmfcylmrnprwnna20lqf746pqzjprk";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = { target, features }: ((("wasm32" == target."arch" or null) || ("wasm64" == target."arch" or null)) && ("unknown" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.0+wasi-snapshot-preview1";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((("wasm32" == target."arch" or null) || ("wasm64" == target."arch" or null)) && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "js" = [ "wasm-bindgen" "js-sys" ];
          "js-sys" = [ "dep:js-sys" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "libc/rustc-dep-of-std" "wasi/rustc-dep-of-std" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "js" "js-sys" "std" "wasm-bindgen" ];
      };
      "getrandom 0.3.3" = rec {
        crateName = "getrandom";
        version = "0.3.3";
        edition = "2021";
        sha256 = "1x6jl875zp6b2b6qp9ghc84b0l76bvng2lvm8zfcmwjl7rb5w516";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((("linux" == target."os" or null) || ("android" == target."os" or null)) && (!((("linux" == target."os" or null) && ("" == target."env" or null)) || ("custom" == target."getrandom_backend" or null) || ("linux_raw" == target."getrandom_backend" or null) || ("rdrand" == target."getrandom_backend" or null) || ("rndr" == target."getrandom_backend" or null))));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("hurd" == target."os" or null) || ("illumos" == target."os" or null) || ("cygwin" == target."os" or null) || (("horizon" == target."os" or null) && ("arm" == target."arch" or null)));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("haiku" == target."os" or null) || ("redox" == target."os" or null) || ("nto" == target."os" or null) || ("aix" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("ios" == target."os" or null) || ("visionos" == target."os" or null) || ("watchos" == target."os" or null) || ("tvos" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("macos" == target."os" or null) || ("openbsd" == target."os" or null) || ("vita" == target."os" or null) || ("emscripten" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("netbsd" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("solaris" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("vxworks" == target."os" or null);
          }
          {
            name = "r-efi";
            packageId = "r-efi";
            usesDefaultFeatures = false;
            target = { target, features }: (("uefi" == target."os" or null) && ("efi_rng" == target."getrandom_backend" or null));
          }
          {
            name = "wasi";
            packageId = "wasi 0.14.2+wasi-0.2.4";
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && ("wasi" == target."os" or null) && ("p2" == target."env" or null));
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "dep:compiler_builtins" "dep:core" ];
          "wasm_js" = [ "dep:wasm-bindgen" "dep:js-sys" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "getrandom_or_panic" = rec {
        crateName = "getrandom_or_panic";
        version = "0.0.3";
        edition = "2021";
        sha256 = "1f8h7dvjjkc14akdacmi5jbrvy4a1kjwyc62iml6nqbhb9dh38bf";
        dependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" "getrandom" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "rand" = [ "dep:rand" ];
          "std" = [ "alloc" "getrandom" "rand" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "rand" "std" ];
      };
      "ghash" = rec {
        crateName = "ghash";
        version = "0.5.1";
        edition = "2021";
        sha256 = "1wbg4vdgzwhkpkclz1g6bs4r5x984w5gnlsj4q5wnafb5hva9n7h";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "opaque-debug";
            packageId = "opaque-debug 0.3.1";
          }
          {
            name = "polyval";
            packageId = "polyval";
          }
        ];
        features = {
          "std" = [ "polyval/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "gimli 0.27.3" = rec {
        crateName = "gimli";
        version = "0.27.3";
        edition = "2018";
        sha256 = "0bpdnkyzi3vp2r0wglwrncbk451zhp46mdl83f6xj4gsmy20kj5n";
        dependencies = [
          {
            name = "fallible-iterator";
            packageId = "fallible-iterator 0.2.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
            optional = true;
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "read" "write" "std" "fallible-iterator" "endian-reader" ];
          "endian-reader" = [ "read" "stable_deref_trait" ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "indexmap" = [ "dep:indexmap" ];
          "read" = [ "read-core" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" ];
          "stable_deref_trait" = [ "dep:stable_deref_trait" ];
          "std" = [ "fallible-iterator/std" "stable_deref_trait/std" ];
          "write" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "fallible-iterator" "indexmap" "read" "read-core" "stable_deref_trait" "std" "write" ];
      };
      "gimli 0.31.1" = rec {
        crateName = "gimli";
        version = "0.31.1";
        edition = "2018";
        sha256 = "0gvqc0ramx8szv76jhfd4dms0zyamvlg4whhiz11j34hh3dqxqh7";
        dependencies = [
          {
            name = "fallible-iterator";
            packageId = "fallible-iterator 0.3.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "read-all" "write" ];
          "endian-reader" = [ "read" "dep:stable_deref_trait" ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "read" = [ "read-core" ];
          "read-all" = [ "read" "std" "fallible-iterator" "endian-reader" ];
          "rustc-dep-of-std" = [ "dep:core" "dep:alloc" "dep:compiler_builtins" ];
          "std" = [ "fallible-iterator?/std" "stable_deref_trait?/std" ];
          "write" = [ "dep:indexmap" ];
        };
        resolvedDefaultFeatures = [ "endian-reader" "read" "read-core" "std" ];
      };
      "glob" = rec {
        crateName = "glob";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1cm2w34b5w45fxr522h5b0fv1bxchfswcj560m3pnjbia7asvld8";
        authors = [
          "The Rust Project Developers"
        ];

      };
      "governor" = rec {
        crateName = "governor";
        version = "0.6.3";
        edition = "2018";
        sha256 = "0yw66yb1rfc7np23n9af9sb8kbhv3jnhvg3an1rsydbbxr1gb9v8";
        authors = [
          "Andreas Fuchs <asf@boinkor.net>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "dashmap";
            packageId = "dashmap";
            optional = true;
          }
          {
            name = "futures";
            packageId = "futures";
            optional = true;
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
            optional = true;
          }
          {
            name = "no-std-compat";
            packageId = "no-std-compat";
            features = [ "alloc" ];
          }
          {
            name = "nonzero_ext";
            packageId = "nonzero_ext";
            usesDefaultFeatures = false;
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
            optional = true;
          }
          {
            name = "portable-atomic";
            packageId = "portable-atomic";
            features = [ "require-cas" ];
          }
          {
            name = "quanta";
            packageId = "quanta";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "spinning_top";
            packageId = "spinning_top";
          }
        ];
        devDependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
        ];
        features = {
          "dashmap" = [ "dep:dashmap" ];
          "default" = [ "std" "dashmap" "jitter" "quanta" ];
          "futures" = [ "dep:futures" ];
          "futures-timer" = [ "dep:futures-timer" ];
          "jitter" = [ "rand" ];
          "no_std" = [ "no-std-compat/compat_hash" ];
          "quanta" = [ "dep:quanta" ];
          "rand" = [ "dep:rand" ];
          "std" = [ "no-std-compat/std" "nonzero_ext/std" "futures-timer" "futures" "dep:parking_lot" ];
        };
        resolvedDefaultFeatures = [ "dashmap" "default" "futures" "futures-timer" "jitter" "quanta" "rand" "std" ];
      };
      "group" = rec {
        crateName = "group";
        version = "0.13.0";
        edition = "2021";
        sha256 = "0qqs2p5vqnv3zvq9mfjkmw3qlvgqb0c3cm6p33srkh7pc9sfzygh";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <jack@z.cash>"
        ];
        dependencies = [
          {
            name = "ff";
            packageId = "ff";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle 2.6.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "memuse" = [ "dep:memuse" ];
          "rand" = [ "dep:rand" ];
          "rand_xorshift" = [ "dep:rand_xorshift" ];
          "tests" = [ "alloc" "rand" "rand_xorshift" ];
          "wnaf-memuse" = [ "alloc" "memuse" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "h2 0.3.26" = rec {
        crateName = "h2";
        version = "0.3.26";
        edition = "2018";
        sha256 = "1s7msnfv7xprzs6xzfj5sg6p8bjcdpcqcmjjbkd345cyi1x55zl1";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.9.0";
            features = [ "std" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-util" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = [ "codec" "io" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" "sync" "net" ];
          }
        ];
        features = {
        };
      };
      "h2 0.4.10" = rec {
        crateName = "h2";
        version = "0.4.10";
        edition = "2021";
        sha256 = "19f0va87lhzrc0lmwkgcz1z0haf6glajb4icp0b7n50vdmkilhm9";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "atomic-waker";
            packageId = "atomic-waker";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.9.0";
            features = [ "std" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-util" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = [ "codec" "io" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" "sync" "net" ];
          }
        ];
        features = {
        };
      };
      "half" = rec {
        crateName = "half";
        version = "2.6.0";
        edition = "2021";
        sha256 = "1j83v0xaqvrw50ppn0g33zig0zsbdi7xiqbzgn7sd5al57nrd4a5";
        authors = [
          "Kathryn Long <squeeself@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "crunchy";
            packageId = "crunchy";
            target = { target, features }: ("spirv" == target."arch" or null);
          }
        ];
        devDependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "std" ];
          "num-traits" = [ "dep:num-traits" ];
          "rand_distr" = [ "dep:rand" "dep:rand_distr" ];
          "rkyv" = [ "dep:rkyv" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "zerocopy" = [ "dep:zerocopy" ];
        };
      };
      "hamming" = rec {
        crateName = "hamming";
        version = "0.1.3";
        edition = "2015";
        sha256 = "1q9hri1l1x1y7vv153kvdw9lkqslmbwgia5r3qj6i39pfji3s135";
        authors = [
          "Huon Wilson <dbau.pp@gmail.com>"
        ];
        features = {
        };
      };
      "hash-db" = rec {
        crateName = "hash-db";
        version = "0.16.0";
        edition = "2018";
        sha256 = "1d3abk1l1301rh4x24jj1y2a1yhfxc3y9yg45yp2ax0x6s37fzcf";
        libName = "hash_db";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "hash256-std-hasher" = rec {
        crateName = "hash256-std-hasher";
        version = "0.15.2";
        edition = "2015";
        sha256 = "1wpw3sr931daagy2ri19rk0kd6q90kq0h246sd73yqwqbgap3hcj";
        libName = "hash256_std_hasher";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "hashbrown 0.12.3" = rec {
        crateName = "hashbrown";
        version = "0.12.3";
        edition = "2021";
        sha256 = "1268ka4750pyg2pbgsr43f0289l5zah4arir2k4igx5a8c6fg7la";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "ahash-compile-time-rng" = [ "ahash/compile-time-rng" ];
          "alloc" = [ "dep:alloc" ];
          "bumpalo" = [ "dep:bumpalo" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "raw" ];
      };
      "hashbrown 0.13.2" = rec {
        crateName = "hashbrown";
        version = "0.13.2";
        edition = "2021";
        sha256 = "03ji3n19j4b6mf2wlla81vsixcmlivglp6hgk79d1pcxfcrw38s3";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "alloc" = [ "dep:alloc" ];
          "bumpalo" = [ "dep:bumpalo" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "ahash" "default" "inline-more" "raw" ];
      };
      "hashbrown 0.14.5" = rec {
        crateName = "hashbrown";
        version = "0.14.5";
        edition = "2021";
        sha256 = "1wa1vy1xs3mp11bn3z9dv0jricgr6a2j0zkf1g19yz3vw4il89z5";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "allocator-api2";
            packageId = "allocator-api2";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "alloc" = [ "dep:alloc" ];
          "allocator-api2" = [ "dep:allocator-api2" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" "allocator-api2" ];
          "equivalent" = [ "dep:equivalent" ];
          "nightly" = [ "allocator-api2?/nightly" "bumpalo/allocator_api" ];
          "rayon" = [ "dep:rayon" ];
          "rkyv" = [ "dep:rkyv" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "ahash" "allocator-api2" "default" "inline-more" "raw" ];
      };
      "hashbrown 0.15.3" = rec {
        crateName = "hashbrown";
        version = "0.15.3";
        edition = "2021";
        sha256 = "1cwfw1yzkvsqkhmkg5igdvgsl8a0wyi716cn83k2j8h09ma6rcl4";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "allocator-api2";
            packageId = "allocator-api2";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "equivalent";
            packageId = "equivalent";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "foldhash";
            packageId = "foldhash";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "allocator-api2" = [ "dep:allocator-api2" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "default-hasher" "inline-more" "allocator-api2" "equivalent" "raw-entry" ];
          "default-hasher" = [ "dep:foldhash" ];
          "equivalent" = [ "dep:equivalent" ];
          "nightly" = [ "bumpalo/allocator_api" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "allocator-api2" "default" "default-hasher" "equivalent" "inline-more" "raw-entry" ];
      };
      "hashlink 0.10.0" = rec {
        crateName = "hashlink";
        version = "0.10.0";
        edition = "2018";
        sha256 = "1h8lzvnl9qxi3zyagivzz2p1hp6shgddfmccyf6jv7s1cdicz0kk";
        authors = [
          "kyren <kerriganw@gmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.3";
            usesDefaultFeatures = false;
            features = [ "default-hasher" "inline-more" ];
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde_impl" = [ "serde" ];
        };
      };
      "hashlink 0.8.4" = rec {
        crateName = "hashlink";
        version = "0.8.4";
        edition = "2018";
        sha256 = "1xy8agkyp0llbqk9fcffc1xblayrrywlyrm2a7v93x8zygm4y2g8";
        authors = [
          "kyren <kerriganw@gmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde_impl" = [ "serde" ];
        };
      };
      "hashlink 0.9.1" = rec {
        crateName = "hashlink";
        version = "0.9.1";
        edition = "2018";
        sha256 = "1byq4nyrflm5s6wdx5qwp96l1qbp2d0nljvrr5yqrsfy51qzz93b";
        authors = [
          "kyren <kerriganw@gmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            usesDefaultFeatures = false;
            features = [ "ahash" "inline-more" ];
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde_impl" = [ "serde" ];
        };
      };
      "heck 0.4.1" = rec {
        crateName = "heck";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1a7mqsnycv5z4z5vnv1k34548jzmc0ajic7c1j8jsaspnhw5ql4m";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        features = {
          "unicode" = [ "unicode-segmentation" ];
          "unicode-segmentation" = [ "dep:unicode-segmentation" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "heck 0.5.0" = rec {
        crateName = "heck";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1sjmpsdl8czyh9ywl3qcsfsq9a307dg4ni2vnlwgnzzqhc4y0113";

      };
      "hermit-abi 0.3.9" = rec {
        crateName = "hermit-abi";
        version = "0.3.9";
        edition = "2021";
        sha256 = "092hxjbjnq5fmz66grd9plxd0sh6ssg5fhgwwwqbrzgzkjwdycfj";
        libName = "hermit_abi";
        authors = [
          "Stefan Lankes"
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hermit-abi 0.4.0" = rec {
        crateName = "hermit-abi";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1k1zwllx6nfq417hy38x4akw1ivlv68ymvnzyxs76ffgsqcskxpv";
        libName = "hermit_abi";
        authors = [
          "Stefan Lankes"
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hermit-abi 0.5.1" = rec {
        crateName = "hermit-abi";
        version = "0.5.1";
        edition = "2021";
        sha256 = "026bh0y8gpfd62gjm7gx6nyf6bgdyxdn0jc67i1ysl37hm3cwm7i";
        libName = "hermit_abi";
        authors = [
          "Stefan Lankes"
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hex" = rec {
        crateName = "hex";
        version = "0.4.3";
        edition = "2018";
        sha256 = "0w1a4davm1lgzpamwnba907aysmlrnygbqmfis2mqjx5m552a93z";
        authors = [
          "KokaKiwi <kokakiwi@kokakiwi.net>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "hex-conservative 0.1.2" = rec {
        crateName = "hex-conservative";
        version = "0.1.2";
        edition = "2018";
        sha256 = "085xvjs4fzq7kdf67s298f9l10byi5n0098074clhjrm08hbjai1";
        libName = "hex_conservative";
        authors = [
          "Andrew Poelstra <apoelstra@wpsoftware.net>"
        ];
        features = {
          "core2" = [ "dep:core2" ];
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
      };
      "hex-conservative 0.2.1" = rec {
        crateName = "hex-conservative";
        version = "0.2.1";
        edition = "2018";
        sha256 = "1kg6xb2n59zpid87kdgqvc5mks68qh9gdnq8m1jp0n9wrrrb04sk";
        libName = "hex_conservative";
        authors = [
          "Martin Habovštiak <martin.habovstiak@gmail.com>"
          "Andrew Poelstra <apoelstra@wpsoftware.net>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec 0.7.6";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "core2" = [ "dep:core2" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "hex-literal 0.4.1" = rec {
        crateName = "hex-literal";
        version = "0.4.1";
        edition = "2021";
        sha256 = "0iny5inkixsdr41pm2vkqh3fl66752z5j5c0cdxw16yl9ryjdqkg";
        libName = "hex_literal";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "hex-literal 1.0.0" = rec {
        crateName = "hex-literal";
        version = "1.0.0";
        edition = "2024";
        sha256 = "0wdyyq00ahhg344sd3j0k10kv1cp2cy913696n9rck2ra52yramw";
        libName = "hex_literal";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "hickory-proto" = rec {
        crateName = "hickory-proto";
        version = "0.24.4";
        edition = "2021";
        sha256 = "0j3j26brvg83a4xvdlvxxgkycdmaklbd2f6cag76cvyfr5kj0rcj";
        libName = "hickory_proto";
        authors = [
          "The contributors to Hickory DNS"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "enum-as-inner";
            packageId = "enum-as-inner";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "idna";
            packageId = "idna";
          }
          {
            name = "ipnet";
            packageId = "ipnet";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "alloc" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "io-util" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt" "time" "macros" ];
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "bytes" = [ "dep:bytes" ];
          "default" = [ "tokio-runtime" ];
          "dns-over-h3" = [ "h3" "h3-quinn" "quinn" "http" "dns-over-quic" ];
          "dns-over-https" = [ "bytes" "h2" "http" "dns-over-rustls" "tokio-runtime" ];
          "dns-over-https-rustls" = [ "dns-over-https" ];
          "dns-over-native-tls" = [ "dns-over-tls" "native-tls" "tokio-native-tls" "tokio-runtime" ];
          "dns-over-openssl" = [ "dns-over-tls" "openssl" "tokio-openssl" "tokio-runtime" ];
          "dns-over-quic" = [ "quinn" "rustls/quic" "dns-over-rustls" "bytes" "tokio-runtime" ];
          "dns-over-rustls" = [ "dns-over-tls" "rustls" "rustls-pemfile" "tokio-rustls" "tokio-runtime" ];
          "dnssec-openssl" = [ "dnssec" "openssl" ];
          "dnssec-ring" = [ "dnssec" "ring" ];
          "h2" = [ "dep:h2" ];
          "h3" = [ "dep:h3" ];
          "h3-quinn" = [ "dep:h3-quinn" ];
          "http" = [ "dep:http" ];
          "js-sys" = [ "dep:js-sys" ];
          "mdns" = [ "socket2/all" ];
          "native-certs" = [ "dep:rustls-native-certs" ];
          "native-tls" = [ "dep:native-tls" ];
          "openssl" = [ "dep:openssl" ];
          "quinn" = [ "dep:quinn" ];
          "ring" = [ "dep:ring" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-pemfile" = [ "dep:rustls-pemfile" ];
          "serde" = [ "dep:serde" ];
          "serde-config" = [ "serde" "url/serde" ];
          "socket2" = [ "dep:socket2" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-native-tls" = [ "dep:tokio-native-tls" ];
          "tokio-openssl" = [ "dep:tokio-openssl" ];
          "tokio-runtime" = [ "tokio/net" "tokio/rt" "tokio/time" "tokio/rt-multi-thread" ];
          "tokio-rustls" = [ "dep:tokio-rustls" ];
          "wasm-bindgen" = [ "wasm-bindgen-crate" "js-sys" ];
          "wasm-bindgen-crate" = [ "dep:wasm-bindgen-crate" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "mdns" "socket2" "tokio" "tokio-runtime" ];
      };
      "hickory-resolver" = rec {
        crateName = "hickory-resolver";
        version = "0.24.4";
        edition = "2021";
        sha256 = "0bnjdykfip04lr2ja97aw2s9vrnyxn46cbxb8cbi23jjrahigcfb";
        libName = "hickory_resolver";
        authors = [
          "The contributors to Hickory DNS"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "hickory-proto";
            packageId = "hickory-proto";
            usesDefaultFeatures = false;
          }
          {
            name = "ipconfig";
            packageId = "ipconfig";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "lru-cache";
            packageId = "lru-cache";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "resolv-conf";
            packageId = "resolv-conf";
            optional = true;
            features = [ "system" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "test-util" ];
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" "hickory-proto/backtrace" ];
          "default" = [ "system-config" "tokio-runtime" ];
          "dns-over-h3" = [ "dns-over-rustls" "hickory-proto/dns-over-h3" ];
          "dns-over-https" = [ "hickory-proto/dns-over-https" ];
          "dns-over-https-rustls" = [ "hickory-proto/dns-over-https-rustls" "dns-over-rustls" "dns-over-https" ];
          "dns-over-native-tls" = [ "dns-over-tls" "tokio-native-tls" "hickory-proto/dns-over-native-tls" ];
          "dns-over-openssl" = [ "dns-over-tls" "hickory-proto/dns-over-openssl" "tokio-openssl" ];
          "dns-over-quic" = [ "rustls/quic" "dns-over-rustls" "hickory-proto/dns-over-quic" ];
          "dns-over-rustls" = [ "dns-over-tls" "rustls" "tokio-rustls" "hickory-proto/dns-over-rustls" ];
          "dns-over-tls" = [ "tokio-runtime" ];
          "dnssec-openssl" = [ "dnssec" "hickory-proto/dnssec-openssl" ];
          "dnssec-ring" = [ "dnssec" "hickory-proto/dnssec-ring" ];
          "ipconfig" = [ "dep:ipconfig" ];
          "native-certs" = [ "dep:rustls-native-certs" "hickory-proto/native-certs" ];
          "resolv-conf" = [ "dep:resolv-conf" ];
          "rustls" = [ "dep:rustls" ];
          "serde" = [ "dep:serde" ];
          "serde-config" = [ "serde" "hickory-proto/serde-config" ];
          "system-config" = [ "ipconfig" "resolv-conf" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-native-tls" = [ "dep:tokio-native-tls" ];
          "tokio-openssl" = [ "dep:tokio-openssl" ];
          "tokio-runtime" = [ "tokio/rt" "hickory-proto/tokio-runtime" ];
          "tokio-rustls" = [ "dep:tokio-rustls" ];
          "webpki-roots" = [ "dep:webpki-roots" "hickory-proto/webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "default" "ipconfig" "resolv-conf" "system-config" "tokio" "tokio-runtime" ];
      };
      "hkdf" = rec {
        crateName = "hkdf";
        version = "0.12.4";
        edition = "2018";
        sha256 = "1xxxzcarz151p1b858yn5skmhyrvn8fs4ivx5km3i1kjmnr8wpvv";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
          }
        ];
        features = {
          "std" = [ "hmac/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "hmac 0.12.1" = rec {
        crateName = "hmac";
        version = "0.12.1";
        edition = "2018";
        sha256 = "0pmbr069sfg76z7wsssfk5ddcqd9ncp79fyz6zcm6yn115yc6jbc";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "mac" ];
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "reset" "std" ];
      };
      "hmac 0.8.1" = rec {
        crateName = "hmac";
        version = "0.8.1";
        edition = "2018";
        sha256 = "0h48wc7iysh4xd6ci4prh8bb7nszijrh9w3blaaq8a6cilk8hs0j";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-mac";
            packageId = "crypto-mac 0.8.0";
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
        ];
        devDependencies = [
          {
            name = "crypto-mac";
            packageId = "crypto-mac 0.8.0";
            features = [ "dev" ];
          }
        ];

      };
      "hmac-drbg" = rec {
        crateName = "hmac-drbg";
        version = "0.3.0";
        edition = "2018";
        sha256 = "1cc5ddks8bg3512fzrd4n2gqr1kqkvg1l33fv9s6anyzjh9hmshp";
        libName = "hmac_drbg";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
          }
          {
            name = "hmac";
            packageId = "hmac 0.8.1";
          }
        ];

      };
      "home" = rec {
        crateName = "home";
        version = "0.5.11";
        edition = "2021";
        sha256 = "1kxb4k87a9sayr8jipr7nq9wpgmjk4hk4047hmf9kc24692k75aq";
        authors = [
          "Brian Anderson <andersrb@gmail.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_UI_Shell" "Win32_System_Com" ];
          }
        ];

      };
      "http 0.2.12" = rec {
        crateName = "http";
        version = "0.2.12";
        edition = "2018";
        sha256 = "1w81s4bcbmcj9bjp7mllm8jlz6b31wzvirz8bgpzbqkpwmbvn730";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
        ];

      };
      "http 1.3.1" = rec {
        crateName = "http";
        version = "1.3.1";
        edition = "2018";
        sha256 = "0r95i5h7dr1xadp1ac9453w0s62s27hzkam356nyx2d9mqqmva7l";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "http-body 0.4.6" = rec {
        crateName = "http-body";
        version = "0.4.6";
        edition = "2018";
        sha256 = "1lmyjfk6bqk6k9gkn1dxq770sb78pqbqshga241hr5p995bb5skw";
        libName = "http_body";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];

      };
      "http-body 1.0.1" = rec {
        crateName = "http-body";
        version = "1.0.1";
        edition = "2018";
        sha256 = "111ir5k2b9ihz5nr9cz7cwm7fnydca7dx4hc7vr16scfzghxrzhy";
        libName = "http_body";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
        ];

      };
      "http-body-util" = rec {
        crateName = "http-body-util";
        version = "0.1.3";
        edition = "2018";
        sha256 = "0jm6jv4gxsnlsi1kzdyffjrj8cfr3zninnxpw73mvkxy4qzdj8dh";
        libName = "http_body_util";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "channel" = [ "dep:tokio" ];
          "full" = [ "channel" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "httparse" = rec {
        crateName = "httparse";
        version = "1.10.1";
        edition = "2018";
        sha256 = "11ycd554bw2dkgw0q61xsa7a4jn1wb1xbfacmf3dbwsikvkkvgvd";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "httpdate" = rec {
        crateName = "httpdate";
        version = "1.0.3";
        edition = "2021";
        sha256 = "1aa9rd2sac0zhjqh24c9xvir96g188zldkx0hr6dnnlx5904cfyz";
        authors = [
          "Pyfisch <pyfisch@posteo.org>"
        ];

      };
      "humantime" = rec {
        crateName = "humantime";
        version = "2.2.0";
        edition = "2021";
        sha256 = "17rz8jhh1mcv4b03wnknhv1shwq2v9vhkhlfg884pprsig62l4cv";

      };
      "hyper 0.14.32" = rec {
        crateName = "hyper";
        version = "0.14.32";
        edition = "2018";
        sha256 = "1rvcb0smz8q1i0y6p7rwxr02x5sclfg2hhxf3g0774zczn0cgps1";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2 0.3.26";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "http-body";
            packageId = "http-body 0.4.6";
          }
          {
            name = "httparse";
            packageId = "httparse";
          }
          {
            name = "httpdate";
            packageId = "httpdate";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            features = [ "all" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "want";
            packageId = "want";
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "fs" "macros" "io-std" "io-util" "rt" "rt-multi-thread" "sync" "time" "test-util" ];
          }
        ];
        features = {
          "ffi" = [ "libc" ];
          "full" = [ "client" "http1" "http2" "server" "stream" "runtime" ];
          "h2" = [ "dep:h2" ];
          "http2" = [ "h2" ];
          "libc" = [ "dep:libc" ];
          "runtime" = [ "tcp" "tokio/rt" "tokio/time" ];
          "socket2" = [ "dep:socket2" ];
          "tcp" = [ "socket2" "tokio/net" "tokio/rt" "tokio/time" ];
        };
        resolvedDefaultFeatures = [ "client" "h2" "http1" "http2" "runtime" "socket2" "tcp" ];
      };
      "hyper 1.6.0" = rec {
        crateName = "hyper";
        version = "1.6.0";
        edition = "2021";
        sha256 = "103ggny2k31z0iq2gzwk2vbx601wx6xkpjpxn40hr3p3b0b5fayc";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2 0.4.10";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "httparse";
            packageId = "httparse";
            optional = true;
          }
          {
            name = "httpdate";
            packageId = "httpdate";
            optional = true;
          }
          {
            name = "itoa";
            packageId = "itoa";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
            features = [ "const_generics" "const_new" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "want";
            packageId = "want";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            features = [ "sink" ];
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" "sink" ];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "fs" "macros" "net" "io-std" "io-util" "rt" "rt-multi-thread" "sync" "time" "test-util" ];
          }
        ];
        features = {
          "client" = [ "dep:want" "dep:pin-project-lite" "dep:smallvec" ];
          "ffi" = [ "dep:http-body-util" "futures-util?/alloc" ];
          "full" = [ "client" "http1" "http2" "server" ];
          "http1" = [ "dep:futures-channel" "dep:futures-util" "dep:httparse" "dep:itoa" ];
          "http2" = [ "dep:futures-channel" "dep:futures-util" "dep:h2" ];
          "server" = [ "dep:httpdate" "dep:pin-project-lite" "dep:smallvec" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "client" "default" "http1" "http2" "server" ];
      };
      "hyper-rustls" = rec {
        crateName = "hyper-rustls";
        version = "0.27.5";
        edition = "2021";
        sha256 = "1cjr3yf3x5mr3194llsfibacl6j7n2dknii2dwjha4ysyf1ia69d";
        libName = "hyper_rustls";
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "hyper";
            packageId = "hyper 1.6.0";
            usesDefaultFeatures = false;
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            usesDefaultFeatures = false;
            features = [ "client-legacy" "tokio" ];
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls";
            usesDefaultFeatures = false;
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "hyper-util";
            packageId = "hyper-util";
            usesDefaultFeatures = false;
            features = [ "server-auto" ];
          }
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
            features = [ "tls12" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-std" "macros" "net" "rt-multi-thread" ];
          }
        ];
        features = {
          "aws-lc-rs" = [ "rustls/aws_lc_rs" ];
          "default" = [ "native-tokio" "http1" "tls12" "logging" "aws-lc-rs" ];
          "fips" = [ "aws-lc-rs" "rustls/fips" ];
          "http1" = [ "hyper-util/http1" ];
          "http2" = [ "hyper-util/http2" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" "tokio-rustls/logging" "rustls/logging" ];
          "native-tokio" = [ "rustls-native-certs" ];
          "ring" = [ "rustls/ring" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-platform-verifier" = [ "dep:rustls-platform-verifier" ];
          "tls12" = [ "tokio-rustls/tls12" "rustls/tls12" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
          "webpki-tokio" = [ "webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "http1" "http2" "log" "logging" "ring" "tls12" ];
      };
      "hyper-util" = rec {
        crateName = "hyper-util";
        version = "0.1.11";
        edition = "2021";
        sha256 = "1wj3svb1r6yv6kgk5fsz6wwajmngc4zxcw4wxpwlmpbgl8rvqys9";
        libName = "hyper_util";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "hyper";
            packageId = "hyper 1.6.0";
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            features = [ "all" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tower-service";
            packageId = "tower-service";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "hyper";
            packageId = "hyper 1.6.0";
            features = [ "full" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "test-util" "signal" ];
          }
        ];
        features = {
          "client" = [ "hyper/client" "dep:tracing" "dep:futures-channel" "dep:tower-service" ];
          "client-legacy" = [ "client" "dep:socket2" "tokio/sync" "dep:libc" ];
          "full" = [ "client" "client-legacy" "server" "server-auto" "server-graceful" "service" "http1" "http2" "tokio" "tracing" ];
          "http1" = [ "hyper/http1" ];
          "http2" = [ "hyper/http2" ];
          "server" = [ "hyper/server" ];
          "server-auto" = [ "server" "http1" "http2" ];
          "server-graceful" = [ "server" "tokio/sync" "futures-util/alloc" ];
          "service" = [ "dep:tower-service" ];
          "tokio" = [ "dep:tokio" "tokio/net" "tokio/rt" "tokio/time" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "client" "client-legacy" "default" "http1" "http2" "server" "server-auto" "server-graceful" "service" "tokio" ];
      };
      "iana-time-zone" = rec {
        crateName = "iana-time-zone";
        version = "0.1.63";
        edition = "2021";
        sha256 = "1n171f5lbc7bryzmp1h30zw86zbvl5480aq02z92lcdwvvjikjdh";
        libName = "iana_time_zone";
        authors = [
          "Andrew Straw <strawman@astraw.com>"
          "René Kijewski <rene.kijewski@fu-berlin.de>"
          "Ryan Lopopolo <rjl@hyperbo.la>"
        ];
        dependencies = [
          {
            name = "android_system_properties";
            packageId = "android_system_properties";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            target = { target, features }: ("apple" == target."vendor" or null);
          }
          {
            name = "iana-time-zone-haiku";
            packageId = "iana-time-zone-haiku";
            target = { target, features }: ("haiku" == target."os" or null);
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "windows-core";
            packageId = "windows-core 0.61.0";
            target = { target, features }: ("windows" == target."os" or null);
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "fallback" ];
      };
      "iana-time-zone-haiku" = rec {
        crateName = "iana-time-zone-haiku";
        version = "0.1.2";
        edition = "2018";
        sha256 = "17r6jmj31chn7xs9698r122mapq85mfnv98bb4pg6spm0si2f67k";
        libName = "iana_time_zone_haiku";
        authors = [
          "René Kijewski <crates.io@k6i.de>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "icu_collections" = rec {
        crateName = "icu_collections";
        version = "2.0.0";
        edition = "2021";
        sha256 = "0izfgypv1hsxlz1h8fc2aak641iyvkak16aaz5b4aqg3s3sp4010";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "potential_utf";
            packageId = "potential_utf";
            usesDefaultFeatures = false;
            features = [ "zerovec" ];
          }
          {
            name = "yoke";
            packageId = "yoke";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "derive" "yoke" ];
          }
        ];
        features = {
          "alloc" = [ "zerovec/alloc" ];
          "databake" = [ "dep:databake" "zerovec/databake" ];
          "serde" = [ "dep:serde" "zerovec/serde" "potential_utf/serde" "alloc" ];
        };
      };
      "icu_locale_core" = rec {
        crateName = "icu_locale_core";
        version = "2.0.0";
        edition = "2021";
        sha256 = "02phv7vwhyx6vmaqgwkh2p4kc2kciykv2px6g4h8glxfrh02gphc";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "litemap";
            packageId = "litemap";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tinystr";
            packageId = "tinystr";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "writeable";
            packageId = "writeable";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "databake" = [ "dep:databake" "alloc" ];
          "serde" = [ "dep:serde" "tinystr/serde" "alloc" ];
          "zerovec" = [ "dep:zerovec" "tinystr/zerovec" ];
        };
        resolvedDefaultFeatures = [ "zerovec" ];
      };
      "icu_normalizer" = rec {
        crateName = "icu_normalizer";
        version = "2.0.0";
        edition = "2021";
        sha256 = "0ybrnfnxx4sf09gsrxri8p48qifn54il6n3dq2xxgx4dw7l80s23";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_collections";
            packageId = "icu_collections";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_normalizer_data";
            packageId = "icu_normalizer_data";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "icu_properties";
            packageId = "icu_properties";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "icu_provider";
            packageId = "icu_provider";
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "compiled_data" = [ "dep:icu_normalizer_data" "icu_properties?/compiled_data" "icu_provider/baked" ];
          "datagen" = [ "serde" "dep:databake" "icu_properties" "icu_collections/databake" "zerovec/databake" "icu_properties?/datagen" "icu_provider/export" ];
          "default" = [ "compiled_data" "utf8_iter" "utf16_iter" ];
          "icu_properties" = [ "dep:icu_properties" ];
          "serde" = [ "dep:serde" "icu_collections/serde" "zerovec/serde" "icu_properties?/serde" "icu_provider/serde" ];
          "utf16_iter" = [ "dep:utf16_iter" "write16" ];
          "utf8_iter" = [ "dep:utf8_iter" ];
          "write16" = [ "dep:write16" ];
        };
        resolvedDefaultFeatures = [ "compiled_data" ];
      };
      "icu_normalizer_data" = rec {
        crateName = "icu_normalizer_data";
        version = "2.0.0";
        edition = "2021";
        sha256 = "1lvjpzxndyhhjyzd1f6vi961gvzhj244nribfpdqxjdgjdl0s880";
        authors = [
          "The ICU4X Project Developers"
        ];

      };
      "icu_properties" = rec {
        crateName = "icu_properties";
        version = "2.0.0";
        edition = "2021";
        sha256 = "16hk94ng18d1r8989yr4inswacfr2psad8hbr1cjzj21fa6clj95";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_collections";
            packageId = "icu_collections";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_locale_core";
            packageId = "icu_locale_core";
            usesDefaultFeatures = false;
            features = [ "zerovec" ];
          }
          {
            name = "icu_properties_data";
            packageId = "icu_properties_data";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "icu_provider";
            packageId = "icu_provider";
            usesDefaultFeatures = false;
          }
          {
            name = "potential_utf";
            packageId = "potential_utf";
            usesDefaultFeatures = false;
            features = [ "zerovec" ];
          }
          {
            name = "zerotrie";
            packageId = "zerotrie";
            usesDefaultFeatures = false;
            features = [ "yoke" "zerofrom" ];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "derive" "yoke" ];
          }
        ];
        features = {
          "alloc" = [ "zerovec/alloc" "icu_collections/alloc" ];
          "compiled_data" = [ "dep:icu_properties_data" "icu_provider/baked" ];
          "datagen" = [ "serde" "dep:databake" "potential_utf/databake" "zerovec/databake" "icu_collections/databake" "icu_locale_core/databake" "zerotrie/databake" "icu_provider/export" ];
          "default" = [ "compiled_data" ];
          "serde" = [ "dep:serde" "icu_locale_core/serde" "potential_utf/serde" "zerovec/serde" "icu_collections/serde" "icu_provider/serde" "zerotrie/serde" ];
          "unicode_bidi" = [ "dep:unicode-bidi" ];
        };
        resolvedDefaultFeatures = [ "compiled_data" ];
      };
      "icu_properties_data" = rec {
        crateName = "icu_properties_data";
        version = "2.0.0";
        edition = "2021";
        sha256 = "016yaw60mm4m21zr7chq9c00dv1vj1rf2jajv7vzhs3vwikfi5w1";
        authors = [
          "The ICU4X Project Developers"
        ];

      };
      "icu_provider" = rec {
        crateName = "icu_provider";
        version = "2.0.0";
        edition = "2021";
        sha256 = "1bz5v02gxv1i06yhdhs2kbwxkw3ny9r2vvj9j288fhazgfi0vj03";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_locale_core";
            packageId = "icu_locale_core";
            usesDefaultFeatures = false;
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
          {
            name = "tinystr";
            packageId = "tinystr";
            usesDefaultFeatures = false;
          }
          {
            name = "writeable";
            packageId = "writeable";
            usesDefaultFeatures = false;
          }
          {
            name = "yoke";
            packageId = "yoke";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "zerotrie";
            packageId = "zerotrie";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "icu_locale_core/alloc" "zerovec/alloc" "zerotrie/alloc" ];
          "baked" = [ "zerotrie" ];
          "deserialize_bincode_1" = [ "serde" "dep:bincode" "std" ];
          "deserialize_json" = [ "serde" "dep:serde_json" ];
          "deserialize_postcard_1" = [ "serde" "dep:postcard" ];
          "export" = [ "serde" "dep:erased-serde" "dep:databake" "std" "sync" "dep:postcard" "zerovec/databake" ];
          "logging" = [ "dep:log" ];
          "serde" = [ "dep:serde" "yoke/serde" ];
          "std" = [ "alloc" ];
          "zerotrie" = [ "dep:zerotrie" ];
        };
        resolvedDefaultFeatures = [ "baked" "zerotrie" ];
      };
      "ident_case" = rec {
        crateName = "ident_case";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0fac21q6pwns8gh1hz3nbq15j8fi441ncl6w4vlnd1cmc55kiq5r";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];

      };
      "idna" = rec {
        crateName = "idna";
        version = "1.0.3";
        edition = "2018";
        sha256 = "0zlajvm2k3wy0ay8plr07w22hxkkmrxkffa6ah57ac6nci984vv8";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "idna_adapter";
            packageId = "idna_adapter";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = [ "const_generics" ];
          }
          {
            name = "utf8_iter";
            packageId = "utf8_iter";
          }
        ];
        features = {
          "compiled_data" = [ "idna_adapter/compiled_data" ];
          "default" = [ "std" "compiled_data" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "compiled_data" "default" "std" ];
      };
      "idna_adapter" = rec {
        crateName = "idna_adapter";
        version = "1.2.1";
        edition = "2021";
        sha256 = "0i0339pxig6mv786nkqcxnwqa87v4m94b2653f6k3aj0jmhfkjis";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "icu_normalizer";
            packageId = "icu_normalizer";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_properties";
            packageId = "icu_properties";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "compiled_data" = [ "icu_normalizer/compiled_data" "icu_properties/compiled_data" ];
        };
        resolvedDefaultFeatures = [ "compiled_data" ];
      };
      "if-addrs" = rec {
        crateName = "if-addrs";
        version = "0.10.2";
        edition = "2018";
        sha256 = "02lgvpz14a7qx3s704i18xf3dp6ywniwij8mzy0kfr0sslch1fya";
        libName = "if_addrs";
        authors = [
          "MaidSafe Developers <dev@maidsafe.net>"
          "Messense Lv <messense@icloud.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!("windows" == target."os" or null));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "Win32_Foundation" "Win32_System_Memory" "Win32_Networking_WinSock" "Win32_NetworkManagement_IpHelper" "Win32_NetworkManagement_Ndis" ];
          }
        ];
        features = {
        };
      };
      "if-watch" = rec {
        crateName = "if-watch";
        version = "3.2.1";
        edition = "2021";
        sha256 = "0f6y7ixim8bg38aq9ycr24rnasv1jgsbr87rcip6107kzi6ddyfd";
        libName = "if_watch";type = [ "cdylib" "lib" ];
        authors = [
          "David Craven <david@craven.ch>"
          "Parity Technologies Limited <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-io";
            packageId = "async-io";
            target = { target, features }: (!(("ios" == target."os" or null) || ("linux" == target."os" or null) || ("macos" == target."os" or null) || ("windows" == target."os" or null)));
          }
          {
            name = "core-foundation";
            packageId = "core-foundation 0.9.4";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "if-addrs";
            packageId = "if-addrs";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "if-addrs";
            packageId = "if-addrs";
            target = { target, features }: (!(("ios" == target."os" or null) || ("linux" == target."os" or null) || ("macos" == target."os" or null) || ("windows" == target."os" or null)));
          }
          {
            name = "if-addrs";
            packageId = "if-addrs";
            target = { target, features }: ("windows" == target."os" or null);
          }
          {
            name = "ipnet";
            packageId = "ipnet";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "netlink-packet-core";
            packageId = "netlink-packet-core";
            usesDefaultFeatures = false;
            target = { target, features }: ("linux" == target."os" or null);
          }
          {
            name = "netlink-packet-route";
            packageId = "netlink-packet-route";
            usesDefaultFeatures = false;
            target = { target, features }: ("linux" == target."os" or null);
          }
          {
            name = "netlink-proto";
            packageId = "netlink-proto";
            usesDefaultFeatures = false;
            target = { target, features }: ("linux" == target."os" or null);
          }
          {
            name = "netlink-sys";
            packageId = "netlink-sys";
            usesDefaultFeatures = false;
            target = { target, features }: ("linux" == target."os" or null);
          }
          {
            name = "rtnetlink";
            packageId = "rtnetlink";
            usesDefaultFeatures = false;
            target = { target, features }: ("linux" == target."os" or null);
          }
          {
            name = "system-configuration";
            packageId = "system-configuration";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
            features = [ "rt" ];
          }
          {
            name = "windows";
            packageId = "windows";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "Win32_NetworkManagement_IpHelper" "Win32_Foundation" "Win32_NetworkManagement_Ndis" "Win32_Networking_WinSock" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt" "macros" ];
          }
        ];
        features = {
          "smol" = [ "dep:smol" "rtnetlink/smol_socket" ];
          "tokio" = [ "dep:tokio" "rtnetlink/tokio_socket" ];
        };
        resolvedDefaultFeatures = [ "tokio" ];
      };
      "igd-next" = rec {
        crateName = "igd-next";
        version = "0.14.3";
        edition = "2021";
        sha256 = "1r29bzibllsjas8qgcd22j8hva55fn4av7mkwy210m0dq7z90k86";
        libName = "igd_next";
        authors = [
          "Darius C"
          "Simon Bernier St-Pierre <sbernierstpierre@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "attohttpc";
            packageId = "attohttpc";
            usesDefaultFeatures = false;
          }
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "futures";
            packageId = "futures";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
            optional = true;
          }
          {
            name = "hyper";
            packageId = "hyper 0.14.32";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "client" "http1" "http2" "runtime" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "net" ];
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "xmltree";
            packageId = "xmltree";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "aio_async_std" = [ "futures" "async-std" "surf/h1-client-rustls" "bytes" "http" "async-trait" ];
          "aio_tokio" = [ "futures" "tokio" "hyper" "bytes" "http" "async-trait" ];
          "async-std" = [ "dep:async-std" ];
          "async-trait" = [ "dep:async-trait" ];
          "bytes" = [ "dep:bytes" ];
          "futures" = [ "dep:futures" ];
          "http" = [ "dep:http" ];
          "hyper" = [ "dep:hyper" ];
          "surf" = [ "dep:surf" ];
          "tokio" = [ "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "aio_tokio" "async-trait" "bytes" "default" "futures" "http" "hyper" "tokio" ];
      };
      "impl-codec" = rec {
        crateName = "impl-codec";
        version = "0.7.1";
        edition = "2021";
        sha256 = "051siq2za0qilaw7wvbfg20qgiid5g1az3h2amz409vpw7avjh1d";
        libName = "impl_codec";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "max-encoded-len" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "parity-scale-codec/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "impl-num-traits" = rec {
        crateName = "impl-num-traits";
        version = "0.2.0";
        edition = "2021";
        sha256 = "132b1awmhpvh62px1xwvf77lri6bi8andwmd0rkwbp5h3931agc0";
        libName = "impl_num_traits";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "integer-sqrt";
            packageId = "integer-sqrt";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "uint";
            packageId = "uint 0.10.0";
            usesDefaultFeatures = false;
          }
        ];

      };
      "impl-serde" = rec {
        crateName = "impl-serde";
        version = "0.5.0";
        edition = "2021";
        sha256 = "02yxnw13w4vpgg82dh7qckypnnbddai3g404lpplmv51lsnkw52a";
        libName = "impl_serde";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "serde/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "impl-trait-for-tuples" = rec {
        crateName = "impl-trait-for-tuples";
        version = "0.2.3";
        edition = "2021";
        sha256 = "1nagmq8p805hlg04zqknjd9sjp8h5d5n1r2gk304iy5b8crmmsx0";
        procMacro = true;
        libName = "impl_trait_for_tuples";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "visit" "fold" "extra-traits" ];
          }
        ];

      };
      "include_dir" = rec {
        crateName = "include_dir";
        version = "0.7.4";
        edition = "2021";
        sha256 = "1pfh3g45z88kwq93skng0n6g3r7zkhq9ldqs9y8rvr7i11s12gcj";
        authors = [
          "Michael Bryan <michaelfbryan@gmail.com>"
        ];
        dependencies = [
          {
            name = "include_dir_macros";
            packageId = "include_dir_macros";
          }
        ];
        features = {
          "glob" = [ "dep:glob" ];
          "metadata" = [ "include_dir_macros/metadata" ];
          "nightly" = [ "include_dir_macros/nightly" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "include_dir_macros" = rec {
        crateName = "include_dir_macros";
        version = "0.7.4";
        edition = "2021";
        sha256 = "0x8smnf6knd86g69p19z5lpfsaqp8w0nx14kdpkz1m8bxnkqbavw";
        procMacro = true;
        authors = [
          "Michael Bryan <michaelfbryan@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];
        features = {
        };
      };
      "indexmap 1.9.3" = rec {
        crateName = "indexmap";
        version = "1.9.3";
        edition = "2021";
        sha256 = "16dxmy7yvk51wvnih3a3im6fp5lmx0wx76i03n06wyak6cwhw1xx";
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.12.3";
            usesDefaultFeatures = false;
            features = [ "raw" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-rayon" = [ "dep:rustc-rayon" ];
          "serde" = [ "dep:serde" ];
          "serde-1" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "serde" "serde-1" "std" ];
      };
      "indexmap 2.9.0" = rec {
        crateName = "indexmap";
        version = "2.9.0";
        edition = "2021";
        sha256 = "07m15a571yywmvqyb7ms717q9n42b46badbpsmx215jrg7dhv9yf";
        dependencies = [
          {
            name = "equivalent";
            packageId = "equivalent";
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.3";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "inlinable_string" = rec {
        crateName = "inlinable_string";
        version = "0.1.15";
        edition = "2018";
        sha256 = "1ysjci8yfvxgf51z0ny2nnwhxrclhmb3vbngin8v4bznhr3ybyn8";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "inout" = rec {
        crateName = "inout";
        version = "0.1.4";
        edition = "2021";
        sha256 = "008xfl1jn9rxsq19phnhbimccf4p64880jmnpg59wqi07kk117w7";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
          }
        ];
        features = {
          "block-padding" = [ "dep:block-padding" ];
          "std" = [ "block-padding/std" ];
        };
      };
      "inquire" = rec {
        crateName = "inquire";
        version = "0.7.5";
        edition = "2018";
        sha256 = "0an1bjs0yklk990d7ni65znmirs99p01wld221affw5g64qgkp8g";
        authors = [
          "Mikael Mello <git@mikaelmello.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
          }
          {
            name = "crossterm";
            packageId = "crossterm";
            optional = true;
          }
          {
            name = "dyn-clone";
            packageId = "dyn-clone";
          }
          {
            name = "fuzzy-matcher";
            packageId = "fuzzy-matcher";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "fxhash";
            packageId = "fxhash";
          }
          {
            name = "newline-converter";
            packageId = "newline-converter";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width 0.1.14";
          }
        ];
        features = {
          "chrono" = [ "dep:chrono" ];
          "console" = [ "dep:console" ];
          "crossterm" = [ "dep:crossterm" ];
          "date" = [ "chrono" ];
          "default" = [ "macros" "crossterm" "one-liners" "fuzzy" ];
          "editor" = [ "tempfile" ];
          "fuzzy" = [ "fuzzy-matcher" ];
          "fuzzy-matcher" = [ "dep:fuzzy-matcher" ];
          "tempfile" = [ "dep:tempfile" ];
          "termion" = [ "dep:termion" ];
        };
        resolvedDefaultFeatures = [ "crossterm" "default" "fuzzy" "fuzzy-matcher" "macros" "one-liners" ];
      };
      "instant" = rec {
        crateName = "instant";
        version = "0.1.13";
        edition = "2018";
        sha256 = "08h27kzvb5jw74mh0ajv0nv9ggwvgqm8ynjsn2sa9jsks4cjh970";
        authors = [
          "sebcrozet <developer@crozet.re>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "js-sys" = [ "dep:js-sys" ];
          "stdweb" = [ "dep:stdweb" ];
          "wasm-bindgen" = [ "js-sys" "wasm-bindgen_rs" "web-sys" ];
          "wasm-bindgen_rs" = [ "dep:wasm-bindgen_rs" ];
          "web-sys" = [ "dep:web-sys" ];
        };
      };
      "integer-sqrt" = rec {
        crateName = "integer-sqrt";
        version = "0.1.5";
        edition = "2015";
        sha256 = "0w6pzmgvs1mldkhafbwg9x7wzr0af3ngkimyb1gy97jarcdw6vi7";
        libName = "integer_sqrt";
        authors = [
          "Richard Dodd <richard.o.dodd@gmail.com>"
          "Joseph Richey"
          "Sergei Shulepov"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];

      };
      "io-lifetimes" = rec {
        crateName = "io-lifetimes";
        version = "1.0.11";
        edition = "2018";
        sha256 = "1hph5lz4wd3drnn6saakwxr497liznpfnv70via6s0v8x6pbkrza";
        libName = "io_lifetimes";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi 0.3.9";
            optional = true;
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: (!(target."windows" or false));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            optional = true;
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Storage_FileSystem" "Win32_Networking_WinSock" "Win32_Security" "Win32_System_IO" "Win32_System_Threading" ];
          }
        ];
        features = {
          "async-std" = [ "dep:async-std" ];
          "close" = [ "libc" "hermit-abi" "windows-sys" ];
          "default" = [ "close" ];
          "fs-err" = [ "dep:fs-err" ];
          "hermit-abi" = [ "dep:hermit-abi" ];
          "libc" = [ "dep:libc" ];
          "mio" = [ "dep:mio" ];
          "os_pipe" = [ "dep:os_pipe" ];
          "socket2" = [ "dep:socket2" ];
          "tokio" = [ "dep:tokio" ];
          "windows-sys" = [ "dep:windows-sys" ];
        };
        resolvedDefaultFeatures = [ "close" "hermit-abi" "libc" "windows-sys" ];
      };
      "ip_network" = rec {
        crateName = "ip_network";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1c8fkq601gj8bqqf36jf96pglw1m8j470vaxmacz5clq19y08bxa";
        authors = [
          "Jakub Onderka <ahoj@jakubonderka.cz>"
        ];
        features = {
          "diesel" = [ "dep:diesel" ];
          "postgres" = [ "dep:postgres" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "ipconfig" = rec {
        crateName = "ipconfig";
        version = "0.3.2";
        edition = "2018";
        sha256 = "0zwr0x3jnqmjdqqbzhb0nid011qyhcyfdfqv32cdw85pjqpvk3dm";
        authors = [
          "Liran Ringel <liranringel@gmail.com>"
        ];
        dependencies = [
          {
            name = "socket2";
            packageId = "socket2";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "widestring";
            packageId = "widestring";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_System_Registry" ];
          }
          {
            name = "winreg";
            packageId = "winreg";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "computer" = [ "winreg" ];
          "default" = [ "computer" ];
          "winreg" = [ "dep:winreg" ];
        };
        resolvedDefaultFeatures = [ "computer" "default" "winreg" ];
      };
      "ipnet" = rec {
        crateName = "ipnet";
        version = "2.11.0";
        edition = "2018";
        sha256 = "0c5i9sfi2asai28m8xp48k5gvwkqrg5ffpi767py6mzsrswv17s6";
        authors = [
          "Kris Price <kris@krisprice.nz>"
        ];
        features = {
          "default" = [ "std" ];
          "heapless" = [ "dep:heapless" ];
          "json" = [ "serde" "schemars" ];
          "schemars" = [ "dep:schemars" ];
          "ser_as_str" = [ "heapless" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "is-terminal" = rec {
        crateName = "is-terminal";
        version = "0.4.16";
        edition = "2018";
        sha256 = "1acm63whnpwiw1padm9bpqz04sz8msymrmyxc55mvlq8hqqpykg0";
        libName = "is_terminal";
        authors = [
          "softprops <d.tangren@gmail.com>"
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi 0.5.1";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."unix" or false) || ("wasi" == target."os" or null));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_Console" ];
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {target, features}: ((target."unix" or false) || ("wasi" == target."os" or null));
          }
        ];

      };
      "is_terminal_polyfill" = rec {
        crateName = "is_terminal_polyfill";
        version = "1.70.1";
        edition = "2021";
        sha256 = "1kwfgglh91z33kl0w5i338mfpa3zs0hidq5j4ny4rmjwrikchhvr";
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "itertools 0.10.5" = rec {
        crateName = "itertools";
        version = "0.10.5";
        edition = "2018";
        sha256 = "0ww45h7nxx5kj6z2y6chlskxd1igvs4j507anr6dzg99x1h25zdh";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itertools 0.11.0" = rec {
        crateName = "itertools";
        version = "0.11.0";
        edition = "2018";
        sha256 = "0mzyqcc59azx9g5cg6fs8k529gvh4463smmka6jvzs3cd2jp7hdi";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itertools 0.12.1" = rec {
        crateName = "itertools";
        version = "0.12.1";
        edition = "2018";
        sha256 = "0s95jbb3ndj1lvfxyq5wanc0fm0r6hg6q4ngb92qlfdxvci10ads";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "use_alloc" ];
      };
      "itertools 0.13.0" = rec {
        crateName = "itertools";
        version = "0.13.0";
        edition = "2018";
        sha256 = "11hiy3qzl643zcigknclh446qb9zlg4dpdzfkjaa9q9fqpgyfgj1";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itertools 0.14.0" = rec {
        crateName = "itertools";
        version = "0.14.0";
        edition = "2018";
        sha256 = "118j6l1vs2mx65dqhwyssbrxpawa90886m3mzafdvyip41w2q69b";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itoa" = rec {
        crateName = "itoa";
        version = "1.0.15";
        edition = "2018";
        sha256 = "0b4fj9kz54dr3wam0vprjwgygvycyw8r0qwg7vp19ly8b2w16psa";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "jiff" = rec {
        crateName = "jiff";
        version = "0.2.13";
        edition = "2021";
        sha256 = "01h87izvrn3nnbkvygc1286vv63ln4bayxhi0838jqrh1mk0087h";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "jiff-static";
            packageId = "jiff-static";
            optional = true;
          }
          {
            name = "jiff-static";
            packageId = "jiff-static";
            target = { target, features }: false;
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "portable-atomic";
            packageId = "portable-atomic";
            usesDefaultFeatures = false;
            target = { target, features }: (!("ptr" == target."has_atomic" or null));
          }
          {
            name = "portable-atomic-util";
            packageId = "portable-atomic-util";
            usesDefaultFeatures = false;
            target = { target, features }: (!("ptr" == target."has_atomic" or null));
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" "portable-atomic-util/alloc" ];
          "default" = [ "std" "tz-system" "tz-fat" "tzdb-bundle-platform" "tzdb-zoneinfo" "tzdb-concatenated" "perf-inline" ];
          "js" = [ "dep:wasm-bindgen" "dep:js-sys" ];
          "logging" = [ "dep:log" ];
          "serde" = [ "dep:serde" ];
          "static" = [ "static-tz" "jiff-static?/tzdb" ];
          "static-tz" = [ "dep:jiff-static" ];
          "std" = [ "alloc" "log?/std" "serde?/std" ];
          "tz-fat" = [ "jiff-static?/tz-fat" ];
          "tz-system" = [ "std" "dep:windows-sys" ];
          "tzdb-bundle-always" = [ "dep:jiff-tzdb" "alloc" ];
          "tzdb-bundle-platform" = [ "dep:jiff-tzdb-platform" "alloc" ];
          "tzdb-concatenated" = [ "std" ];
          "tzdb-zoneinfo" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "jiff-static" = rec {
        crateName = "jiff-static";
        version = "0.2.13";
        edition = "2021";
        sha256 = "0j0cyq3rk34d1hfk30h5r524zbw825fw8gviqqlqc66pvmc0ghzk";
        procMacro = true;
        libName = "jiff_static";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];
        features = {
          "tzdb" = [ "dep:jiff-tzdb" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "jni" = rec {
        crateName = "jni";
        version = "0.21.1";
        edition = "2018";
        sha256 = "15wczfkr2r45slsljby12ymf2hij8wi5b104ghck9byjnwmsm1qs";
        authors = [
          "Josh Chase <josh@prevoty.com>"
        ];
        dependencies = [
          {
            name = "cesu8";
            packageId = "cesu8";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "combine";
            packageId = "combine";
          }
          {
            name = "jni-sys";
            packageId = "jni-sys";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.45.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Globalization" ];
          }
        ];
        buildDependencies = [
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "invocation" = [ "java-locator" "libloading" ];
          "java-locator" = [ "dep:java-locator" ];
          "libloading" = [ "dep:libloading" ];
        };
      };
      "jni-sys" = rec {
        crateName = "jni-sys";
        version = "0.3.0";
        edition = "2015";
        sha256 = "0c01zb9ygvwg9wdx2fii2d39myzprnpqqhy7yizxvjqp5p04pbwf";
        libName = "jni_sys";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];

      };
      "jobserver" = rec {
        crateName = "jobserver";
        version = "0.1.33";
        edition = "2021";
        sha256 = "12jkn3cxvfs7jsb6knmh9y2b41lwmrk3vdqywkmssx61jzq65wiq";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            target = { target, features }: (target."windows" or false);
            features = [ "std" ];
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
        ];

      };
      "js-sys" = rec {
        crateName = "js-sys";
        version = "0.3.69";
        edition = "2018";
        sha256 = "0v99rz97asnzapb0jsc3jjhvxpfxr7h7qd97yqyrf9i7viimbh99";
        libName = "js_sys";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];

      };
      "jsonrpsee" = rec {
        crateName = "jsonrpsee";
        version = "0.24.9";
        edition = "2021";
        sha256 = "0hjdc3yl34kyvqwkjznbi1cxsiscnwgndc7y3i2md1qpw8h6rcip";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "jsonrpsee-core";
            packageId = "jsonrpsee-core";
            optional = true;
          }
          {
            name = "jsonrpsee-http-client";
            packageId = "jsonrpsee-http-client";
            optional = true;
          }
          {
            name = "jsonrpsee-proc-macros";
            packageId = "jsonrpsee-proc-macros";
            optional = true;
          }
          {
            name = "jsonrpsee-server";
            packageId = "jsonrpsee-server";
            optional = true;
          }
          {
            name = "jsonrpsee-types";
            packageId = "jsonrpsee-types";
            optional = true;
          }
          {
            name = "jsonrpsee-ws-client";
            packageId = "jsonrpsee-ws-client";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
          }
        ];
        features = {
          "async-client" = [ "jsonrpsee-core/async-client" ];
          "async-wasm-client" = [ "jsonrpsee-core/async-wasm-client" ];
          "client" = [ "http-client" "ws-client" "wasm-client" "client-ws-transport-tls" "client-web-transport" "async-client" "async-wasm-client" "client-core" ];
          "client-core" = [ "jsonrpsee-core/client" ];
          "client-web-transport" = [ "jsonrpsee-client-transport/web" ];
          "client-ws-transport-no-tls" = [ "jsonrpsee-client-transport/ws" ];
          "client-ws-transport-tls" = [ "jsonrpsee-client-transport/ws" "jsonrpsee-client-transport/tls-rustls-platform-verifier" ];
          "full" = [ "client" "server" "macros" ];
          "http-client" = [ "jsonrpsee-http-client" "jsonrpsee-types" "jsonrpsee-core/client" ];
          "jsonrpsee-client-transport" = [ "dep:jsonrpsee-client-transport" ];
          "jsonrpsee-core" = [ "dep:jsonrpsee-core" ];
          "jsonrpsee-http-client" = [ "dep:jsonrpsee-http-client" ];
          "jsonrpsee-proc-macros" = [ "dep:jsonrpsee-proc-macros" ];
          "jsonrpsee-server" = [ "dep:jsonrpsee-server" ];
          "jsonrpsee-types" = [ "dep:jsonrpsee-types" ];
          "jsonrpsee-wasm-client" = [ "dep:jsonrpsee-wasm-client" ];
          "jsonrpsee-ws-client" = [ "dep:jsonrpsee-ws-client" ];
          "macros" = [ "jsonrpsee-proc-macros" "jsonrpsee-types" "tracing" ];
          "server" = [ "jsonrpsee-server" "server-core" "jsonrpsee-types" "tokio" ];
          "server-core" = [ "jsonrpsee-core/server" ];
          "tokio" = [ "dep:tokio" ];
          "tracing" = [ "dep:tracing" ];
          "wasm-client" = [ "jsonrpsee-wasm-client" "jsonrpsee-types" "jsonrpsee-core/client" ];
          "ws-client" = [ "jsonrpsee-ws-client" "jsonrpsee-types" "jsonrpsee-core/client" ];
        };
        resolvedDefaultFeatures = [ "client-core" "http-client" "jsonrpsee-core" "jsonrpsee-http-client" "jsonrpsee-proc-macros" "jsonrpsee-server" "jsonrpsee-types" "jsonrpsee-ws-client" "macros" "server" "server-core" "tokio" "tracing" "ws-client" ];
      };
      "jsonrpsee-client-transport" = rec {
        crateName = "jsonrpsee-client-transport";
        version = "0.24.9";
        edition = "2021";
        sha256 = "1wnzdhkdrcj024v17zwaxi6yzy5q45g64wqmbr2r4w0iyjmqbjxs";
        libName = "jsonrpsee_client_transport";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "http";
            packageId = "http 1.3.1";
            optional = true;
          }
          {
            name = "jsonrpsee-core";
            packageId = "jsonrpsee-core";
            features = [ "client" ];
          }
          {
            name = "pin-project";
            packageId = "pin-project";
            optional = true;
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            optional = true;
          }
          {
            name = "rustls-platform-verifier";
            packageId = "rustls-platform-verifier";
            optional = true;
          }
          {
            name = "soketto";
            packageId = "soketto";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "net" "time" "macros" ];
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "logging" "tls12" "ring" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            optional = true;
            features = [ "compat" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
            optional = true;
          }
        ];
        features = {
          "base64" = [ "dep:base64" ];
          "futures-channel" = [ "dep:futures-channel" ];
          "futures-util" = [ "dep:futures-util" ];
          "gloo-net" = [ "dep:gloo-net" ];
          "http" = [ "dep:http" ];
          "pin-project" = [ "dep:pin-project" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-pki-types" = [ "dep:rustls-pki-types" ];
          "rustls-platform-verifier" = [ "dep:rustls-platform-verifier" ];
          "soketto" = [ "dep:soketto" ];
          "thiserror" = [ "dep:thiserror" ];
          "tls" = [ "rustls" "tokio-rustls" "rustls-pki-types" ];
          "tls-rustls-platform-verifier" = [ "tls" "rustls-platform-verifier" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-rustls" = [ "dep:tokio-rustls" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "url" = [ "dep:url" ];
          "web" = [ "gloo-net" "futures-channel" "futures-util" "thiserror" ];
          "ws" = [ "base64" "futures-util" "http" "tokio" "tokio-util" "soketto" "pin-project" "thiserror" "url" ];
        };
        resolvedDefaultFeatures = [ "base64" "futures-util" "http" "pin-project" "rustls" "rustls-pki-types" "rustls-platform-verifier" "soketto" "thiserror" "tls" "tls-rustls-platform-verifier" "tokio" "tokio-rustls" "tokio-util" "url" "ws" ];
      };
      "jsonrpsee-core" = rec {
        crateName = "jsonrpsee-core";
        version = "0.24.9";
        edition = "2021";
        sha256 = "09bry8gl2vjr2m8z27aww5gdaa404g3mhvrlg2s4v8d3gh09cqa5";
        libName = "jsonrpsee_core";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.3.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
            optional = true;
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
            optional = true;
          }
          {
            name = "jsonrpsee-types";
            packageId = "jsonrpsee-types";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
            optional = true;
          }
          {
            name = "pin-project";
            packageId = "pin-project";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 2.1.1";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "raw_value" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "rt" ];
          }
        ];
        features = {
          "async-client" = [ "client" "futures-util/alloc" "rustc-hash" "tokio/macros" "tokio/rt" "tokio/time" "futures-timer" "tokio-stream" "pin-project" ];
          "async-wasm-client" = [ "client" "futures-util/alloc" "wasm-bindgen-futures" "rustc-hash/std" "futures-timer/wasm-bindgen" "tokio/macros" "tokio/time" "pin-project" ];
          "bytes" = [ "dep:bytes" ];
          "client" = [ "futures-util/sink" "tokio/sync" ];
          "futures-timer" = [ "dep:futures-timer" ];
          "futures-util" = [ "dep:futures-util" ];
          "http" = [ "dep:http" ];
          "http-body" = [ "dep:http-body" ];
          "http-body-util" = [ "dep:http-body-util" ];
          "http-helpers" = [ "bytes" "futures-util" "http-body" "http-body-util" "http" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "pin-project" = [ "dep:pin-project" ];
          "rand" = [ "dep:rand" ];
          "rustc-hash" = [ "dep:rustc-hash" ];
          "server" = [ "futures-util/alloc" "rustc-hash/std" "parking_lot" "rand" "tokio/rt" "tokio/sync" "tokio/macros" "tokio/time" "http" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-stream" = [ "dep:tokio-stream" ];
          "wasm-bindgen-futures" = [ "dep:wasm-bindgen-futures" ];
        };
        resolvedDefaultFeatures = [ "async-client" "bytes" "client" "default" "futures-timer" "futures-util" "http" "http-body" "http-body-util" "http-helpers" "parking_lot" "pin-project" "rand" "rustc-hash" "server" "tokio" "tokio-stream" ];
      };
      "jsonrpsee-http-client" = rec {
        crateName = "jsonrpsee-http-client";
        version = "0.24.9";
        edition = "2021";
        sha256 = "0320jly378vkha8hc6dnx1zjqbbbkywba6rj7racqk0sjv4vcwn8";
        libName = "jsonrpsee_http_client";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "hyper";
            packageId = "hyper 1.6.0";
            features = [ "client" "http1" "http2" ];
          }
          {
            name = "hyper-rustls";
            packageId = "hyper-rustls";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "http1" "http2" "tls12" "logging" "ring" ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [ "client" "client-legacy" "tokio" "http1" "http2" ];
          }
          {
            name = "jsonrpsee-core";
            packageId = "jsonrpsee-core";
            features = [ "client" "http-helpers" ];
          }
          {
            name = "jsonrpsee-types";
            packageId = "jsonrpsee-types";
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "logging" "std" "tls12" "ring" ];
          }
          {
            name = "rustls-platform-verifier";
            packageId = "rustls-platform-verifier";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "time" ];
          }
          {
            name = "tower";
            packageId = "tower";
            features = [ "util" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "net" "rt-multi-thread" "macros" ];
          }
        ];
        features = {
          "default" = [ "tls" ];
          "hyper-rustls" = [ "dep:hyper-rustls" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-platform-verifier" = [ "dep:rustls-platform-verifier" ];
          "tls" = [ "hyper-rustls" "rustls" "rustls-platform-verifier" ];
        };
        resolvedDefaultFeatures = [ "default" "hyper-rustls" "rustls" "rustls-platform-verifier" "tls" ];
      };
      "jsonrpsee-proc-macros" = rec {
        crateName = "jsonrpsee-proc-macros";
        version = "0.24.9";
        edition = "2021";
        sha256 = "106afrix6h1dc82j6b9ysv163hyi1hdr2wb52ic97z1djhy7cray";
        procMacro = true;
        libName = "jsonrpsee_proc_macros";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.3.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "extra-traits" "full" "visit" "parsing" "printing" "clone-impls" "proc-macro" ];
          }
        ];

      };
      "jsonrpsee-server" = rec {
        crateName = "jsonrpsee-server";
        version = "0.24.9";
        edition = "2021";
        sha256 = "0a3kcjh33hmi6n1ayw8k1dx168y4by9ag82i5fnm13m1dla67qsm";
        libName = "jsonrpsee_server";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "io" "async-await-macro" ];
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper 1.6.0";
            features = [ "server" "http1" "http2" ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [ "tokio" "service" "tokio" "server-auto" ];
          }
          {
            name = "jsonrpsee-core";
            packageId = "jsonrpsee-core";
            features = [ "server" "http-helpers" ];
          }
          {
            name = "jsonrpsee-types";
            packageId = "jsonrpsee-types";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "route-recognizer";
            packageId = "route-recognizer";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "raw_value" ];
          }
          {
            name = "soketto";
            packageId = "soketto";
            features = [ "http" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "net" "rt-multi-thread" "macros" "time" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            features = [ "sync" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = [ "compat" ];
          }
          {
            name = "tower";
            packageId = "tower";
            features = [ "util" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "tower";
            packageId = "tower";
            features = [ "timeout" ];
          }
        ];

      };
      "jsonrpsee-types" = rec {
        crateName = "jsonrpsee-types";
        version = "0.24.9";
        edition = "2021";
        sha256 = "1280hqzrcv8h0xg3a4dg9liz2j4aj66b73pwa9bnnnwlmw5yga08";
        libName = "jsonrpsee_types";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" "raw_value" "std" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "jsonrpsee-ws-client" = rec {
        crateName = "jsonrpsee-ws-client";
        version = "0.24.9";
        edition = "2021";
        sha256 = "1vryp4cwqfx59zggj9g8wzlndsqqznhx5s2847qq98qai4yk5cq1";
        libName = "jsonrpsee_ws_client";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "jsonrpsee-client-transport";
            packageId = "jsonrpsee-client-transport";
            features = [ "ws" ];
          }
          {
            name = "jsonrpsee-core";
            packageId = "jsonrpsee-core";
            features = [ "async-client" ];
          }
          {
            name = "jsonrpsee-types";
            packageId = "jsonrpsee-types";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        features = {
          "default" = [ "tls-rustls-platform-verifier" ];
          "tls" = [ "jsonrpsee-client-transport/tls" ];
          "tls-rustls-platform-verifier" = [ "jsonrpsee-client-transport/tls-rustls-platform-verifier" "tls" ];
        };
        resolvedDefaultFeatures = [ "default" "tls" "tls-rustls-platform-verifier" ];
      };
      "k256" = rec {
        crateName = "k256";
        version = "0.13.4";
        edition = "2021";
        sha256 = "06s1lxjp49zgmbxnfdy2kajyklbkl4s3jvdvy0amg552padr3qzn";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "ecdsa";
            packageId = "ecdsa";
            rename = "ecdsa-core";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "der" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve";
            usesDefaultFeatures = false;
            features = [ "hazmat" "sec1" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serdect";
            packageId = "serdect";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "signature";
            packageId = "signature";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "ecdsa";
            packageId = "ecdsa";
            rename = "ecdsa-core";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
        ];
        features = {
          "alloc" = [ "ecdsa-core?/alloc" "elliptic-curve/alloc" ];
          "arithmetic" = [ "elliptic-curve/arithmetic" ];
          "bits" = [ "arithmetic" "elliptic-curve/bits" ];
          "critical-section" = [ "once_cell/critical-section" "precomputed-tables" ];
          "default" = [ "arithmetic" "ecdsa" "pkcs8" "precomputed-tables" "schnorr" "std" ];
          "digest" = [ "ecdsa-core/digest" "ecdsa-core/hazmat" ];
          "ecdh" = [ "arithmetic" "elliptic-curve/ecdh" ];
          "ecdsa" = [ "arithmetic" "ecdsa-core/signing" "ecdsa-core/verifying" "sha256" ];
          "ecdsa-core" = [ "dep:ecdsa-core" ];
          "expose-field" = [ "arithmetic" ];
          "hash2curve" = [ "arithmetic" "elliptic-curve/hash2curve" ];
          "hex-literal" = [ "dep:hex-literal" ];
          "jwk" = [ "elliptic-curve/jwk" ];
          "once_cell" = [ "dep:once_cell" ];
          "pem" = [ "ecdsa-core/pem" "elliptic-curve/pem" "pkcs8" ];
          "pkcs8" = [ "ecdsa-core/pkcs8" "elliptic-curve/pkcs8" ];
          "precomputed-tables" = [ "arithmetic" "once_cell" ];
          "schnorr" = [ "arithmetic" "sha256" "signature" ];
          "serde" = [ "ecdsa-core/serde" "elliptic-curve/serde" "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "sha2" = [ "dep:sha2" ];
          "sha256" = [ "digest" "sha2" ];
          "signature" = [ "dep:signature" ];
          "std" = [ "alloc" "ecdsa-core?/std" "elliptic-curve/std" "once_cell?/std" ];
          "test-vectors" = [ "hex-literal" ];
        };
        resolvedDefaultFeatures = [ "alloc" "arithmetic" "default" "digest" "ecdsa" "ecdsa-core" "once_cell" "pkcs8" "precomputed-tables" "schnorr" "serde" "serdect" "sha2" "sha256" "signature" "std" ];
      };
      "keccak" = rec {
        crateName = "keccak";
        version = "0.1.5";
        edition = "2018";
        sha256 = "0m06swsyd58hvb1z17q6picdwywprf1yf1s6l491zi8r26dazhpc";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: ("aarch64" == target."arch" or null);
          }
        ];
        features = {
        };
      };
      "keystream" = rec {
        crateName = "keystream";
        version = "1.0.0";
        edition = "2015";
        sha256 = "0a4b2g4i1bxkh8ngbpcnplwbsliif8zw9q3d6mk25q4y7j1p0c63";
        authors = [
          "Peter Reid <peter.d.reid@gmail.com>"
        ];

      };
      "kvdb" = rec {
        crateName = "kvdb";
        version = "0.13.0";
        edition = "2021";
        sha256 = "1nddanhh8x6j504myyp9pm5zy13s22spkaf3hxc87xibn3f71mz7";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];

      };
      "kvdb-memorydb" = rec {
        crateName = "kvdb-memorydb";
        version = "0.13.0";
        edition = "2021";
        sha256 = "1ck06xfhn87k9lxsg69c856fgqf6jhndv7qn9vbrrzzrcvz8aymz";
        libName = "kvdb_memorydb";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "kvdb";
            packageId = "kvdb";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "kvdb-rocksdb" = rec {
        crateName = "kvdb-rocksdb";
        version = "0.19.0";
        edition = "2021";
        sha256 = "1xilnjwxr9cj56833ay2gfpk1sh0j2kj4a83qazncpr8j85wfi5n";
        libName = "kvdb_rocksdb";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "kvdb";
            packageId = "kvdb";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "rocksdb";
            packageId = "rocksdb";
            usesDefaultFeatures = false;
            target = { target, features }: (("openbsd" == target."os" or null) || ("msvc" == target."env" or null));
            features = [ "snappy" ];
          }
          {
            name = "rocksdb";
            packageId = "rocksdb";
            usesDefaultFeatures = false;
            target = { target, features }: (!(("openbsd" == target."os" or null) || ("msvc" == target."env" or null)));
            features = [ "snappy" "jemalloc" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];

      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.5.0";
        edition = "2015";
        sha256 = "1zk6dqqni0193xg6iijh7i3i44sryglwgvx20spdvwk3r6sbrlmv";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "spin";
            packageId = "spin 0.9.8";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "once" ];
          }
        ];
        features = {
          "spin" = [ "dep:spin" ];
          "spin_no_std" = [ "spin" ];
        };
        resolvedDefaultFeatures = [ "spin" "spin_no_std" ];
      };
      "lazycell" = rec {
        crateName = "lazycell";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0m8gw7dn30i0zjjpjdyf6pc16c34nl71lpv461mix50x3p70h3c3";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Nikita Pekin <contact@nikitapek.in>"
        ];
        features = {
          "clippy" = [ "dep:clippy" ];
          "nightly-testing" = [ "clippy" "nightly" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.172";
        edition = "2021";
        sha256 = "1ykz4skj7gac14znljm5clbnrhini38jkq3d60jggx3y5w2ayl6p";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "rustc-std-workspace-core" = [ "dep:rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "extra_traits" "std" ];
      };
      "libloading" = rec {
        crateName = "libloading";
        version = "0.8.7";
        edition = "2015";
        sha256 = "036zkka8hsdpli0j75wzd5svjkqdgypx6wdljm7wbsmgszq3syba";
        authors = [
          "Simonas Kazlauskas <libloading@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.53.0";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "libm" = rec {
        crateName = "libm";
        version = "0.2.15";
        edition = "2021";
        sha256 = "1plpzf0p829viazdj57yw5dhmlr8ywf3apayxc2f2bq5a6mvryzr";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        features = {
          "default" = [ "arch" ];
          "unstable" = [ "unstable-intrinsics" "unstable-float" ];
        };
        resolvedDefaultFeatures = [ "arch" "default" ];
      };
      "libp2p" = rec {
        crateName = "libp2p";
        version = "0.54.1";
        edition = "2021";
        sha256 = "1i5z4cr0j2nfivxb4b3klh2994biq6wpb043dg6jc1g0qzwq1gmv";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
          }
          {
            name = "libp2p-allow-block-list";
            packageId = "libp2p-allow-block-list";
          }
          {
            name = "libp2p-connection-limits";
            packageId = "libp2p-connection-limits";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-dns";
            packageId = "libp2p-dns";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "libp2p-identify";
            packageId = "libp2p-identify";
            optional = true;
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
            features = [ "rand" ];
          }
          {
            name = "libp2p-kad";
            packageId = "libp2p-kad";
            optional = true;
          }
          {
            name = "libp2p-mdns";
            packageId = "libp2p-mdns";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "libp2p-metrics";
            packageId = "libp2p-metrics";
            optional = true;
          }
          {
            name = "libp2p-noise";
            packageId = "libp2p-noise";
            optional = true;
          }
          {
            name = "libp2p-ping";
            packageId = "libp2p-ping";
            optional = true;
          }
          {
            name = "libp2p-quic";
            packageId = "libp2p-quic";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "libp2p-request-response";
            packageId = "libp2p-request-response";
            optional = true;
          }
          {
            name = "libp2p-swarm";
            packageId = "libp2p-swarm";
          }
          {
            name = "libp2p-tcp";
            packageId = "libp2p-tcp";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "libp2p-upnp";
            packageId = "libp2p-upnp";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "libp2p-websocket";
            packageId = "libp2p-websocket";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "libp2p-yamux";
            packageId = "libp2p-yamux";
            optional = true;
          }
          {
            name = "multiaddr";
            packageId = "multiaddr 0.18.2";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "rw-stream-sink";
            packageId = "rw-stream-sink";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        devDependencies = [
          {
            name = "libp2p-noise";
            packageId = "libp2p-noise";
          }
          {
            name = "libp2p-tcp";
            packageId = "libp2p-tcp";
            features = [ "tokio" ];
          }
        ];
        features = {
          "async-std" = [ "libp2p-swarm/async-std" "libp2p-mdns?/async-io" "libp2p-tcp?/async-io" "libp2p-dns?/async-std" "libp2p-quic?/async-std" ];
          "autonat" = [ "dep:libp2p-autonat" ];
          "cbor" = [ "libp2p-request-response?/cbor" ];
          "dcutr" = [ "dep:libp2p-dcutr" "libp2p-metrics?/dcutr" ];
          "dns" = [ "dep:libp2p-dns" ];
          "ecdsa" = [ "libp2p-identity/ecdsa" ];
          "ed25519" = [ "libp2p-identity/ed25519" ];
          "floodsub" = [ "dep:libp2p-floodsub" ];
          "full" = [ "async-std" "autonat" "cbor" "dcutr" "dns" "ecdsa" "ed25519" "floodsub" "gossipsub" "identify" "json" "kad" "macros" "mdns" "memory-connection-limits" "metrics" "noise" "ping" "plaintext" "pnet" "quic" "relay" "rendezvous" "request-response" "rsa" "secp256k1" "serde" "tcp" "tls" "tokio" "uds" "wasm-bindgen" "websocket-websys" "websocket" "webtransport-websys" "yamux" "upnp" ];
          "gossipsub" = [ "dep:libp2p-gossipsub" "libp2p-metrics?/gossipsub" ];
          "identify" = [ "dep:libp2p-identify" "libp2p-metrics?/identify" ];
          "json" = [ "libp2p-request-response?/json" ];
          "kad" = [ "dep:libp2p-kad" "libp2p-metrics?/kad" ];
          "macros" = [ "libp2p-swarm/macros" ];
          "mdns" = [ "dep:libp2p-mdns" ];
          "memory-connection-limits" = [ "dep:libp2p-memory-connection-limits" ];
          "metrics" = [ "dep:libp2p-metrics" ];
          "noise" = [ "dep:libp2p-noise" ];
          "ping" = [ "dep:libp2p-ping" "libp2p-metrics?/ping" ];
          "plaintext" = [ "dep:libp2p-plaintext" ];
          "pnet" = [ "dep:libp2p-pnet" ];
          "quic" = [ "dep:libp2p-quic" ];
          "relay" = [ "dep:libp2p-relay" "libp2p-metrics?/relay" ];
          "rendezvous" = [ "dep:libp2p-rendezvous" ];
          "request-response" = [ "dep:libp2p-request-response" ];
          "rsa" = [ "libp2p-identity/rsa" ];
          "secp256k1" = [ "libp2p-identity/secp256k1" ];
          "serde" = [ "libp2p-core/serde" "libp2p-kad?/serde" "libp2p-gossipsub?/serde" ];
          "tcp" = [ "dep:libp2p-tcp" ];
          "tls" = [ "dep:libp2p-tls" ];
          "tokio" = [ "libp2p-swarm/tokio" "libp2p-mdns?/tokio" "libp2p-tcp?/tokio" "libp2p-dns?/tokio" "libp2p-quic?/tokio" "libp2p-upnp?/tokio" ];
          "uds" = [ "dep:libp2p-uds" ];
          "upnp" = [ "dep:libp2p-upnp" ];
          "wasm-bindgen" = [ "futures-timer/wasm-bindgen" "getrandom/js" "libp2p-swarm/wasm-bindgen" "libp2p-gossipsub?/wasm-bindgen" ];
          "websocket" = [ "dep:libp2p-websocket" ];
          "websocket-websys" = [ "dep:libp2p-websocket-websys" ];
          "webtransport-websys" = [ "dep:libp2p-webtransport-websys" ];
          "yamux" = [ "dep:libp2p-yamux" ];
        };
        resolvedDefaultFeatures = [ "dns" "identify" "kad" "macros" "mdns" "noise" "ping" "request-response" "tcp" "tokio" "websocket" "yamux" ];
      };
      "libp2p-allow-block-list" = rec {
        crateName = "libp2p-allow-block-list";
        version = "0.4.0";
        edition = "2021";
        sha256 = "0hc0xz577pr6s7r9pjv26xi2z5ffr0xjfkwqgvbhwckhip7pq0ni";
        libName = "libp2p_allow_block_list";
        dependencies = [
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
            features = [ "peerid" ];
          }
          {
            name = "libp2p-swarm";
            packageId = "libp2p-swarm";
          }
          {
            name = "void";
            packageId = "void";
          }
        ];

      };
      "libp2p-connection-limits" = rec {
        crateName = "libp2p-connection-limits";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1n1az1z52v8qd6zhmjk28rvxygdckgbvzdppak9g1blbxr03a04d";
        libName = "libp2p_connection_limits";
        dependencies = [
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
            features = [ "peerid" ];
          }
          {
            name = "libp2p-swarm";
            packageId = "libp2p-swarm";
          }
          {
            name = "void";
            packageId = "void";
          }
        ];

      };
      "libp2p-core" = rec {
        crateName = "libp2p-core";
        version = "0.42.0";
        edition = "2021";
        sha256 = "160jia8vf079sqz2279acpqwbfmbmb1rpzi0v16104fi7v42c7x6";
        libName = "libp2p_core";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures";
            packageId = "futures";
            features = [ "executor" "thread-pool" ];
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
            features = [ "peerid" "ed25519" ];
          }
          {
            name = "multiaddr";
            packageId = "multiaddr 0.18.2";
          }
          {
            name = "multihash";
            packageId = "multihash 0.19.3";
          }
          {
            name = "multistream-select";
            packageId = "multistream-select";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "quick-protobuf";
            packageId = "quick-protobuf";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rw-stream-sink";
            packageId = "rw-stream-sink";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint 0.8.0";
          }
          {
            name = "void";
            packageId = "void";
          }
          {
            name = "web-time";
            packageId = "web-time";
          }
        ];
        devDependencies = [
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
            features = [ "ed25519" "rand" ];
          }
          {
            name = "multihash";
            packageId = "multihash 0.19.3";
            features = [ "arb" ];
          }
        ];
        features = {
          "serde" = [ "multihash/serde-codec" "dep:serde" "libp2p-identity/serde" ];
        };
      };
      "libp2p-dns" = rec {
        crateName = "libp2p-dns";
        version = "0.42.0";
        edition = "2021";
        sha256 = "1gdq3srfsfzlmc36yrdcsdmigllxy9a6xn7char5s9y7slq7zwwp";
        libName = "libp2p_dns";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "hickory-resolver";
            packageId = "hickory-resolver";
            usesDefaultFeatures = false;
            features = [ "system-config" ];
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
            features = [ "rand" ];
          }
        ];
        features = {
          "async-std" = [ "async-std-resolver" ];
          "async-std-resolver" = [ "dep:async-std-resolver" ];
          "tokio" = [ "hickory-resolver/tokio-runtime" ];
        };
        resolvedDefaultFeatures = [ "tokio" ];
      };
      "libp2p-identify" = rec {
        crateName = "libp2p-identify";
        version = "0.45.0";
        edition = "2021";
        sha256 = "1qx465l60iw8hj7wqzac7jldjfv8d1iqay1740q4zgkkl82b048p";
        libName = "libp2p_identify";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "asynchronous-codec";
            packageId = "asynchronous-codec 0.7.0";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-bounded";
            packageId = "futures-bounded";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
          }
          {
            name = "libp2p-swarm";
            packageId = "libp2p-swarm";
          }
          {
            name = "lru";
            packageId = "lru 0.12.5";
          }
          {
            name = "quick-protobuf";
            packageId = "quick-protobuf";
          }
          {
            name = "quick-protobuf-codec";
            packageId = "quick-protobuf-codec";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "void";
            packageId = "void";
          }
        ];
        devDependencies = [
          {
            name = "libp2p-swarm";
            packageId = "libp2p-swarm";
            features = [ "macros" ];
          }
        ];

      };
      "libp2p-identity" = rec {
        crateName = "libp2p-identity";
        version = "0.2.11";
        edition = "2021";
        sha256 = "1sw04bhm63gfq964sicjl7l4180fzl4hj8s6rrcil8a412hqxdpv";
        libName = "libp2p_identity";
        dependencies = [
          {
            name = "bs58";
            packageId = "bs58";
            optional = true;
          }
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
            optional = true;
          }
          {
            name = "hkdf";
            packageId = "hkdf";
            optional = true;
          }
          {
            name = "multihash";
            packageId = "multihash 0.19.3";
            optional = true;
          }
          {
            name = "quick-protobuf";
            packageId = "quick-protobuf";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
          }
        ];
        features = {
          "ecdsa" = [ "dep:p256" "dep:zeroize" "dep:sec1" "dep:sha2" "dep:hkdf" ];
          "ed25519" = [ "dep:ed25519-dalek" "dep:zeroize" "dep:sha2" "dep:hkdf" ];
          "peerid" = [ "dep:multihash" "dep:bs58" "dep:thiserror" "dep:sha2" "dep:hkdf" ];
          "rand" = [ "dep:rand" "ed25519-dalek?/rand_core" ];
          "rsa" = [ "dep:ring" "dep:asn1_der" "dep:rand" "dep:zeroize" ];
          "secp256k1" = [ "dep:k256" "dep:asn1_der" "dep:sha2" "dep:hkdf" "dep:zeroize" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "ed25519" "peerid" "rand" ];
      };
      "libp2p-kad" = rec {
        crateName = "libp2p-kad";
        version = "0.46.2";
        edition = "2021";
        sha256 = "18q2fyxwdm6n5v1n6jak83zb9b0d2rrw1m6aqavypfw4pp83glnf";
        libName = "libp2p_kad";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec 0.7.6";
          }
          {
            name = "asynchronous-codec";
            packageId = "asynchronous-codec 0.7.0";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-bounded";
            packageId = "futures-bounded";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
            features = [ "rand" ];
          }
          {
            name = "libp2p-swarm";
            packageId = "libp2p-swarm";
          }
          {
            name = "quick-protobuf";
            packageId = "quick-protobuf";
          }
          {
            name = "quick-protobuf-codec";
            packageId = "quick-protobuf-codec";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "uint";
            packageId = "uint 0.9.5";
          }
          {
            name = "void";
            packageId = "void";
          }
          {
            name = "web-time";
            packageId = "web-time";
          }
        ];
        devDependencies = [
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
        ];
        features = {
          "serde" = [ "dep:serde" "bytes/serde" ];
        };
      };
      "libp2p-mdns" = rec {
        crateName = "libp2p-mdns";
        version = "0.46.0";
        edition = "2021";
        sha256 = "05x4vd0b2gy9n9qrdn8y4sgixvjafi16n119xdjja0s4crmm9f0l";
        libName = "libp2p_mdns";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "hickory-proto";
            packageId = "hickory-proto";
            usesDefaultFeatures = false;
            features = [ "mdns" ];
          }
          {
            name = "if-watch";
            packageId = "if-watch";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
          }
          {
            name = "libp2p-swarm";
            packageId = "libp2p-swarm";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "socket2";
            packageId = "socket2";
            features = [ "all" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "net" "time" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "void";
            packageId = "void";
          }
        ];
        devDependencies = [
          {
            name = "libp2p-swarm";
            packageId = "libp2p-swarm";
            features = [ "tokio" "async-std" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "macros" "rt" "rt-multi-thread" "time" ];
          }
        ];
        features = {
          "async-io" = [ "dep:async-io" "dep:async-std" "if-watch/smol" ];
          "tokio" = [ "dep:tokio" "if-watch/tokio" ];
        };
        resolvedDefaultFeatures = [ "tokio" ];
      };
      "libp2p-metrics" = rec {
        crateName = "libp2p-metrics";
        version = "0.15.0";
        edition = "2021";
        sha256 = "0ri5wirclmyh676y0iyky8q5x8f6s7jkm3fvv1188z3i9alszsvp";
        libName = "libp2p_metrics";
        authors = [
          "Max Inden <mail@max-inden.de>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-identify";
            packageId = "libp2p-identify";
            optional = true;
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
          }
          {
            name = "libp2p-kad";
            packageId = "libp2p-kad";
            optional = true;
          }
          {
            name = "libp2p-ping";
            packageId = "libp2p-ping";
            optional = true;
          }
          {
            name = "libp2p-swarm";
            packageId = "libp2p-swarm";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "prometheus-client";
            packageId = "prometheus-client";
          }
          {
            name = "web-time";
            packageId = "web-time";
          }
        ];
        devDependencies = [
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
            features = [ "rand" ];
          }
        ];
        features = {
          "dcutr" = [ "libp2p-dcutr" ];
          "gossipsub" = [ "libp2p-gossipsub" ];
          "identify" = [ "libp2p-identify" ];
          "kad" = [ "libp2p-kad" ];
          "libp2p-dcutr" = [ "dep:libp2p-dcutr" ];
          "libp2p-gossipsub" = [ "dep:libp2p-gossipsub" ];
          "libp2p-identify" = [ "dep:libp2p-identify" ];
          "libp2p-kad" = [ "dep:libp2p-kad" ];
          "libp2p-ping" = [ "dep:libp2p-ping" ];
          "libp2p-relay" = [ "dep:libp2p-relay" ];
          "ping" = [ "libp2p-ping" ];
          "relay" = [ "libp2p-relay" ];
        };
        resolvedDefaultFeatures = [ "identify" "kad" "libp2p-identify" "libp2p-kad" "libp2p-ping" "ping" ];
      };
      "libp2p-noise" = rec {
        crateName = "libp2p-noise";
        version = "0.45.0";
        edition = "2021";
        sha256 = "135jq77mizz64iyl51xa9q0i52aijsi4aqjxisgy6vp83b5kgc9n";
        libName = "libp2p_noise";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "asynchronous-codec";
            packageId = "asynchronous-codec 0.7.0";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
            features = [ "ed25519" ];
          }
          {
            name = "multiaddr";
            packageId = "multiaddr 0.18.2";
          }
          {
            name = "multihash";
            packageId = "multihash 0.19.3";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "quick-protobuf";
            packageId = "quick-protobuf";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "snow";
            packageId = "snow";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "ring-resolver" ];
          }
          {
            name = "snow";
            packageId = "snow";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "default-resolver" ];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "x25519-dalek";
            packageId = "x25519-dalek";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        devDependencies = [
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
            features = [ "rand" ];
          }
        ];

      };
      "libp2p-ping" = rec {
        crateName = "libp2p-ping";
        version = "0.45.0";
        edition = "2021";
        sha256 = "08nlrps76lfkvkhd34p98q9ya9zhjmq4ai739sbkn8jr0d138nh0";
        libName = "libp2p_ping";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
          }
          {
            name = "libp2p-swarm";
            packageId = "libp2p-swarm";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "void";
            packageId = "void";
          }
          {
            name = "web-time";
            packageId = "web-time";
          }
        ];
        devDependencies = [
          {
            name = "libp2p-swarm";
            packageId = "libp2p-swarm";
            features = [ "macros" ];
          }
        ];

      };
      "libp2p-quic" = rec {
        crateName = "libp2p-quic";
        version = "0.11.1";
        edition = "2021";
        sha256 = "0knjbz0k2jjq772d5fka0yj93y7259x2by3zivl70304rp2jlda6";
        libName = "libp2p_quic";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "if-watch";
            packageId = "if-watch";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
          }
          {
            name = "libp2p-tls";
            packageId = "libp2p-tls";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "quinn";
            packageId = "quinn";
            usesDefaultFeatures = false;
            features = [ "rustls" "futures-io" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "ring";
            packageId = "ring 0.17.14";
          }
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
          }
          {
            name = "socket2";
            packageId = "socket2";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "net" "rt" "time" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
            features = [ "rand" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "macros" "rt-multi-thread" "time" ];
          }
        ];
        features = {
          "async-std" = [ "dep:async-std" "if-watch/smol" "quinn/runtime-async-std" ];
          "tokio" = [ "dep:tokio" "if-watch/tokio" "quinn/runtime-tokio" ];
        };
        resolvedDefaultFeatures = [ "tokio" ];
      };
      "libp2p-request-response" = rec {
        crateName = "libp2p-request-response";
        version = "0.27.0";
        edition = "2021";
        sha256 = "19mhr9ying83174256j0pa815znllfpcshhchfp7ajm9fviwjmhk";
        libName = "libp2p_request_response";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-bounded";
            packageId = "futures-bounded";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
          }
          {
            name = "libp2p-swarm";
            packageId = "libp2p-swarm";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "void";
            packageId = "void";
          }
          {
            name = "web-time";
            packageId = "web-time";
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];
        features = {
          "cbor" = [ "dep:serde" "dep:cbor4ii" "libp2p-swarm/macros" ];
          "json" = [ "dep:serde" "dep:serde_json" "libp2p-swarm/macros" ];
        };
      };
      "libp2p-swarm" = rec {
        crateName = "libp2p-swarm";
        version = "0.45.1";
        edition = "2021";
        sha256 = "06l51sswdq0iqfqc1qzbf99g4qbjy0nghrwg12r1yb1xg50ngpfp";
        libName = "libp2p_swarm";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
          }
          {
            name = "libp2p-swarm-derive";
            packageId = "libp2p-swarm-derive";
            optional = true;
          }
          {
            name = "lru";
            packageId = "lru 0.12.5";
          }
          {
            name = "multistream-select";
            packageId = "multistream-select";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!(("emscripten" == target."os" or null) || ("wasi" == target."os" or null) || ("unknown" == target."os" or null)));
            features = [ "rt" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "void";
            packageId = "void";
          }
          {
            name = "web-time";
            packageId = "web-time";
          }
        ];
        devDependencies = [
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
            features = [ "ed25519" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "time" "rt" "macros" "rt-multi-thread" ];
          }
          {
            name = "void";
            packageId = "void";
          }
        ];
        features = {
          "async-std" = [ "dep:async-std" ];
          "macros" = [ "dep:libp2p-swarm-derive" ];
          "tokio" = [ "dep:tokio" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen-futures" "dep:getrandom" ];
        };
        resolvedDefaultFeatures = [ "macros" "tokio" ];
      };
      "libp2p-swarm-derive" = rec {
        crateName = "libp2p-swarm-derive";
        version = "0.35.0";
        edition = "2021";
        sha256 = "1n238kfj919gp82hcb2fi4cnr6fyl1m9dc4zsxwdf170xfh0lvi0";
        procMacro = true;
        libName = "libp2p_swarm_derive";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "derive" "parsing" "printing" "proc-macro" ];
          }
        ];

      };
      "libp2p-tcp" = rec {
        crateName = "libp2p-tcp";
        version = "0.42.0";
        edition = "2021";
        sha256 = "0553r9gqn120a9pzkv9rbllkwh78bmaqrk8ahjngrp2r5hqlz5md";
        libName = "libp2p_tcp";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "if-watch";
            packageId = "if-watch";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
          }
          {
            name = "socket2";
            packageId = "socket2";
            features = [ "all" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "net" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
            features = [ "rand" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "full" ];
          }
        ];
        features = {
          "async-io" = [ "dep:async-io" "if-watch/smol" ];
          "tokio" = [ "dep:tokio" "if-watch/tokio" ];
        };
        resolvedDefaultFeatures = [ "tokio" ];
      };
      "libp2p-tls" = rec {
        crateName = "libp2p-tls";
        version = "0.5.0";
        edition = "2021";
        sha256 = "0iyqnhnkbbfg643mywd3ck4psvz8786fndhy7kvmbhxrqbfkvcj7";
        libName = "libp2p_tls";
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-rustls";
            packageId = "futures-rustls";
            usesDefaultFeatures = false;
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
          }
          {
            name = "rcgen";
            packageId = "rcgen";
          }
          {
            name = "ring";
            packageId = "ring 0.17.14";
          }
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
            features = [ "ring" "std" ];
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki 0.101.7";
            rename = "webpki";
            features = [ "std" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "x509-parser";
            packageId = "x509-parser 0.16.0";
          }
          {
            name = "yasna";
            packageId = "yasna";
          }
        ];
        devDependencies = [
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
            features = [ "ed25519" "rsa" "secp256k1" "ecdsa" "rand" ];
          }
        ];

      };
      "libp2p-upnp" = rec {
        crateName = "libp2p-upnp";
        version = "0.3.0";
        edition = "2021";
        sha256 = "13qb42348xxss6yl5izzlrps7rhm8qqa654j0k5aplrbfwdjvgq1";
        libName = "libp2p_upnp";
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "igd-next";
            packageId = "igd-next";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-swarm";
            packageId = "libp2p-swarm";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "rt" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "void";
            packageId = "void";
          }
        ];
        features = {
          "tokio" = [ "igd-next/aio_tokio" "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "tokio" ];
      };
      "libp2p-websocket" = rec {
        crateName = "libp2p-websocket";
        version = "0.44.0";
        edition = "2021";
        sha256 = "0iz3qvs2mq6bxrwm5q355faihg84s5db7aix52byzp6qwpr2z2w8";
        libName = "libp2p_websocket";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-rustls";
            packageId = "futures-rustls";
            usesDefaultFeatures = false;
            features = [ "ring" ];
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "rw-stream-sink";
            packageId = "rw-stream-sink";
          }
          {
            name = "soketto";
            packageId = "soketto";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.25.4";
          }
        ];
        devDependencies = [
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
            features = [ "rand" ];
          }
        ];

      };
      "libp2p-yamux" = rec {
        crateName = "libp2p-yamux";
        version = "0.46.0";
        edition = "2021";
        sha256 = "10jqbk5f95l3ppx07j2mflkchhmnxmdrlrlc1mvaknw90z4632vq";
        libName = "libp2p_yamux";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "yamux";
            packageId = "yamux 0.12.1";
            rename = "yamux012";
          }
          {
            name = "yamux";
            packageId = "yamux 0.13.5";
            rename = "yamux013";
          }
        ];

      };
      "libredox" = rec {
        crateName = "libredox";
        version = "0.1.3";
        edition = "2021";
        sha256 = "139602gzgs0k91zb7dvgj1qh4ynb8g1lbxsswdim18hcb6ykgzy0";
        authors = [
          "4lDO2 <4lDO2@protonmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.5.12";
            optional = true;
          }
        ];
        features = {
          "default" = [ "call" "std" "redox_syscall" ];
          "ioslice" = [ "dep:ioslice" ];
          "mkns" = [ "ioslice" ];
          "redox_syscall" = [ "dep:redox_syscall" ];
        };
        resolvedDefaultFeatures = [ "call" "default" "redox_syscall" "std" ];
      };
      "librocksdb-sys" = rec {
        crateName = "librocksdb-sys";
        version = "0.11.0+8.1.1";
        edition = "2018";
        links = "rocksdb";
        sha256 = "0gly8vx2x65jap1pid32bahn421vxi0zplp9v19d4jyb3c86yf6k";
        libName = "librocksdb_sys";
        authors = [
          "Karl Hobley <karlhobley10@gmail.com>"
          "Arkadiy Paronyan <arkadiy@ethcore.io>"
        ];
        dependencies = [
          {
            name = "bzip2-sys";
            packageId = "bzip2-sys";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "libz-sys";
            packageId = "libz-sys";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tikv-jemalloc-sys";
            packageId = "tikv-jemalloc-sys";
            optional = true;
            features = [ "unprefixed_malloc_on_supported_platforms" ];
          }
        ];
        buildDependencies = [
          {
            name = "bindgen";
            packageId = "bindgen";
            usesDefaultFeatures = false;
            features = [ "runtime" ];
          }
          {
            name = "cc";
            packageId = "cc";
            features = [ "parallel" ];
          }
          {
            name = "glob";
            packageId = "glob";
          }
        ];
        features = {
          "bzip2" = [ "bzip2-sys" ];
          "bzip2-sys" = [ "dep:bzip2-sys" ];
          "default" = [ "static" ];
          "io-uring" = [ "pkg-config" ];
          "jemalloc" = [ "tikv-jemalloc-sys" ];
          "libz-sys" = [ "dep:libz-sys" ];
          "lz4" = [ "lz4-sys" ];
          "lz4-sys" = [ "dep:lz4-sys" ];
          "pkg-config" = [ "dep:pkg-config" ];
          "static" = [ "libz-sys?/static" "bzip2-sys?/static" ];
          "tikv-jemalloc-sys" = [ "dep:tikv-jemalloc-sys" ];
          "zlib" = [ "libz-sys" ];
          "zstd" = [ "zstd-sys" ];
          "zstd-sys" = [ "dep:zstd-sys" ];
        };
        resolvedDefaultFeatures = [ "default" "jemalloc" "snappy" "static" "tikv-jemalloc-sys" ];
      };
      "libsecp256k1" = rec {
        crateName = "libsecp256k1";
        version = "0.7.2";
        edition = "2018";
        sha256 = "0fbii0mfl9xwk9pivjcz2dvbq81qbzx0r9vrl02wkv95h5qik477";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
          {
            name = "hmac-drbg";
            packageId = "hmac-drbg";
            optional = true;
          }
          {
            name = "libsecp256k1-core";
            packageId = "libsecp256k1-core";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.9.9";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "typenum";
            packageId = "typenum";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "libsecp256k1-gen-ecmult";
            packageId = "libsecp256k1-gen-ecmult";
          }
          {
            name = "libsecp256k1-gen-genmult";
            packageId = "libsecp256k1-gen-genmult";
          }
        ];
        features = {
          "default" = [ "std" "hmac" "static-context" ];
          "hmac" = [ "hmac-drbg" "sha2" "typenum" ];
          "hmac-drbg" = [ "dep:hmac-drbg" ];
          "lazy-static-context" = [ "static-context" "lazy_static" "std" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "sha2" = [ "dep:sha2" ];
          "std" = [ "libsecp256k1-core/std" "sha2/std" "rand/std" "serde/std" "base64/std" ];
          "typenum" = [ "dep:typenum" ];
        };
        resolvedDefaultFeatures = [ "default" "hmac" "hmac-drbg" "sha2" "static-context" "std" "typenum" ];
      };
      "libsecp256k1-core" = rec {
        crateName = "libsecp256k1-core";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0lalbm1f67dd0cxpa12mjq0q6wvcq5bangjk9nj2519dcjxvksav";
        libName = "libsecp256k1_core";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
          {
            name = "subtle";
            packageId = "subtle 2.6.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "subtle/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "libsecp256k1-gen-ecmult" = rec {
        crateName = "libsecp256k1-gen-ecmult";
        version = "0.3.0";
        edition = "2018";
        sha256 = "02a8rddxan8616rrq5b88hbw9ikz323psfk4fahyi1swql4chf1h";
        libName = "libsecp256k1_gen_ecmult";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "libsecp256k1-core";
            packageId = "libsecp256k1-core";
          }
        ];

      };
      "libsecp256k1-gen-genmult" = rec {
        crateName = "libsecp256k1-gen-genmult";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0z3gl0x5rpdjrr3mds8620gk0h0qjfccr33f1v2ar7pc5jxddf1x";
        libName = "libsecp256k1_gen_genmult";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "libsecp256k1-core";
            packageId = "libsecp256k1-core";
          }
        ];

      };
      "libsqlite3-sys" = rec {
        crateName = "libsqlite3-sys";
        version = "0.30.1";
        edition = "2021";
        links = "sqlite3";
        sha256 = "0jcikvgbj84xc7ikdmpc8m4y5lyqgrb9aqblphwk67kv95xgp69f";
        libName = "libsqlite3_sys";
        authors = [
          "The rusqlite developers"
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
            optional = true;
          }
          {
            name = "vcpkg";
            packageId = "vcpkg";
            optional = true;
          }
        ];
        features = {
          "bindgen" = [ "dep:bindgen" ];
          "buildtime_bindgen" = [ "bindgen" "pkg-config" "vcpkg" ];
          "bundled" = [ "cc" "bundled_bindings" ];
          "bundled-sqlcipher" = [ "bundled" ];
          "bundled-sqlcipher-vendored-openssl" = [ "bundled-sqlcipher" "openssl-sys/vendored" ];
          "bundled-windows" = [ "cc" "bundled_bindings" ];
          "cc" = [ "dep:cc" ];
          "default" = [ "min_sqlite_version_3_14_0" ];
          "loadable_extension" = [ "prettyplease" "quote" "syn" ];
          "min_sqlite_version_3_14_0" = [ "pkg-config" "vcpkg" ];
          "openssl-sys" = [ "dep:openssl-sys" ];
          "pkg-config" = [ "dep:pkg-config" ];
          "prettyplease" = [ "dep:prettyplease" ];
          "preupdate_hook" = [ "buildtime_bindgen" ];
          "quote" = [ "dep:quote" ];
          "session" = [ "preupdate_hook" "buildtime_bindgen" ];
          "syn" = [ "dep:syn" ];
          "vcpkg" = [ "dep:vcpkg" ];
        };
        resolvedDefaultFeatures = [ "pkg-config" "unlock_notify" "vcpkg" ];
      };
      "libz-sys" = rec {
        crateName = "libz-sys";
        version = "1.1.22";
        edition = "2018";
        links = "z";
        sha256 = "07b5wxh0ska996kc0g2hanjhmb4di7ksm6ndljhr4pi0vykyfw4b";
        libName = "libz_sys";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Josh Triplett <josh@joshtriplett.org>"
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "vcpkg";
            packageId = "vcpkg";
          }
        ];
        features = {
          "cmake" = [ "dep:cmake" ];
          "default" = [ "libc" "stock-zlib" ];
          "libc" = [ "dep:libc" ];
          "zlib-ng" = [ "libc" "cmake" ];
          "zlib-ng-no-cmake-experimental-community-maintained" = [ "libc" ];
        };
        resolvedDefaultFeatures = [ "static" ];
      };
      "link-cplusplus" = rec {
        crateName = "link-cplusplus";
        version = "1.0.10";
        edition = "2018";
        links = "cplusplus";
        sha256 = "04h26gpg1k6g9qh61hbhvs1h35p2hyqhannny3ggjs7r0yh6svsa";
        libName = "link_cplusplus";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "libcxx" = [ "libc++" ];
          "libstdcxx" = [ "libstdc++" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "linked-hash-map" = rec {
        crateName = "linked-hash-map";
        version = "0.5.6";
        edition = "2015";
        sha256 = "03vpgw7x507g524nx5i1jf5dl8k3kv0fzg8v3ip6qqwbpkqww5q7";
        libName = "linked_hash_map";
        authors = [
          "Stepan Koltsov <stepan.koltsov@gmail.com>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
        ];
        features = {
          "heapsize" = [ "dep:heapsize" ];
          "heapsize_impl" = [ "heapsize" ];
          "serde" = [ "dep:serde" ];
          "serde_impl" = [ "serde" ];
        };
      };
      "linked_hash_set" = rec {
        crateName = "linked_hash_set";
        version = "0.1.5";
        edition = "2021";
        sha256 = "1qlj9vzyz8zcascp0z46izwv38y8cjdhxj2z1v44761dw9dmps5s";
        authors = [
          "Alex Butler <alexheretic@gmail.com>"
        ];
        dependencies = [
          {
            name = "linked-hash-map";
            packageId = "linked-hash-map";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "linregress" = rec {
        crateName = "linregress";
        version = "0.5.4";
        edition = "2021";
        sha256 = "1xvb0vxqy956z4mrkvn294jjj69jmh9g6qbnha3rgagjykfakvd9";
        authors = [
          "Nils Mehrtens <nils@hasinila.de>"
        ];
        dependencies = [
          {
            name = "nalgebra";
            packageId = "nalgebra";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];

      };
      "linux-raw-sys 0.1.4" = rec {
        crateName = "linux-raw-sys";
        version = "0.1.4";
        edition = "2018";
        sha256 = "1926520si5wkn4m6iz6ka97ya5q1dgr8ib3fd705fscfgixgflgh";
        libName = "linux_raw_sys";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" "general" "errno" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "no_std" ];
        };
        resolvedDefaultFeatures = [ "errno" "general" "ioctl" "no_std" ];
      };
      "linux-raw-sys 0.4.15" = rec {
        crateName = "linux-raw-sys";
        version = "0.4.15";
        edition = "2021";
        sha256 = "1aq7r2g7786hyxhv40spzf2nhag5xbw2axxc1k8z5k1dsgdm4v6j";
        libName = "linux_raw_sys";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" "general" "errno" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "no_std" ];
        };
        resolvedDefaultFeatures = [ "elf" "errno" "general" "if_ether" "ioctl" "net" "netlink" "no_std" "prctl" "xdp" ];
      };
      "linux-raw-sys 0.9.4" = rec {
        crateName = "linux-raw-sys";
        version = "0.9.4";
        edition = "2021";
        sha256 = "04kyjdrq79lz9ibrf7czk6cv9d3jl597pb9738vzbsbzy1j5i56d";
        libName = "linux_raw_sys";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" "general" "errno" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "no_std" ];
        };
        resolvedDefaultFeatures = [ "elf" "errno" "general" "ioctl" "no_std" ];
      };
      "lioness" = rec {
        crateName = "lioness";
        version = "0.1.2";
        edition = "2015";
        sha256 = "1fdcm7ikvbwgfn5y50ifvxry4x8d6dw124jpjif44b54ddq2dsaa";
        authors = [
          "Jeffrey Burdges <burdges@gnunet.org>"
          "David Stainton <dstainton415@gmail.com>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "blake2";
            packageId = "blake2 0.8.1";
          }
          {
            name = "chacha";
            packageId = "chacha";
          }
          {
            name = "keystream";
            packageId = "keystream";
          }
        ];

      };
      "litemap" = rec {
        crateName = "litemap";
        version = "0.8.0";
        edition = "2021";
        sha256 = "0mlrlskwwhirxk3wsz9psh6nxcy491n0dh8zl02qgj0jzpssw7i4";
        authors = [
          "The ICU4X Project Developers"
        ];
        features = {
          "databake" = [ "dep:databake" ];
          "default" = [ "alloc" ];
          "serde" = [ "dep:serde" "alloc" ];
          "testing" = [ "alloc" ];
          "yoke" = [ "dep:yoke" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "litep2p" = rec {
        crateName = "litep2p";
        version = "0.9.4";
        edition = "2021";
        sha256 = "1svkl0hyw8klfl5xpvmxwqsm3scvk3qx5chkh7hv0sw97k15c46p";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bs58";
            packageId = "bs58";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "cid";
            packageId = "cid 0.11.1";
          }
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
            features = [ "rand_core" ];
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "hickory-resolver";
            packageId = "hickory-resolver";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.9.0";
            features = [ "std" ];
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "mockall";
            packageId = "mockall";
          }
          {
            name = "multiaddr";
            packageId = "multiaddr 0.17.1";
          }
          {
            name = "multihash";
            packageId = "multihash 0.17.0";
            usesDefaultFeatures = false;
            features = [ "std" "multihash-impl" "identity" "sha2" "blake2b" ];
          }
          {
            name = "network-interface";
            packageId = "network-interface";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "prost";
            packageId = "prost 0.13.5";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "getrandom" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "simple-dns";
            packageId = "simple-dns";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "snow";
            packageId = "snow";
            usesDefaultFeatures = false;
            features = [ "ring-resolver" ];
          }
          {
            name = "socket2";
            packageId = "socket2";
            features = [ "all" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt" "net" "io-util" "time" "macros" "sync" "parking_lot" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
          }
          {
            name = "tokio-tungstenite";
            packageId = "tokio-tungstenite";
            optional = true;
            features = [ "rustls-tls-native-roots" "url" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = [ "compat" "io" "codec" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            features = [ "log" ];
          }
          {
            name = "uint";
            packageId = "uint 0.10.0";
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint 0.8.0";
            features = [ "codec" ];
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "x25519-dalek";
            packageId = "x25519-dalek";
          }
          {
            name = "x509-parser";
            packageId = "x509-parser 0.17.0";
          }
          {
            name = "yamux";
            packageId = "yamux 0.13.5";
          }
          {
            name = "yasna";
            packageId = "yasna";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        buildDependencies = [
          {
            name = "prost-build";
            packageId = "prost-build";
          }
        ];
        features = {
          "fuzz" = [ "serde/derive" "serde/rc" "bytes/serde" "dep:serde_millis" "cid/serde" "multihash/serde" ];
          "quic" = [ "dep:webpki" "dep:quinn" "dep:rustls" "dep:ring" "dep:rcgen" ];
          "webrtc" = [ "dep:str0m" ];
          "websocket" = [ "dep:tokio-tungstenite" ];
        };
        resolvedDefaultFeatures = [ "websocket" ];
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.4.12";
        edition = "2021";
        sha256 = "05qvxa6g27yyva25a5ghsg85apdxkvr77yhkyhapj6r8vnf8pbq7";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "atomic_usize" ];
          "owning_ref" = [ "dep:owning_ref" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "atomic_usize" "default" ];
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.27";
        edition = "2021";
        sha256 = "150x589dqil307rv0rwj0jsgz5bjbwvl83gyl61jf873a7rjvp0k";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "kv_serde" = [ "kv_std" "value-bag/serde" "serde" ];
          "kv_std" = [ "std" "kv" "value-bag/error" ];
          "kv_sval" = [ "kv" "value-bag/sval" "sval" "sval_ref" ];
          "kv_unstable" = [ "kv" "value-bag" ];
          "kv_unstable_serde" = [ "kv_serde" "kv_unstable_std" ];
          "kv_unstable_std" = [ "kv_std" "kv_unstable" ];
          "kv_unstable_sval" = [ "kv_sval" "kv_unstable" ];
          "serde" = [ "dep:serde" ];
          "sval" = [ "dep:sval" ];
          "sval_ref" = [ "dep:sval_ref" ];
          "value-bag" = [ "dep:value-bag" ];
        };
        resolvedDefaultFeatures = [ "serde" "std" ];
      };
      "log-mdc" = rec {
        crateName = "log-mdc";
        version = "0.1.0";
        edition = "2015";
        sha256 = "1iw1x3qhjvrac35spikn5h06a1rxd9vw216jk8h52jhz9i0j2kd9";
        libName = "log_mdc";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];

      };
      "log4rs" = rec {
        crateName = "log4rs";
        version = "1.3.0";
        edition = "2018";
        sha256 = "19jck058vgb2k1jypknjcgpadq1ydrzb7sl4y8f3kl2vw5d165h8";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Evan Simmons <esims89@gmail.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "arc-swap";
            packageId = "arc-swap";
          }
          {
            name = "chrono";
            packageId = "chrono";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "clock" ];
          }
          {
            name = "derivative";
            packageId = "derivative";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "humantime";
            packageId = "humantime";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: (!(target."windows" or false));
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "log-mdc";
            packageId = "log-mdc";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "serde-value";
            packageId = "serde-value";
            optional = true;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "thread-id";
            packageId = "thread-id";
            optional = true;
          }
          {
            name = "typemap-ors";
            packageId = "typemap-ors";
            optional = true;
          }
          {
            name = "winapi";
            packageId = "winapi";
            optional = true;
            target = { target, features }: (target."windows" or false);
            features = [ "handleapi" "minwindef" "processenv" "winbase" "wincon" ];
          }
        ];
        devDependencies = [
          {
            name = "humantime";
            packageId = "humantime";
          }
        ];
        features = {
          "all_components" = [ "console_appender" "file_appender" "rolling_file_appender" "compound_policy" "delete_roller" "fixed_window_roller" "size_trigger" "time_trigger" "json_encoder" "pattern_encoder" "threshold_filter" ];
          "chrono" = [ "dep:chrono" ];
          "config_parsing" = [ "humantime" "serde" "serde-value" "typemap-ors" "log/serde" ];
          "console_appender" = [ "console_writer" "simple_writer" "pattern_encoder" ];
          "console_writer" = [ "ansi_writer" "libc" "winapi" ];
          "default" = [ "all_components" "config_parsing" "yaml_format" ];
          "file_appender" = [ "parking_lot" "simple_writer" "pattern_encoder" ];
          "flate2" = [ "dep:flate2" ];
          "gzip" = [ "flate2" ];
          "humantime" = [ "dep:humantime" ];
          "json_encoder" = [ "serde" "serde_json" "chrono" "log-mdc" "log/serde" "thread-id" ];
          "json_format" = [ "serde_json" ];
          "libc" = [ "dep:libc" ];
          "log-mdc" = [ "dep:log-mdc" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "pattern_encoder" = [ "chrono" "log-mdc" "thread-id" ];
          "rand" = [ "dep:rand" ];
          "rolling_file_appender" = [ "parking_lot" "simple_writer" "pattern_encoder" ];
          "serde" = [ "dep:serde" ];
          "serde-value" = [ "dep:serde-value" ];
          "serde_json" = [ "dep:serde_json" ];
          "serde_yaml" = [ "dep:serde_yaml" ];
          "thread-id" = [ "dep:thread-id" ];
          "time_trigger" = [ "rand" ];
          "toml" = [ "dep:toml" ];
          "toml_format" = [ "toml" ];
          "typemap-ors" = [ "dep:typemap-ors" ];
          "winapi" = [ "dep:winapi" ];
          "yaml_format" = [ "serde_yaml" ];
        };
        resolvedDefaultFeatures = [ "all_components" "ansi_writer" "chrono" "compound_policy" "config_parsing" "console_appender" "console_writer" "default" "delete_roller" "file_appender" "fixed_window_roller" "humantime" "json_encoder" "libc" "log-mdc" "parking_lot" "pattern_encoder" "rand" "rolling_file_appender" "serde" "serde-value" "serde_json" "serde_yaml" "simple_writer" "size_trigger" "thread-id" "threshold_filter" "time_trigger" "typemap-ors" "winapi" "yaml_format" ];
      };
      "lru 0.12.5" = rec {
        crateName = "lru";
        version = "0.12.5";
        edition = "2015";
        sha256 = "0f1a7cgqxbyhrmgaqqa11m3azwhcc36w0v5r4izgbhadl3sg8k13";
        authors = [
          "Jerome Froelich <jeromefroelic@hotmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.3";
            optional = true;
          }
        ];
        features = {
          "default" = [ "hashbrown" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "nightly" = [ "hashbrown" "hashbrown/nightly" ];
        };
        resolvedDefaultFeatures = [ "default" "hashbrown" ];
      };
      "lru 0.14.0" = rec {
        crateName = "lru";
        version = "0.14.0";
        edition = "2015";
        sha256 = "160ivb75982rdarpals1d9cxcfjlixl7kwx6k7ghpwamc48cg34z";
        authors = [
          "Jerome Froelich <jeromefroelic@hotmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.3";
            optional = true;
          }
        ];
        features = {
          "default" = [ "hashbrown" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "nightly" = [ "hashbrown" "hashbrown/nightly" ];
        };
        resolvedDefaultFeatures = [ "default" "hashbrown" ];
      };
      "lru-cache" = rec {
        crateName = "lru-cache";
        version = "0.1.2";
        edition = "2015";
        sha256 = "071viv6g2p3akwqmfb3c8vsycs5n7kr17b70l7la071jv0d4zqii";
        libName = "lru_cache";
        authors = [
          "Stepan Koltsov <stepan.koltsov@gmail.com>"
        ];
        dependencies = [
          {
            name = "linked-hash-map";
            packageId = "linked-hash-map";
          }
        ];
        features = {
          "heapsize" = [ "dep:heapsize" ];
          "heapsize_impl" = [ "heapsize" "linked-hash-map/heapsize_impl" ];
        };
      };
      "lz4" = rec {
        crateName = "lz4";
        version = "1.28.1";
        edition = "2018";
        crateBin = [];
        sha256 = "1x2svvs3gkn3krv61nd7ms4vmikibsnfl31mk0z480qdhqz542x2";
        authors = [
          "Jens Heyens <jens.heyens@ewetel.net>"
          "Artem V. Navrotskiy <bozaro@buzzsoft.ru>"
          "Patrick Marks <pmarks@gmail.com>"
        ];
        dependencies = [
          {
            name = "lz4-sys";
            packageId = "lz4-sys";
          }
        ];

      };
      "lz4-sys" = rec {
        crateName = "lz4-sys";
        version = "1.11.1+lz4-1.10.0";
        edition = "2015";
        links = "lz4";
        sha256 = "1rhqnhwq05fmlc2q39ipsq0vpi0xf6w6p22j6q5x637dqvbc1n3b";
        libName = "lz4_sys";
        authors = [
          "Jens Heyens <jens.heyens@ewetel.net>"
          "Artem V. Navrotskiy <bozaro@buzzsoft.ru>"
          "Patrick Marks <pmarks@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "mach" = rec {
        crateName = "mach";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1yksa8lwzqh150gr4417rls1wk20asy9vhp8kq5g9n7z58xyh8xq";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
          "David Cuddeback <david.cuddeback@gmail.com>"
          "Gonzalo Brito Gadeschi <gonzalobg88@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "rustc-std-workspace-core" "libc/rustc-dep-of-std" ];
          "rustc-std-workspace-core" = [ "dep:rustc-std-workspace-core" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "macro_magic" = rec {
        crateName = "macro_magic";
        version = "0.5.1";
        edition = "2021";
        sha256 = "07fjfqpl4b2gyd89pwa2rcp55j4nl00cxnakpipx4s0l6pqgjcyc";
        authors = [
          "sam0x17"
        ];
        dependencies = [
          {
            name = "macro_magic_core";
            packageId = "macro_magic_core";
            optional = true;
          }
          {
            name = "macro_magic_macros";
            packageId = "macro_magic_macros";
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            optional = true;
            features = [ "full" ];
          }
        ];
        features = {
          "proc_support" = [ "dep:macro_magic_core" "dep:syn" "dep:quote" ];
        };
        resolvedDefaultFeatures = [ "default" "proc_support" ];
      };
      "macro_magic_core" = rec {
        crateName = "macro_magic_core";
        version = "0.5.1";
        edition = "2021";
        sha256 = "0l7ikfl7s1cyivsy3kaicfmqznbrrzkwlfirba355ws2gs4dr1qn";
        dependencies = [
          {
            name = "const-random";
            packageId = "const-random";
          }
          {
            name = "derive-syn-parse";
            packageId = "derive-syn-parse";
          }
          {
            name = "macro_magic_core_macros";
            packageId = "macro_magic_core_macros";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "macro_magic_core_macros" = rec {
        crateName = "macro_magic_core_macros";
        version = "0.5.1";
        edition = "2021";
        sha256 = "021kp0rn686b71wgxh0x2zd6s49cvdrh29nlvfcbvd8m33jbyamh";
        procMacro = true;
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "macro_magic_macros" = rec {
        crateName = "macro_magic_macros";
        version = "0.5.1";
        edition = "2021";
        sha256 = "0saq1rbi46lpi2wz4x0s0vgif63wh6jxjzi78nzpd25qckp2iskk";
        procMacro = true;
        dependencies = [
          {
            name = "macro_magic_core";
            packageId = "macro_magic_core";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "matchers" = rec {
        crateName = "matchers";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0n2mbk7lg2vf962c8xwzdq96yrc9i0p8dbmm4wa1nnkcp1dhfqw2";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "regex-automata";
            packageId = "regex-automata 0.1.10";
          }
        ];

      };
      "matrixmultiply" = rec {
        crateName = "matrixmultiply";
        version = "0.3.10";
        edition = "2018";
        sha256 = "020sqwg3cvprfasbszqbnis9zx6c3w9vlkfidyimgblzdq0y6vd0";
        authors = [
          "bluss"
          "R. Janis Goldschmidt"
        ];
        dependencies = [
          {
            name = "rawpointer";
            packageId = "rawpointer";
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "num_cpus" = [ "dep:num_cpus" ];
          "once_cell" = [ "dep:once_cell" ];
          "thread-tree" = [ "dep:thread-tree" ];
          "threading" = [ "thread-tree" "std" "once_cell" "num_cpus" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "md-5" = rec {
        crateName = "md-5";
        version = "0.10.6";
        edition = "2018";
        sha256 = "1kvq5rnpm4fzwmyv5nmnxygdhhb2369888a06gdc9pxyrzh7x7nq";
        libName = "md5";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "md5-asm" ];
          "default" = [ "std" ];
          "md5-asm" = [ "dep:md5-asm" ];
          "oid" = [ "digest/oid" ];
          "std" = [ "digest/std" ];
        };
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.7.4";
        edition = "2021";
        sha256 = "18z32bhxrax0fnjikv475z7ii718hq457qwmaryixfxsl2qrmjkq";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "logging" = [ "dep:log" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "std" = [ "alloc" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "memfd" = rec {
        crateName = "memfd";
        version = "0.6.4";
        edition = "2018";
        sha256 = "0r5cm3wzyr1x7768h3hns77b494qbz0g05cb9wgpjvrcsm5gmkxj";
        authors = [
          "Luca Bruno <lucab@lucabruno.net>"
          "Simonas Kazlauskas <memfd@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "rustix";
            packageId = "rustix 0.38.44";
            features = [ "fs" ];
          }
        ];

      };
      "memmap2 0.5.10" = rec {
        crateName = "memmap2";
        version = "0.5.10";
        edition = "2018";
        sha256 = "09xk415fxyl4a9pgby4im1v2gqlb5lixpm99dczkk30718na9yl3";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
        ];
        features = {
          "stable_deref_trait" = [ "dep:stable_deref_trait" ];
        };
      };
      "memmap2 0.9.5" = rec {
        crateName = "memmap2";
        version = "0.9.5";
        edition = "2018";
        sha256 = "0krpvvkpg4i3l05cv3q2xk24a1vj5c86gbrli2wzhj1qkpnpwgzx";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
        ];
        features = {
          "stable_deref_trait" = [ "dep:stable_deref_trait" ];
        };
      };
      "memoffset" = rec {
        crateName = "memoffset";
        version = "0.8.0";
        edition = "2015";
        sha256 = "1qcdic88dhgw76pafgndpz04pig8il4advq978mxdxdwrydp276n";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "memory-db" = rec {
        crateName = "memory-db";
        version = "0.32.0";
        edition = "2018";
        sha256 = "1gkgvncfd8ri9q8ypf272q54raz0a7m1bg33bsj34d198vdm12w0";
        libName = "memory_db";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "hash-db";
            packageId = "hash-db";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "hash-db/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "merkleized-metadata" = rec {
        crateName = "merkleized-metadata";
        version = "0.4.0";
        edition = "2021";
        sha256 = "10fh93a2k73xnmb8gvvcn21p9hmf4yn9pwszm3ci4i05rv07m6yw";
        libName = "merkleized_metadata";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "array-bytes";
            packageId = "array-bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "blake3";
            packageId = "blake3";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-metadata";
            packageId = "frame-metadata";
            usesDefaultFeatures = false;
            features = [ "current" ];
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-decode";
            packageId = "scale-decode";
            usesDefaultFeatures = false;
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "frame-metadata";
            packageId = "frame-metadata";
            usesDefaultFeatures = false;
            features = [ "current" "decode" ];
          }
        ];

      };
      "merlin" = rec {
        crateName = "merlin";
        version = "3.0.0";
        edition = "2018";
        sha256 = "0z9rh9jlpcs0i0cijbs6pcq26gl4qwz05y7zbnv7h2gwk4kqxhsq";
        authors = [
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "keccak";
            packageId = "keccak";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        features = {
          "debug-transcript" = [ "hex" ];
          "default" = [ "std" ];
          "hex" = [ "dep:hex" ];
          "std" = [ "rand_core/std" "byteorder/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "miette" = rec {
        crateName = "miette";
        version = "5.10.0";
        edition = "2018";
        sha256 = "0vl5qvl3bgha6nnkdl7kiha6v4ypd6d51wyc4q1bvdpamr75ifsr";
        authors = [
          "Kat Marchán <kzm@zkat.tech>"
        ];
        dependencies = [
          {
            name = "miette-derive";
            packageId = "miette-derive";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width 0.1.14";
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "backtrace-ext" = [ "dep:backtrace-ext" ];
          "fancy" = [ "fancy-no-backtrace" "backtrace" "backtrace-ext" ];
          "fancy-no-backtrace" = [ "owo-colors" "is-terminal" "textwrap" "terminal_size" "supports-hyperlinks" "supports-color" "supports-unicode" ];
          "is-terminal" = [ "dep:is-terminal" ];
          "owo-colors" = [ "dep:owo-colors" ];
          "serde" = [ "dep:serde" ];
          "supports-color" = [ "dep:supports-color" ];
          "supports-hyperlinks" = [ "dep:supports-hyperlinks" ];
          "supports-unicode" = [ "dep:supports-unicode" ];
          "terminal_size" = [ "dep:terminal_size" ];
          "textwrap" = [ "dep:textwrap" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "miette-derive" = rec {
        crateName = "miette-derive";
        version = "5.10.0";
        edition = "2018";
        sha256 = "0p33msrngkxlp5ajm8nijamii9vcwwpy8gfh4m53qnmrc0avrrs9";
        procMacro = true;
        libName = "miette_derive";
        authors = [
          "Kat Marchán <kzm@zkat.tech>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "minicbor" = rec {
        crateName = "minicbor";
        version = "0.25.1";
        edition = "2021";
        crateBin = [];
        sha256 = "1c4iaqdnwzlfw6wz10sqyd4nhy6jx2ax4z7pnm81yg46q5h2lif0";
        authors = [
          "Toralf Wittner <tw@dtex.org>"
        ];
        dependencies = [
          {
            name = "half";
            packageId = "half";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "minicbor-derive";
            packageId = "minicbor-derive";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "minicbor-derive?/alloc" ];
          "derive" = [ "minicbor-derive" ];
          "full" = [ "std" "derive" "half" ];
          "half" = [ "dep:half" ];
          "minicbor-derive" = [ "dep:minicbor-derive" ];
          "std" = [ "alloc" "minicbor-derive?/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "derive" "half" "minicbor-derive" "std" ];
      };
      "minicbor-derive" = rec {
        crateName = "minicbor-derive";
        version = "0.15.3";
        edition = "2021";
        sha256 = "0w7vc4sz0j5i9lchgc5qrkxxfcrpwx46l09pqw05nw3zyzzhj8mx";
        procMacro = true;
        libName = "minicbor_derive";
        authors = [
          "Toralf Wittner <tw@dtex.org>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "derive" "extra-traits" "visit" ];
          }
        ];
        features = {
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "minimal-lexical" = rec {
        crateName = "minimal-lexical";
        version = "0.2.1";
        edition = "2018";
        sha256 = "16ppc5g84aijpri4jzv14rvcnslvlpphbszc7zzp6vfkddf4qdb8";
        libName = "minimal_lexical";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.8.8";
        edition = "2021";
        sha256 = "0al9iy33flfgxawj789w2c8xxwg1n2r5vv6m6p5hl2fvd2vlgriv";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
          "Rich Geldreich richgel99@gmail.com"
        ];
        dependencies = [
          {
            name = "adler2";
            packageId = "adler2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "with-alloc" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "adler2/rustc-dep-of-std" ];
          "serde" = [ "dep:serde" ];
          "simd" = [ "simd-adler32" ];
          "simd-adler32" = [ "dep:simd-adler32" ];
        };
      };
      "mio 0.8.11" = rec {
        crateName = "mio";
        version = "0.8.11";
        edition = "2018";
        sha256 = "034byyl0ardml5yliy1hmvx8arkmn9rv479pid794sm07ia519m4";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.0+wasi-snapshot-preview1";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_Storage_FileSystem" "Win32_System_IO" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = {
          "default" = [ "log" ];
          "log" = [ "dep:log" ];
          "os-ext" = [ "os-poll" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_Security" ];
        };
        resolvedDefaultFeatures = [ "default" "log" "net" "os-ext" "os-poll" ];
      };
      "mio 1.0.3" = rec {
        crateName = "mio";
        version = "1.0.3";
        edition = "2021";
        sha256 = "1gah0h4ia3avxbwym0b6bi6lr6rpysmj9zvw6zis5yq0z0xq91i8";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.0+wasi-snapshot-preview1";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Wdk_Foundation" "Wdk_Storage_FileSystem" "Wdk_System_IO" "Win32_Foundation" "Win32_Networking_WinSock" "Win32_Storage_FileSystem" "Win32_System_IO" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = {
          "default" = [ "log" ];
          "log" = [ "dep:log" ];
          "os-ext" = [ "os-poll" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_Security" ];
        };
        resolvedDefaultFeatures = [ "net" "os-ext" "os-poll" ];
      };
      "mixnet" = rec {
        crateName = "mixnet";
        version = "0.7.0";
        edition = "2021";
        sha256 = "0jkz0k69zjr9i0fb9y25i156mk4h5j2n5n518wljx3jx94wyp8ys";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec 0.7.6";
          }
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "blake2";
            packageId = "blake2 0.10.6";
          }
          {
            name = "c2-chacha";
            packageId = "c2-chacha";
          }
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "hashlink";
            packageId = "hashlink 0.8.4";
          }
          {
            name = "lioness";
            packageId = "lioness";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.3.1";
          }
          {
            name = "rand_distr";
            packageId = "rand_distr";
          }
          {
            name = "subtle";
            packageId = "subtle 2.6.1";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];

      };
      "mockall" = rec {
        crateName = "mockall";
        version = "0.13.1";
        edition = "2021";
        sha256 = "1lir70dd9cnsjlf20gi3i51ha9n7mlrkx74bx5gfszlcdk6bz9ir";
        authors = [
          "Alan Somers <asomers@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "downcast";
            packageId = "downcast";
          }
          {
            name = "fragile";
            packageId = "fragile";
          }
          {
            name = "mockall_derive";
            packageId = "mockall_derive";
          }
          {
            name = "predicates";
            packageId = "predicates";
            usesDefaultFeatures = false;
          }
          {
            name = "predicates-tree";
            packageId = "predicates-tree";
          }
        ];
        features = {
          "nightly" = [ "mockall_derive/nightly_derive" "downcast/nightly" ];
        };
      };
      "mockall_derive" = rec {
        crateName = "mockall_derive";
        version = "0.13.1";
        edition = "2021";
        sha256 = "1608qajqrz23xbvv81alc6wm4l24as1bsqg4shdh3sggq8231ji5";
        procMacro = true;
        authors = [
          "Alan Somers <asomers@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" "full" ];
          }
        ];
        features = {
          "nightly_derive" = [ "proc-macro2/nightly" ];
        };
      };
      "multiaddr 0.17.1" = rec {
        crateName = "multiaddr";
        version = "0.17.1";
        edition = "2018";
        sha256 = "1gfkcsvzsprs9rqk3kxspph9qhd2vm9bpfqjhvx13589qxkzadib";
        authors = [
          "dignifiedquire <dignifiedquire@gmail.com>"
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "multibase";
            packageId = "multibase";
          }
          {
            name = "multihash";
            packageId = "multihash 0.17.0";
            usesDefaultFeatures = false;
            features = [ "std" "multihash-impl" "identity" ];
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint 0.7.2";
          }
          {
            name = "url";
            packageId = "url";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "url" ];
          "url" = [ "dep:url" ];
        };
        resolvedDefaultFeatures = [ "default" "url" ];
      };
      "multiaddr 0.18.2" = rec {
        crateName = "multiaddr";
        version = "0.18.2";
        edition = "2021";
        sha256 = "0qb9kgbxy6q3x3b5f9fjyplgbcwwp1b9xihvsb0h93j81gv52qzy";
        authors = [
          "dignifiedquire <dignifiedquire@gmail.com>"
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
            features = [ "peerid" ];
          }
          {
            name = "multibase";
            packageId = "multibase";
          }
          {
            name = "multihash";
            packageId = "multihash 0.19.3";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint 0.8.0";
          }
          {
            name = "url";
            packageId = "url";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "url" ];
          "url" = [ "dep:url" ];
        };
        resolvedDefaultFeatures = [ "default" "url" ];
      };
      "multibase" = rec {
        crateName = "multibase";
        version = "0.9.1";
        edition = "2018";
        sha256 = "014l697md16829k41hzmfx4in9jzhn774q5292bsq10z7kn3jdcv";
        authors = [
          "Friedel Ziegelmayer <dignifiedquire@gmail.com>"
        ];
        dependencies = [
          {
            name = "base-x";
            packageId = "base-x";
            usesDefaultFeatures = false;
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "data-encoding-macro";
            packageId = "data-encoding-macro";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "data-encoding/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "multihash 0.17.0" = rec {
        crateName = "multihash";
        version = "0.17.0";
        edition = "2018";
        sha256 = "0h5fhgvnn7cl72c6habz7brhnl3y016nkq9xrvxpj0b13pq6ypc3";
        authors = [
          "dignifiedquire <dignifiedquire@gmail.com>"
          "David Craven <david@craven.ch>"
          "Volker Mische <volker.mische@gmail.com>"
        ];
        dependencies = [
          {
            name = "blake2b_simd";
            packageId = "blake2b_simd";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "blake2s_simd";
            packageId = "blake2s_simd";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "blake3";
            packageId = "blake3";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "core2";
            packageId = "core2";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "multihash-derive";
            packageId = "multihash-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            rename = "sha-2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sha3";
            packageId = "sha3";
            rename = "sha-3";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint 0.7.2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "core2/alloc" ];
          "arb" = [ "quickcheck" "rand" "arbitrary" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "blake2b" = [ "blake2b_simd" ];
          "blake2b_simd" = [ "dep:blake2b_simd" ];
          "blake2s" = [ "blake2s_simd" ];
          "blake2s_simd" = [ "dep:blake2s_simd" ];
          "blake3" = [ "dep:blake3" ];
          "default" = [ "std" "derive" "multihash-impl" "secure-hashes" ];
          "derive" = [ "multihash-derive" ];
          "digest" = [ "dep:digest" ];
          "multihash-derive" = [ "dep:multihash-derive" ];
          "multihash-impl" = [ "derive" ];
          "parity-scale-codec" = [ "dep:parity-scale-codec" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rand" = [ "dep:rand" ];
          "ripemd" = [ "ripemd-rs" ];
          "ripemd-rs" = [ "dep:ripemd-rs" ];
          "scale-codec" = [ "parity-scale-codec" ];
          "secure-hashes" = [ "blake2b" "blake2s" "blake3" "sha2" "sha3" ];
          "serde" = [ "dep:serde" ];
          "serde-big-array" = [ "dep:serde-big-array" ];
          "serde-codec" = [ "serde" "serde-big-array" ];
          "sha-1" = [ "dep:sha-1" ];
          "sha-2" = [ "dep:sha-2" ];
          "sha-3" = [ "dep:sha-3" ];
          "sha1" = [ "digest" "sha-1" ];
          "sha2" = [ "digest" "sha-2" ];
          "sha3" = [ "digest" "sha-3" ];
          "std" = [ "unsigned-varint/std" "multihash-derive/std" "alloc" ];
          "strobe" = [ "strobe-rs" ];
          "strobe-rs" = [ "dep:strobe-rs" ];
        };
        resolvedDefaultFeatures = [ "alloc" "blake2b" "blake2b_simd" "blake2s" "blake2s_simd" "blake3" "default" "derive" "digest" "identity" "multihash-derive" "multihash-impl" "secure-hashes" "sha-2" "sha-3" "sha2" "sha3" "std" ];
      };
      "multihash 0.19.3" = rec {
        crateName = "multihash";
        version = "0.19.3";
        edition = "2021";
        sha256 = "13ga39mbf9zf19q98rzf55ik0vlwnq5zyagwkahdd7f2adwhwhvb";
        authors = [
          "dignifiedquire <dignifiedquire@gmail.com>"
          "David Craven <david@craven.ch>"
          "Volker Mische <volker.mische@gmail.com>"
        ];
        dependencies = [
          {
            name = "core2";
            packageId = "core2";
            usesDefaultFeatures = false;
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint 0.8.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "core2/alloc" ];
          "arb" = [ "dep:quickcheck" "dep:rand" "dep:arbitrary" ];
          "default" = [ "std" ];
          "scale-codec" = [ "dep:parity-scale-codec" ];
          "serde" = [ "dep:serde" ];
          "serde-codec" = [ "serde" ];
          "std" = [ "unsigned-varint/std" "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "multihash-derive" = rec {
        crateName = "multihash-derive";
        version = "0.8.1";
        edition = "2018";
        sha256 = "1nx1ibhyzk25fjisjnsc070n2r8z9f65vggpmpvqw393wr94fv8x";
        procMacro = true;
        libName = "multihash_derive";
        authors = [
          "David Craven <david@craven.ch>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 1.1.3";
          }
          {
            name = "proc-macro-error";
            packageId = "proc-macro-error";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            features = [ "span-locations" ];
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
          {
            name = "synstructure";
            packageId = "synstructure 0.12.6";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "multimap" = rec {
        crateName = "multimap";
        version = "0.10.1";
        edition = "2015";
        sha256 = "1150lf0hjfjj4ksb8s3y0hl7a2nqzqlbh0is7vdym2iyjfrfr1qx";
        authors = [
          "Håvar Nøvik <havar.novik@gmail.com>"
        ];
        features = {
          "default" = [ "serde_impl" ];
          "serde" = [ "dep:serde" ];
          "serde_impl" = [ "serde" ];
        };
      };
      "multistream-select" = rec {
        crateName = "multistream-select";
        version = "0.13.0";
        edition = "2021";
        sha256 = "069gqjl4gy9qggrrvkyz145bk9p1gw6lzvi6ndi8laf2xvjzh3ga";
        libName = "multistream_select";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint 0.7.2";
          }
        ];

      };
      "nalgebra" = rec {
        crateName = "nalgebra";
        version = "0.33.2";
        edition = "2018";
        sha256 = "0fvayv2fa6x4mfm4cq3m2cfcc2jwkiq4sm73209zszkh9gvcvbi6";
        authors = [
          "Sébastien Crozet <developer@crozet.re>"
        ];
        dependencies = [
          {
            name = "approx";
            packageId = "approx";
            usesDefaultFeatures = false;
          }
          {
            name = "matrixmultiply";
            packageId = "matrixmultiply";
            optional = true;
          }
          {
            name = "num-complex";
            packageId = "num-complex";
            usesDefaultFeatures = false;
          }
          {
            name = "num-rational";
            packageId = "num-rational";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "simba";
            packageId = "simba";
            usesDefaultFeatures = false;
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "alga" = [ "dep:alga" ];
          "arbitrary" = [ "quickcheck" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "compare" = [ "matrixcompare-core" ];
          "convert-bytemuck" = [ "bytemuck" "num-complex/bytemuck" ];
          "convert-glam014" = [ "glam014" ];
          "convert-glam015" = [ "glam015" ];
          "convert-glam016" = [ "glam016" ];
          "convert-glam017" = [ "glam017" ];
          "convert-glam018" = [ "glam018" ];
          "convert-glam019" = [ "glam019" ];
          "convert-glam020" = [ "glam020" ];
          "convert-glam021" = [ "glam021" ];
          "convert-glam022" = [ "glam022" ];
          "convert-glam023" = [ "glam023" ];
          "convert-glam024" = [ "glam024" ];
          "convert-glam025" = [ "glam025" ];
          "convert-glam027" = [ "glam027" ];
          "convert-glam028" = [ "glam028" ];
          "convert-glam029" = [ "glam029" ];
          "convert-mint" = [ "mint" ];
          "debug" = [ "approx/num-complex" "rand" ];
          "default" = [ "std" "macros" ];
          "glam014" = [ "dep:glam014" ];
          "glam015" = [ "dep:glam015" ];
          "glam016" = [ "dep:glam016" ];
          "glam017" = [ "dep:glam017" ];
          "glam018" = [ "dep:glam018" ];
          "glam019" = [ "dep:glam019" ];
          "glam020" = [ "dep:glam020" ];
          "glam021" = [ "dep:glam021" ];
          "glam022" = [ "dep:glam022" ];
          "glam023" = [ "dep:glam023" ];
          "glam024" = [ "dep:glam024" ];
          "glam025" = [ "dep:glam025" ];
          "glam027" = [ "dep:glam027" ];
          "glam028" = [ "dep:glam028" ];
          "glam029" = [ "dep:glam029" ];
          "io" = [ "pest" "pest_derive" ];
          "libm" = [ "simba/libm" ];
          "libm-force" = [ "simba/libm_force" ];
          "macros" = [ "nalgebra-macros" ];
          "matrixcompare-core" = [ "dep:matrixcompare-core" ];
          "matrixmultiply" = [ "dep:matrixmultiply" ];
          "mint" = [ "dep:mint" ];
          "nalgebra-macros" = [ "dep:nalgebra-macros" ];
          "pest" = [ "dep:pest" ];
          "pest_derive" = [ "dep:pest_derive" ];
          "proptest" = [ "dep:proptest" ];
          "proptest-support" = [ "proptest" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rand" = [ "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr" ];
          "rand-no-std" = [ "rand-package" ];
          "rand-package" = [ "dep:rand-package" ];
          "rand_distr" = [ "dep:rand_distr" ];
          "rayon" = [ "dep:rayon" ];
          "rkyv" = [ "dep:rkyv" ];
          "rkyv-safe-deser" = [ "rkyv-serialize" "rkyv/validation" ];
          "rkyv-serialize" = [ "rkyv-serialize-no-std" "rkyv/std" "rkyv/validation" ];
          "rkyv-serialize-no-std" = [ "rkyv/size_32" ];
          "serde" = [ "dep:serde" ];
          "serde-serialize" = [ "serde-serialize-no-std" "serde/std" ];
          "serde-serialize-no-std" = [ "serde" "num-complex/serde" ];
          "std" = [ "matrixmultiply" "num-traits/std" "num-complex/std" "num-rational/std" "approx/std" "simba/std" ];
        };
        resolvedDefaultFeatures = [ "matrixmultiply" "std" ];
      };
      "names" = rec {
        crateName = "names";
        version = "0.14.0";
        edition = "2018";
        crateBin = [];
        sha256 = "1g1rxifcsvj9zj2nmwbdix8b5ynpghs4rq40vs966jqlylxwvpbv";
        authors = [
          "Fletcher Nichol <fnichol@nichol.ca>"
        ];
        dependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];
        features = {
          "application" = [ "clap" ];
          "clap" = [ "dep:clap" ];
          "default" = [ "application" ];
        };
      };
      "netlink-packet-core" = rec {
        crateName = "netlink-packet-core";
        version = "0.7.0";
        edition = "2018";
        sha256 = "197dh9c5570135kv5q770n2ih5prhsql58cd71xxcya4f2plywkj";
        libName = "netlink_packet_core";
        authors = [
          "Corentin Henry <corentinhenry@gmail.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "netlink-packet-utils";
            packageId = "netlink-packet-utils";
          }
        ];

      };
      "netlink-packet-route" = rec {
        crateName = "netlink-packet-route";
        version = "0.17.1";
        edition = "2018";
        sha256 = "0rjsg8cd8yd1in9czmzg1fa0y9qgx4lhh3aqi0grf1m3lp79hf85";
        libName = "netlink_packet_route";
        authors = [
          "Corentin Henry <corentinhenry@gmail.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "netlink-packet-core";
            packageId = "netlink-packet-core";
          }
          {
            name = "netlink-packet-utils";
            packageId = "netlink-packet-utils";
          }
        ];
        features = {
        };
      };
      "netlink-packet-utils" = rec {
        crateName = "netlink-packet-utils";
        version = "0.5.2";
        edition = "2018";
        sha256 = "0d3xfh9zg0x2hbmh8iws0dvhj69prpx54khfvmfakm8sqw48mphf";
        libName = "netlink_packet_utils";
        authors = [
          "Corentin Henry <corentinhenry@gmail.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "netlink-proto" = rec {
        crateName = "netlink-proto";
        version = "0.11.5";
        edition = "2018";
        sha256 = "0q0xqhp0n8307zakbfsa4w2n5dfrw80ym7nq20j6339g5h0jwibj";
        libName = "netlink_proto";
        authors = [
          "Corentin Henry <corentinhenry@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "netlink-packet-core";
            packageId = "netlink-packet-core";
          }
          {
            name = "netlink-sys";
            packageId = "netlink-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];
        features = {
          "default" = [ "tokio_socket" ];
          "smol_socket" = [ "netlink-sys/smol_socket" ];
          "tokio_socket" = [ "netlink-sys/tokio_socket" ];
        };
        resolvedDefaultFeatures = [ "tokio_socket" ];
      };
      "netlink-sys" = rec {
        crateName = "netlink-sys";
        version = "0.8.7";
        edition = "2018";
        sha256 = "08xxx1ng7fxkvqrh81y95hni5mnir1ksg5xzj4vbj32rf2m07j8n";
        libName = "netlink_sys";
        authors = [
          "Corentin Henry <corentinhenry@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "net" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "net" "macros" "rt-multi-thread" ];
          }
        ];
        features = {
          "async-io" = [ "dep:async-io" ];
          "futures" = [ "dep:futures" ];
          "mio" = [ "dep:mio" ];
          "mio_socket" = [ "mio" ];
          "smol_socket" = [ "async-io" "futures" ];
          "tokio" = [ "dep:tokio" ];
          "tokio_socket" = [ "tokio" "futures" ];
        };
        resolvedDefaultFeatures = [ "default" "futures" "tokio" "tokio_socket" ];
      };
      "network-interface" = rec {
        crateName = "network-interface";
        version = "2.0.1";
        edition = "2018";
        sha256 = "00i6531cwqbjli7zdsp8y3h253kmlqkp1q567bga5r06am8rycn3";
        libName = "network_interface";
        authors = [
          "Esteban Borai <estebanborai@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (("android" == target."os" or null) || ("linux" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (("ios" == target."os" or null) || ("macos" == target."os" or null) || ("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null) || ("dragonfly" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("windows" == target."os" or null);
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "ws2def" "ws2ipdef" "netioapi" "iphlpapi" "iptypes" "ntdef" "winerror" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            target = {target, features}: (builtins.elem "unix" target."family");
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "newline-converter" = rec {
        crateName = "newline-converter";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0zyw2hyjl89rj1zmp9n8fq69pbfp9zl1cbal73agxjxixjbv1dj7";
        libName = "newline_converter";
        authors = [
          "Michal Borejszo <michael.borejszo@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
        ];

      };
      "nix" = rec {
        crateName = "nix";
        version = "0.26.4";
        edition = "2018";
        sha256 = "06xgl4ybb8pvjrbmc3xggbgk3kbs1j0c4c0nzdfrmpbgrkrym2sr";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
        ];
        features = {
          "aio" = [ "pin-utils" ];
          "default" = [ "acct" "aio" "dir" "env" "event" "feature" "fs" "hostname" "inotify" "ioctl" "kmod" "mman" "mount" "mqueue" "net" "personality" "poll" "process" "pthread" "ptrace" "quota" "reboot" "resource" "sched" "signal" "socket" "term" "time" "ucontext" "uio" "user" "zerocopy" ];
          "dir" = [ "fs" ];
          "memoffset" = [ "dep:memoffset" ];
          "mount" = [ "uio" ];
          "mqueue" = [ "fs" ];
          "net" = [ "socket" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "ptrace" = [ "process" ];
          "sched" = [ "process" ];
          "signal" = [ "process" ];
          "socket" = [ "memoffset" ];
          "ucontext" = [ "signal" ];
          "user" = [ "feature" ];
          "zerocopy" = [ "fs" "uio" ];
        };
        resolvedDefaultFeatures = [ "fs" "mount" "process" "sched" "signal" "uio" ];
      };
      "no-std-compat" = rec {
        crateName = "no-std-compat";
        version = "0.4.1";
        edition = "2018";
        sha256 = "132vrf710zsdp40yp1z3kgc2ss8pi0z4gmihsz3y7hl4dpd56f5r";
        libName = "no_std_compat";
        authors = [
          "jD91mZM2 <me@krake.one>"
        ];
        features = {
          "compat_hash" = [ "hashbrown" ];
          "compat_sync" = [ "spin" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "spin" = [ "dep:spin" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "nohash-hasher" = rec {
        crateName = "nohash-hasher";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0lf4p6k01w4wm7zn4grnihzj8s7zd5qczjmzng7wviwxawih5x9b";
        libName = "nohash_hasher";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "nom" = rec {
        crateName = "nom";
        version = "7.1.3";
        edition = "2018";
        sha256 = "0jha9901wxam390jcf5pfa0qqfrgh8li787jx2ip0yk5b8y9hwyj";
        authors = [
          "contact@geoffroycouprie.com"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "minimal-lexical";
            packageId = "minimal-lexical";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" "memchr/std" "minimal-lexical/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "nonempty" = rec {
        crateName = "nonempty";
        version = "0.7.0";
        edition = "2018";
        sha256 = "1xynyd2mgjfc4lcishd6xky7cmkxgy4d7rawxfx6wpiq37kr3rg9";
        authors = [
          "Alexis Sellier <self@cloudhead.io>"
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serialize" = [ "serde" ];
        };
      };
      "nonzero_ext" = rec {
        crateName = "nonzero_ext";
        version = "0.3.0";
        edition = "2015";
        sha256 = "08fghyinb07xwhbj7vwvlhg45g5cvhvld2min25njidir12rdgrq";
        authors = [
          "Andreas Fuchs <asf@boinkor.net>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "noop_proc_macro" = rec {
        crateName = "noop_proc_macro";
        version = "0.3.0";
        edition = "2018";
        sha256 = "1j2v1c6ric4w9v12h34jghzmngcwmn0hll1ywly4h6lcm4rbnxh6";
        procMacro = true;
        authors = [
          "Luca Barbato <lu_zero@gentoo.org>"
        ];

      };
      "nu-ansi-term" = rec {
        crateName = "nu-ansi-term";
        version = "0.46.0";
        edition = "2018";
        sha256 = "115sywxh53p190lyw97alm14nc004qj5jm5lvdj608z84rbida3p";
        libName = "nu_ansi_term";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
          "The Nushell Project Developers"
        ];
        dependencies = [
          {
            name = "overload";
            packageId = "overload";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "processenv" ];
          }
        ];
        features = {
          "derive_serde_style" = [ "serde" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "num" = rec {
        crateName = "num";
        version = "0.4.3";
        edition = "2021";
        sha256 = "08yb2fc1psig7pkzaplm495yp7c30m4pykpkwmi5bxrgid705g9m";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-complex";
            packageId = "num-complex";
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-iter";
            packageId = "num-iter";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-rational";
            packageId = "num-rational";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "alloc" = [ "dep:num-bigint" "num-rational/num-bigint" ];
          "default" = [ "std" ];
          "libm" = [ "num-complex/libm" "num-traits/libm" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "rand" = [ "num-bigint/rand" "num-complex/rand" ];
          "serde" = [ "num-bigint/serde" "num-complex/serde" "num-rational/serde" ];
          "std" = [ "dep:num-bigint" "num-bigint/std" "num-complex/std" "num-integer/std" "num-iter/std" "num-rational/std" "num-rational/num-bigint-std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "num-bigint" "serde" "std" ];
      };
      "num-bigint" = rec {
        crateName = "num-bigint";
        version = "0.4.6";
        edition = "2021";
        sha256 = "1f903zd33i6hkjpsgwhqwi2wffnvkxbn6rv4mkgcjcqi7xr4zr55";
        libName = "num_bigint";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "num-bigint-dig" = rec {
        crateName = "num-bigint-dig";
        version = "0.8.4";
        edition = "2021";
        sha256 = "0lb12df24wgxxbspz4gw1sf1kdqwvpdcpwq4fdlwg4gj41c1k16w";
        libName = "num_bigint_dig";
        authors = [
          "dignifiedquire <dignifiedquire@gmail.com>"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            usesDefaultFeatures = false;
            features = [ "spin_no_std" ];
          }
          {
            name = "libm";
            packageId = "libm";
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-iter";
            packageId = "num-iter";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "small_rng" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" "u64_digit" ];
          "fuzz" = [ "arbitrary" "smallvec/arbitrary" ];
          "prime" = [ "rand/std_rng" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-integer/std" "num-traits/std" "smallvec/write" "rand/std" "serde/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "i128" "prime" "rand" "u64_digit" "zeroize" ];
      };
      "num-complex" = rec {
        crateName = "num-complex";
        version = "0.4.6";
        edition = "2021";
        sha256 = "15cla16mnw12xzf5g041nxbjjm9m85hdgadd5dl5d0b30w9qmy3k";
        libName = "num_complex";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bytecheck" = [ "dep:bytecheck" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "std" ];
          "libm" = [ "num-traits/libm" ];
          "rand" = [ "dep:rand" ];
          "rkyv" = [ "dep:rkyv" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "serde" "std" ];
      };
      "num-conv" = rec {
        crateName = "num-conv";
        version = "0.1.0";
        edition = "2021";
        sha256 = "1ndiyg82q73783jq18isi71a7mjh56wxrk52rlvyx0mi5z9ibmai";
        libName = "num_conv";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];

      };
      "num-derive" = rec {
        crateName = "num-derive";
        version = "0.4.2";
        edition = "2021";
        sha256 = "00p2am9ma8jgd2v6xpsz621wc7wbn1yqi71g15gc3h67m7qmafgd";
        procMacro = true;
        libName = "num_derive";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "num-format" = rec {
        crateName = "num-format";
        version = "0.4.4";
        edition = "2021";
        sha256 = "1hvjmib117jspyixfr76f900mhz5zfn71dnyqg9iywb339vxjlm6";
        libName = "num_format";
        authors = [
          "Brian Myers <brian.carl.myers@gmail.com>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec 0.7.6";
            usesDefaultFeatures = false;
          }
          {
            name = "itoa";
            packageId = "itoa";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "cfg-if" = [ "dep:cfg-if" ];
          "default" = [ "std" ];
          "encoding_rs" = [ "dep:encoding_rs" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "libc" = [ "dep:libc" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "num-format-windows" = [ "dep:num-format-windows" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "arrayvec/default" ];
          "widestring" = [ "dep:widestring" ];
          "winapi" = [ "dep:winapi" ];
          "with-num-bigint" = [ "num-bigint" "std" ];
          "with-serde" = [ "arrayvec/serde" "serde/derive" ];
          "with-system-locale" = [ "cfg-if" "encoding_rs" "lazy_static" "libc" "num-format-windows" "std" "widestring" "winapi/winnls" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.46";
        edition = "2018";
        sha256 = "13w5g54a9184cqlbsq80rnxw4jj4s0d8wv75jsq5r2lms8gncsbr";
        libName = "num_integer";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "num-iter" = rec {
        crateName = "num-iter";
        version = "0.1.45";
        edition = "2018";
        sha256 = "1gzm7vc5g9qsjjl3bqk9rz1h6raxhygbrcpbfl04swlh0i506a8l";
        libName = "num_iter";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "i128" "std" ];
      };
      "num-rational" = rec {
        crateName = "num-rational";
        version = "0.4.2";
        edition = "2021";
        sha256 = "093qndy02817vpgcqjnj139im3jl7vkq4h68kykdqqh577d18ggq";
        libName = "num_rational";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "num-bigint" "std" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "num-bigint-std" = [ "num-bigint/std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-bigint?/std" "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "num-bigint" "num-bigint-std" "serde" "std" ];
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.19";
        edition = "2021";
        sha256 = "0h984rhdkkqd4ny9cif7y2azl3xdfb7768hb9irhpsch4q3gq787";
        libName = "num_traits";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libm";
            packageId = "libm";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "libm" "std" ];
      };
      "num_cpus" = rec {
        crateName = "num_cpus";
        version = "1.16.0";
        edition = "2015";
        sha256 = "0hra6ihpnh06dvfvz9ipscys0xfqa9ca9hzp384d5m02ssvgqqa1";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi 0.3.9";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(target."windows" or false));
          }
        ];

      };
      "object 0.30.4" = rec {
        crateName = "object";
        version = "0.30.4";
        edition = "2018";
        sha256 = "11f3cfd7b54ij1rwvrp9837nhszjdndxr4f4iyxazkyrhq5nid03";
        dependencies = [
          {
            name = "crc32fast";
            packageId = "crc32fast";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.13.2";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "ahash" ];
          }
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "all" = [ "read" "write" "std" "compression" "wasm" ];
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "compression" = [ "flate2" "std" ];
          "core" = [ "dep:core" ];
          "crc32fast" = [ "dep:crc32fast" ];
          "default" = [ "read" "compression" ];
          "doc" = [ "read_core" "write_std" "std" "compression" "archive" "coff" "elf" "macho" "pe" "wasm" ];
          "flate2" = [ "dep:flate2" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "indexmap" = [ "dep:indexmap" ];
          "pe" = [ "coff" ];
          "read" = [ "read_core" "archive" "coff" "elf" "macho" "pe" "unaligned" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "alloc" "memchr/rustc-dep-of-std" ];
          "std" = [ "memchr/std" ];
          "unstable-all" = [ "all" "unstable" "xcoff" ];
          "wasm" = [ "wasmparser" ];
          "wasmparser" = [ "dep:wasmparser" ];
          "write" = [ "write_std" "coff" "elf" "macho" "pe" ];
          "write_core" = [ "crc32fast" "indexmap" "hashbrown" ];
          "write_std" = [ "write_core" "std" "indexmap/std" "crc32fast/std" ];
        };
        resolvedDefaultFeatures = [ "coff" "crc32fast" "elf" "hashbrown" "indexmap" "macho" "pe" "read_core" "std" "write" "write_core" "write_std" ];
      };
      "object 0.36.7" = rec {
        crateName = "object";
        version = "0.36.7";
        edition = "2018";
        sha256 = "11vv97djn9nc5n6w1gc6bd96d2qk2c8cg1kw5km9bsi3v4a8x532";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "all" = [ "read" "write" "build" "std" "compression" "wasm" ];
          "alloc" = [ "dep:alloc" ];
          "build" = [ "build_core" "write_std" "elf" ];
          "build_core" = [ "read_core" "write_core" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "compression" = [ "dep:flate2" "dep:ruzstd" "std" ];
          "core" = [ "dep:core" ];
          "default" = [ "read" "compression" ];
          "doc" = [ "read_core" "write_std" "build_core" "std" "compression" "archive" "coff" "elf" "macho" "pe" "wasm" "xcoff" ];
          "pe" = [ "coff" ];
          "read" = [ "read_core" "archive" "coff" "elf" "macho" "pe" "xcoff" "unaligned" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "alloc" "memchr/rustc-dep-of-std" ];
          "std" = [ "memchr/std" ];
          "unstable-all" = [ "all" "unstable" ];
          "wasm" = [ "dep:wasmparser" ];
          "write" = [ "write_std" "coff" "elf" "macho" "pe" "xcoff" ];
          "write_core" = [ "dep:crc32fast" "dep:indexmap" "dep:hashbrown" ];
          "write_std" = [ "write_core" "std" "indexmap?/std" "crc32fast?/std" ];
        };
        resolvedDefaultFeatures = [ "archive" "coff" "elf" "macho" "pe" "read_core" "std" "unaligned" "xcoff" ];
      };
      "ogmios-client" = rec {
        crateName = "ogmios-client";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/utils/ogmios-client; };
        libName = "ogmios_client";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "fraction";
            packageId = "fraction";
            usesDefaultFeatures = false;
            features = [ "with-decimal" "with-serde-support" ];
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            optional = true;
            features = [ "client-core" "server" "macros" "client-core" "http-client" "macros" "ws-client" ];
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" "raw_value" "arbitrary_precision" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
            features = [ "std" "serde" "parsing" ];
          }
        ];
        devDependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "hex-literal";
            packageId = "hex-literal 1.0.0";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" ];
          }
        ];
        features = {
          "default" = [ "jsonrpsee-client" ];
          "jsonrpsee" = [ "dep:jsonrpsee" ];
          "jsonrpsee-client" = [ "jsonrpsee" "log" ];
          "log" = [ "dep:log" ];
        };
        resolvedDefaultFeatures = [ "default" "jsonrpsee" "jsonrpsee-client" "log" ];
      };
      "oid-registry 0.7.1" = rec {
        crateName = "oid-registry";
        version = "0.7.1";
        edition = "2018";
        sha256 = "1navxdy0gx7f92ymwr6n02x35fypp2izdfcf49wszkc9ji6h7n58";
        libName = "oid_registry";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "asn1-rs";
            packageId = "asn1-rs 0.6.2";
          }
        ];
        features = {
          "crypto" = [ "kdf" "pkcs1" "pkcs7" "pkcs9" "pkcs12" "nist_algs" "x962" ];
          "default" = [ "registry" ];
        };
        resolvedDefaultFeatures = [ "crypto" "default" "kdf" "nist_algs" "pkcs1" "pkcs12" "pkcs7" "pkcs9" "registry" "x509" "x962" ];
      };
      "oid-registry 0.8.1" = rec {
        crateName = "oid-registry";
        version = "0.8.1";
        edition = "2018";
        sha256 = "1dxm6qkkkk4dq3ln1v83d80k8bvicm6mspsxrj3n06yy7pzhrx0j";
        libName = "oid_registry";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "asn1-rs";
            packageId = "asn1-rs 0.7.1";
          }
        ];
        features = {
          "crypto" = [ "kdf" "pkcs1" "pkcs7" "pkcs9" "pkcs12" "nist_algs" "x962" ];
          "default" = [ "registry" ];
        };
        resolvedDefaultFeatures = [ "crypto" "default" "kdf" "nist_algs" "pkcs1" "pkcs12" "pkcs7" "pkcs9" "registry" "x509" "x962" ];
      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.21.3";
        edition = "2021";
        sha256 = "0b9x77lb9f1j6nqgf5aka4s2qj0nly176bpbrv6f9iakk5ff3xa2";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "alloc" = [ "race" ];
          "atomic-polyfill" = [ "critical-section" ];
          "critical-section" = [ "dep:critical-section" "portable-atomic" ];
          "default" = [ "std" ];
          "parking_lot" = [ "dep:parking_lot_core" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "race" "std" ];
      };
      "opaque-debug 0.2.3" = rec {
        crateName = "opaque-debug";
        version = "0.2.3";
        edition = "2015";
        sha256 = "172j6bs8ndclqxa2m64qc0y1772rr73g4l9fg2svscgicnbfff98";
        libName = "opaque_debug";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "opaque-debug 0.3.1" = rec {
        crateName = "opaque-debug";
        version = "0.3.1";
        edition = "2018";
        sha256 = "10b3w0kydz5jf1ydyli5nv10gdfp97xh79bgz327d273bs46b3f0";
        libName = "opaque_debug";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "openssl-probe" = rec {
        crateName = "openssl-probe";
        version = "0.1.6";
        edition = "2021";
        sha256 = "0bl52x55laalqb707k009h8kfawliwp992rlsvkzy49n47p2fpnh";
        libName = "openssl_probe";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "option-ext" = rec {
        crateName = "option-ext";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0zbf7cx8ib99frnlanpyikm1bx8qn8x602sw1n7bg6p9x94lyx04";
        libName = "option_ext";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];

      };
      "ordered-float" = rec {
        crateName = "ordered-float";
        version = "2.10.1";
        edition = "2018";
        sha256 = "075i108hr95pr7hy4fgxivib5pky3b6b22rywya5qyd2wmkrvwb8";
        libName = "ordered_float";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
          "Matt Brubeck <mbrubeck@limpet.net>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "proptest" = [ "dep:proptest" ];
          "rand" = [ "dep:rand" ];
          "randtest" = [ "rand/std" "rand/std_rng" ];
          "rkyv" = [ "dep:rkyv" ];
          "schemars" = [ "dep:schemars" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "overload" = rec {
        crateName = "overload";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0fdgbaqwknillagy1xq7xfgv60qdbk010diwl7s1p0qx7hb16n5i";
        authors = [
          "Daniel Salvadori <danaugrs@gmail.com>"
        ];

      };
      "pallas-addresses" = rec {
        crateName = "pallas-addresses";
        version = "0.32.0";
        edition = "2021";
        sha256 = "1q7qn0cw89hm6kjm0mrj22hd5i9qpvp07pa8ycpx260ngyfh7gfp";
        libName = "pallas_addresses";
        authors = [
          "Santiago Carmuega <santiago@carmuega.me>"
        ];
        dependencies = [
          {
            name = "base58";
            packageId = "base58";
          }
          {
            name = "bech32";
            packageId = "bech32 0.9.1";
          }
          {
            name = "crc";
            packageId = "crc";
          }
          {
            name = "cryptoxide";
            packageId = "cryptoxide";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "pallas-codec";
            packageId = "pallas-codec";
          }
          {
            name = "pallas-crypto";
            packageId = "pallas-crypto";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "pallas-codec" = rec {
        crateName = "pallas-codec";
        version = "0.32.0";
        edition = "2021";
        sha256 = "132rjc8isp3v6kvwv0iwdjslgk70x69fh4mniw2l82kwhlaxd10m";
        libName = "pallas_codec";
        authors = [
          "Santiago Carmuega <santiago@carmuega.me>"
          "Lucas Rosa <x@rvcas.dev>"
          "Kasey White <kwhitemsg@gmail.com>"
        ];
        dependencies = [
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "minicbor";
            packageId = "minicbor";
            features = [ "std" "half" "derive" ];
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "num-bigint" = [ "dep:num-bigint" ];
        };
        resolvedDefaultFeatures = [ "default" "num-bigint" ];
      };
      "pallas-crypto" = rec {
        crateName = "pallas-crypto";
        version = "0.32.0";
        edition = "2021";
        sha256 = "06nkkpmscy69jrisb5wfhjcv9whbvp1srblij7mh5r3c691ddh9p";
        libName = "pallas_crypto";
        authors = [
          "Nicolas Di Prima <nicolas@primetype.co.uk>"
          "Andrew Westberg <andrewwestberg@gmail.com>"
        ];
        dependencies = [
          {
            name = "cryptoxide";
            packageId = "cryptoxide";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "pallas-codec";
            packageId = "pallas-codec";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];

      };
      "pallas-primitives" = rec {
        crateName = "pallas-primitives";
        version = "0.32.0";
        edition = "2021";
        sha256 = "16sdsda6rpih8bjwq4d6a5cjg14sgw3rq04zd80lsmbk602zac3d";
        libName = "pallas_primitives";
        authors = [
          "Santiago Carmuega <santiago@carmuega.me>"
          "Lucas Rosa <x@rvcas.dev>"
        ];
        dependencies = [
          {
            name = "base58";
            packageId = "base58";
          }
          {
            name = "bech32";
            packageId = "bech32 0.9.1";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "pallas-codec";
            packageId = "pallas-codec";
          }
          {
            name = "pallas-crypto";
            packageId = "pallas-crypto";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
        ];
        features = {
          "default" = [ "json" ];
          "json" = [ "serde" "serde_json" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
        };
        resolvedDefaultFeatures = [ "default" "json" "serde" "serde_json" ];
      };
      "pallas-traverse" = rec {
        crateName = "pallas-traverse";
        version = "0.32.0";
        edition = "2021";
        sha256 = "0bx51x90jqbg4jqphpfyx2xhrrspacybqj76da3gx0v864nmglh2";
        libName = "pallas_traverse";
        authors = [
          "Santiago Carmuega <santiago@carmuega.me>"
        ];
        dependencies = [
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "pallas-addresses";
            packageId = "pallas-addresses";
          }
          {
            name = "pallas-codec";
            packageId = "pallas-codec";
          }
          {
            name = "pallas-crypto";
            packageId = "pallas-crypto";
          }
          {
            name = "pallas-primitives";
            packageId = "pallas-primitives";
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
        };
      };
      "pallet-address-associations" = rec {
        crateName = "pallet-address-associations";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/address-associations/pallet; };
        libName = "pallet_address_associations";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "frame-benchmarking";
            packageId = "frame-benchmarking";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "hex-literal";
            packageId = "hex-literal 1.0.0";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-std";
            packageId = "sp-std";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "hex-literal";
            packageId = "hex-literal 1.0.0";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "frame-benchmarking" = [ "dep:frame-benchmarking" ];
          "hex-literal" = [ "dep:hex-literal" ];
          "runtime-benchmarks" = [ "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "sp-runtime/runtime-benchmarks" "hex-literal" "sp-core" ];
          "sp-core" = [ "dep:sp-core" ];
          "std" = [ "frame-support/std" "frame-system/std" "log/std" "parity-scale-codec/std" "scale-info/std" "sidechain-domain/std" "sp-std/std" "frame-benchmarking?/std" ];
        };
        resolvedDefaultFeatures = [ "default" "frame-benchmarking" "hex-literal" "runtime-benchmarks" "sp-core" "std" ];
      };
      "pallet-aura" = rec {
        crateName = "pallet-aura";
        version = "39.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "pallet_aura";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-timestamp";
            packageId = "pallet-timestamp";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sp-application-crypto";
            packageId = "sp-application-crypto";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-aura";
            packageId = "sp-consensus-aura";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "codec/std" "frame-support/std" "frame-system/std" "log/std" "pallet-timestamp/std" "scale-info/std" "sp-application-crypto/std" "sp-consensus-aura/std" "sp-core/std" "sp-runtime/std" ];
          "try-runtime" = [ "frame-support/try-runtime" "frame-system/try-runtime" "pallet-timestamp/try-runtime" "sp-runtime/try-runtime" ];
        };
        resolvedDefaultFeatures = [ "std" "try-runtime" ];
      };
      "pallet-authorship" = rec {
        crateName = "pallet-authorship";
        version = "40.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "pallet_authorship";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "impl-trait-for-tuples";
            packageId = "impl-trait-for-tuples";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "codec/std" "frame-support/std" "frame-system/std" "scale-info/std" "sp-runtime/std" ];
          "try-runtime" = [ "frame-support/try-runtime" "frame-system/try-runtime" "sp-runtime/try-runtime" ];
        };
        resolvedDefaultFeatures = [ "std" "try-runtime" ];
      };
      "pallet-babe" = rec {
        crateName = "pallet-babe";
        version = "40.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "pallet_babe";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "frame-benchmarking";
            packageId = "frame-benchmarking";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-authorship";
            packageId = "pallet-authorship";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-session";
            packageId = "pallet-session";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-timestamp";
            packageId = "pallet-timestamp";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" "serde" ];
          }
          {
            name = "sp-application-crypto";
            packageId = "sp-application-crypto";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-consensus-babe";
            packageId = "sp-consensus-babe";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-session";
            packageId = "sp-session";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-staking";
            packageId = "sp-staking";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
        ];
        devDependencies = [
          {
            name = "sp-core";
            packageId = "sp-core";
          }
        ];
        features = {
          "default" = [ "std" ];
          "frame-benchmarking" = [ "dep:frame-benchmarking" ];
          "runtime-benchmarks" = [ "frame-benchmarking/runtime-benchmarks" "frame-election-provider-support/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "pallet-balances/runtime-benchmarks" "pallet-offences/runtime-benchmarks" "pallet-staking/runtime-benchmarks" "pallet-timestamp/runtime-benchmarks" "sp-runtime/runtime-benchmarks" "sp-staking/runtime-benchmarks" ];
          "std" = [ "codec/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "log/std" "pallet-authorship/std" "pallet-session/std" "pallet-timestamp/std" "scale-info/std" "sp-application-crypto/std" "sp-consensus-babe/std" "sp-core/std" "sp-io/std" "sp-runtime/std" "sp-session/std" "sp-staking/std" ];
          "try-runtime" = [ "frame-election-provider-support/try-runtime" "frame-support/try-runtime" "frame-system/try-runtime" "pallet-authorship/try-runtime" "pallet-balances/try-runtime" "pallet-offences/try-runtime" "pallet-session/try-runtime" "pallet-staking/try-runtime" "pallet-timestamp/try-runtime" "sp-runtime/try-runtime" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "pallet-balances" = rec {
        crateName = "pallet-balances";
        version = "41.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "pallet_balances";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "docify";
            packageId = "docify";
          }
          {
            name = "frame-benchmarking";
            packageId = "frame-benchmarking";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "frame-support";
            packageId = "frame-support";
            features = [ "experimental" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "frame-benchmarking" = [ "dep:frame-benchmarking" ];
          "runtime-benchmarks" = [ "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "pallet-transaction-payment/runtime-benchmarks" "sp-runtime/runtime-benchmarks" ];
          "std" = [ "codec/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "log/std" "scale-info/std" "sp-core/std" "sp-runtime/std" ];
          "try-runtime" = [ "frame-support/try-runtime" "frame-system/try-runtime" "pallet-transaction-payment/try-runtime" "sp-runtime/try-runtime" ];
        };
        resolvedDefaultFeatures = [ "frame-benchmarking" "runtime-benchmarks" "std" "try-runtime" ];
      };
      "pallet-beefy" = rec {
        crateName = "pallet-beefy";
        version = "41.1.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "pallet_beefy";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-authorship";
            packageId = "pallet-authorship";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-session";
            packageId = "pallet-session";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "sp-consensus-beefy";
            packageId = "sp-consensus-beefy";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-session";
            packageId = "sp-session";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-staking";
            packageId = "sp-staking";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
        ];
        devDependencies = [
          {
            name = "sp-staking";
            packageId = "sp-staking";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "codec/std" "frame-support/std" "frame-system/std" "log/std" "pallet-authorship/std" "pallet-session/std" "scale-info/std" "serde/std" "sp-consensus-beefy/std" "sp-runtime/std" "sp-session/std" "sp-staking/std" "sp-state-machine/std" ];
          "try-runtime" = [ "frame-election-provider-support/try-runtime" "frame-support/try-runtime" "frame-system/try-runtime" "pallet-authorship/try-runtime" "pallet-balances/try-runtime" "pallet-offences/try-runtime" "pallet-session/try-runtime" "pallet-staking/try-runtime" "pallet-timestamp/try-runtime" "sp-runtime/try-runtime" ];
        };
        resolvedDefaultFeatures = [ "serde" "std" "try-runtime" ];
      };
      "pallet-beefy-mmr" = rec {
        crateName = "pallet-beefy-mmr";
        version = "41.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "pallet_beefy_mmr";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "array-bytes";
            packageId = "array-bytes";
            optional = true;
          }
          {
            name = "binary-merkle-tree";
            packageId = "binary-merkle-tree";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-benchmarking";
            packageId = "frame-benchmarking";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-beefy";
            packageId = "pallet-beefy";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-mmr";
            packageId = "pallet-mmr";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-session";
            packageId = "pallet-session";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-beefy";
            packageId = "sp-consensus-beefy";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-state-machine";
            packageId = "sp-state-machine";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "array-bytes";
            packageId = "array-bytes";
          }
        ];
        features = {
          "array-bytes" = [ "dep:array-bytes" ];
          "default" = [ "std" ];
          "frame-benchmarking" = [ "dep:frame-benchmarking" ];
          "runtime-benchmarks" = [ "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "pallet-mmr/runtime-benchmarks" "sp-runtime/runtime-benchmarks" "sp-staking/runtime-benchmarks" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "array-bytes" "binary-merkle-tree/std" "codec/std" "frame-benchmarking/std" "frame-support/std" "frame-system/std" "log/std" "pallet-beefy/std" "pallet-mmr/std" "pallet-session/std" "scale-info/std" "serde" "sp-api/std" "sp-consensus-beefy/std" "sp-core/std" "sp-io/std" "sp-runtime/std" "sp-state-machine/std" ];
          "try-runtime" = [ "frame-support/try-runtime" "frame-system/try-runtime" "pallet-beefy/try-runtime" "pallet-mmr/try-runtime" "pallet-session/try-runtime" "sp-runtime/try-runtime" ];
        };
        resolvedDefaultFeatures = [ "array-bytes" "frame-benchmarking" "runtime-benchmarks" "serde" "std" "try-runtime" ];
      };
      "pallet-block-participation" = rec {
        crateName = "pallet-block-participation";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/block-participation/pallet; };
        libName = "pallet_block_participation";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "frame-benchmarking";
            packageId = "frame-benchmarking";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sp-block-participation";
            packageId = "sp-block-participation";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-std";
            packageId = "sp-std";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "pretty_assertions";
            packageId = "pretty_assertions";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "frame-benchmarking" = [ "dep:frame-benchmarking" ];
          "runtime-benchmarks" = [ "frame-benchmarking" ];
          "std" = [ "frame-support/std" "frame-system/std" "log/std" "parity-scale-codec/std" "scale-info/std" "sp-std/std" "sp-block-participation/std" "frame-benchmarking?/std" ];
        };
        resolvedDefaultFeatures = [ "default" "frame-benchmarking" "runtime-benchmarks" "std" ];
      };
      "pallet-block-producer-fees" = rec {
        crateName = "pallet-block-producer-fees";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/block-producer-fees/pallet; };
        libName = "pallet_block_producer_fees";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "frame-benchmarking";
            packageId = "frame-benchmarking";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sp-block-producer-fees";
            packageId = "sp-block-producer-fees";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-slots";
            packageId = "sp-consensus-slots";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-std";
            packageId = "sp-std";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "frame-benchmarking" = [ "dep:frame-benchmarking" ];
          "runtime-benchmarks" = [ "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" ];
          "std" = [ "frame-benchmarking/std" "frame-support/std" "frame-system/std" "parity-scale-codec/std" "scale-info/std" "sp-block-producer-fees/std" "sp-std/std" ];
        };
        resolvedDefaultFeatures = [ "default" "frame-benchmarking" "runtime-benchmarks" "std" ];
      };
      "pallet-block-producer-fees-rpc" = rec {
        crateName = "pallet-block-producer-fees-rpc";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/block-producer-fees/rpc; };
        libName = "pallet_block_producer_fees_rpc";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "derive-new";
            packageId = "derive-new";
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "client-core" "server" "macros" ];
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" "std" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-block-producer-fees";
            packageId = "sp-block-producer-fees";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "pallet-block-producer-metadata" = rec {
        crateName = "pallet-block-producer-metadata";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/block-producer-metadata/pallet; };
        libName = "pallet_block_producer_metadata";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "frame-benchmarking";
            packageId = "frame-benchmarking";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "hex-literal";
            packageId = "hex-literal 1.0.0";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-block-producer-metadata";
            packageId = "sp-block-producer-metadata";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-std";
            packageId = "sp-std";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "hex-literal";
            packageId = "hex-literal 1.0.0";
          }
          {
            name = "k256";
            packageId = "k256";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "frame-benchmarking" = [ "dep:frame-benchmarking" ];
          "hex-literal" = [ "dep:hex-literal" ];
          "runtime-benchmarks" = [ "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "sp-runtime/runtime-benchmarks" "hex-literal" "sp-core" "sp-io" ];
          "sp-core" = [ "dep:sp-core" ];
          "sp-io" = [ "dep:sp-io" ];
          "sp-runtime" = [ "dep:sp-runtime" ];
          "std" = [ "frame-benchmarking/std" "frame-support/std" "frame-system/std" "log/std" "parity-scale-codec/std" "scale-info/std" "sidechain-domain/std" "sp-std/std" "sp-core?/std" "sp-block-producer-metadata/std" ];
        };
        resolvedDefaultFeatures = [ "default" "frame-benchmarking" "hex-literal" "runtime-benchmarks" "sp-core" "sp-io" "sp-runtime" "std" ];
      };
      "pallet-block-producer-metadata-rpc" = rec {
        crateName = "pallet-block-producer-metadata-rpc";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/block-producer-metadata/rpc; };
        libName = "pallet_block_producer_metadata_rpc";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "derive-new";
            packageId = "derive-new";
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "client-core" "server" "macros" ];
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" "std" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" "std" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" "std" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-block-producer-metadata";
            packageId = "sp-block-producer-metadata";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" "mock" ];
      };
      "pallet-block-production-log" = rec {
        crateName = "pallet-block-production-log";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/block-production-log/pallet; };
        libName = "pallet_block_production_log";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "frame-benchmarking";
            packageId = "frame-benchmarking";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-block-production-log";
            packageId = "sp-block-production-log";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-slots";
            packageId = "sp-consensus-slots";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-std";
            packageId = "sp-std";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "frame-benchmarking" = [ "dep:frame-benchmarking" ];
          "runtime-benchmarks" = [ "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" ];
          "std" = [ "frame-benchmarking/std" "frame-support/std" "frame-system/std" "log/std" "parity-scale-codec/std" "scale-info/std" "sidechain-domain/std" "sp-block-production-log/std" "sp-std/std" ];
        };
        resolvedDefaultFeatures = [ "default" "frame-benchmarking" "runtime-benchmarks" "std" ];
      };
      "pallet-governed-map" = rec {
        crateName = "pallet-governed-map";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/governed-map/pallet; };
        libName = "pallet_governed_map";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "frame-benchmarking";
            packageId = "frame-benchmarking";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-governed-map";
            packageId = "sp-governed-map";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
        ];
        devDependencies = [
          {
            name = "pretty_assertions";
            packageId = "pretty_assertions";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "frame-benchmarking" = [ "dep:frame-benchmarking" ];
          "runtime-benchmarks" = [ "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" ];
          "std" = [ "frame-benchmarking/std" "frame-support/std" "frame-system/std" "log/std" "parity-scale-codec/std" "scale-info/std" "scale-info/std" "sidechain-domain/std" "sp-governed-map/std" ];
        };
        resolvedDefaultFeatures = [ "default" "frame-benchmarking" "mock" "runtime-benchmarks" "std" ];
      };
      "pallet-grandpa" = rec {
        crateName = "pallet-grandpa";
        version = "40.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "pallet_grandpa";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "frame-benchmarking";
            packageId = "frame-benchmarking";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-authorship";
            packageId = "pallet-authorship";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-session";
            packageId = "pallet-session";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" "serde" ];
          }
          {
            name = "sp-application-crypto";
            packageId = "sp-application-crypto";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-consensus-grandpa";
            packageId = "sp-consensus-grandpa";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-session";
            packageId = "sp-session";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-staking";
            packageId = "sp-staking";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
        ];
        devDependencies = [
          {
            name = "frame-benchmarking";
            packageId = "frame-benchmarking";
          }
        ];
        features = {
          "default" = [ "std" ];
          "frame-benchmarking" = [ "dep:frame-benchmarking" ];
          "runtime-benchmarks" = [ "frame-benchmarking/runtime-benchmarks" "frame-election-provider-support/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "pallet-balances/runtime-benchmarks" "pallet-offences/runtime-benchmarks" "pallet-staking/runtime-benchmarks" "pallet-timestamp/runtime-benchmarks" "sp-runtime/runtime-benchmarks" "sp-staking/runtime-benchmarks" ];
          "std" = [ "codec/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "log/std" "pallet-authorship/std" "pallet-session/std" "scale-info/std" "sp-application-crypto/std" "sp-consensus-grandpa/std" "sp-core/std" "sp-io/std" "sp-runtime/std" "sp-session/std" "sp-staking/std" ];
          "try-runtime" = [ "frame-election-provider-support/try-runtime" "frame-support/try-runtime" "frame-system/try-runtime" "pallet-authorship/try-runtime" "pallet-balances/try-runtime" "pallet-offences/try-runtime" "pallet-session/try-runtime" "pallet-staking/try-runtime" "pallet-timestamp/try-runtime" "sp-runtime/try-runtime" ];
        };
        resolvedDefaultFeatures = [ "frame-benchmarking" "runtime-benchmarks" "std" "try-runtime" ];
      };
      "pallet-mmr" = rec {
        crateName = "pallet-mmr";
        version = "40.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "pallet_mmr";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
          }
          {
            name = "polkadot-sdk-frame";
            packageId = "polkadot-sdk-frame";
            rename = "frame";
            usesDefaultFeatures = false;
            features = [ "runtime" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sp-mmr-primitives";
            packageId = "sp-mmr-primitives";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "runtime-benchmarks" = [ "frame/runtime-benchmarks" ];
          "std" = [ "codec/std" "frame/std" "log/std" "scale-info/std" "sp-mmr-primitives/std" ];
          "try-runtime" = [ "frame/try-runtime" ];
        };
        resolvedDefaultFeatures = [ "runtime-benchmarks" "std" "try-runtime" ];
      };
      "pallet-native-token-management" = rec {
        crateName = "pallet-native-token-management";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/native-token-management/pallet; };
        libName = "pallet_native_token_management";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "frame-benchmarking";
            packageId = "frame-benchmarking";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-native-token-management";
            packageId = "sp-native-token-management";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
        ];
        devDependencies = [
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "frame-benchmarking" = [ "dep:frame-benchmarking" ];
          "runtime-benchmarks" = [ "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" ];
          "std" = [ "frame-benchmarking/std" "frame-support/std" "frame-system/std" "log/std" "scale-info/std" "parity-scale-codec/std" "scale-info/std" "sp-native-token-management/std" ];
        };
        resolvedDefaultFeatures = [ "default" "frame-benchmarking" "mock" "runtime-benchmarks" "std" ];
      };
      "pallet-partner-chains-session" = rec {
        crateName = "pallet-partner-chains-session";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./substrate-extensions/partner-chains-session; };
        libName = "pallet_partner_chains_session";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "impl-trait-for-tuples";
            packageId = "impl-trait-for-tuples";
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-session";
            packageId = "pallet-session";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-timestamp";
            packageId = "pallet-timestamp";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" "derive" "serde" ];
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-staking";
            packageId = "sp-staking";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-std";
            packageId = "sp-std";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "polkadot-js-compat" ];
          "pallet-session" = [ "dep:pallet-session" ];
          "pallet-session-compat" = [ "pallet-session" ];
          "std" = [ "parity-scale-codec/std" "frame-support/std" "frame-system/std" "log/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-staking/std" "sp-std/std" "pallet-session?/std" ];
        };
        resolvedDefaultFeatures = [ "default" "pallet-session" "pallet-session-compat" "polkadot-js-compat" "std" ];
      };
      "pallet-session" = rec {
        crateName = "pallet-session";
        version = "40.0.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "pallet_session";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "impl-trait-for-tuples";
            packageId = "impl-trait-for-tuples";
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-timestamp";
            packageId = "pallet-timestamp";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" "serde" ];
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-session";
            packageId = "sp-session";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-staking";
            packageId = "sp-staking";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-state-machine";
            packageId = "sp-state-machine";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-trie";
            packageId = "sp-trie";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "historical" "std" ];
          "historical" = [ "sp-trie" ];
          "sp-trie" = [ "dep:sp-trie" ];
          "std" = [ "codec/std" "frame-support/std" "frame-system/std" "log/std" "pallet-timestamp/std" "scale-info/std" "sp-core/std" "sp-io/std" "sp-runtime/std" "sp-session/std" "sp-staking/std" "sp-state-machine/std" "sp-trie/std" ];
          "try-runtime" = [ "frame-support/try-runtime" "frame-system/try-runtime" "pallet-timestamp/try-runtime" "sp-runtime/try-runtime" ];
        };
        resolvedDefaultFeatures = [ "sp-trie" "std" "try-runtime" ];
      };
      "pallet-session-validator-management" = rec {
        crateName = "pallet-session-validator-management";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/committee-selection/pallet; };
        libName = "pallet_session_validator_management";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "derive-new";
            packageId = "derive-new";
            optional = true;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-partner-chains-session";
            packageId = "pallet-partner-chains-session";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-session";
            packageId = "pallet-session";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-session-validator-management";
            packageId = "sp-session-validator-management";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-std";
            packageId = "sp-std";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive-new" = [ "dep:derive-new" ];
          "pallet-partner-chains-session" = [ "dep:pallet-partner-chains-session" ];
          "pallet-session" = [ "dep:pallet-session" ];
          "pallet-session-compat" = [ "derive-new" "pallet-session" "pallet-partner-chains-session" ];
          "sp-io" = [ "dep:sp-io" ];
          "std" = [ "parity-scale-codec/std" "scale-info/std" "frame-support/std" "frame-system/std" "log/std" "sp-core/std" "sp-runtime/std" "sp-std/std" "sp-session-validator-management/std" "sp-session-validator-management/serde" "sidechain-domain/std" "sidechain-domain/serde" "derive-new?/std" "pallet-session?/std" "pallet-partner-chains-session?/std" ];
          "try-runtime" = [ "frame-support/try-runtime" ];
        };
        resolvedDefaultFeatures = [ "default" "derive-new" "pallet-partner-chains-session" "pallet-session" "pallet-session-compat" "sp-io" "std" "try-runtime" ];
      };
      "pallet-session-validator-management-benchmarking" = rec {
        crateName = "pallet-session-validator-management-benchmarking";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/committee-selection/pallet/benchmarking; };
        libName = "pallet_session_validator_management_benchmarking";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "frame-benchmarking";
            packageId = "frame-benchmarking";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-aura";
            packageId = "pallet-aura";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-session-validator-management";
            packageId = "pallet-session-validator-management";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-sidechain";
            packageId = "pallet-sidechain";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-timestamp";
            packageId = "pallet-timestamp";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
          }
          {
            name = "sidechain-slots";
            packageId = "sidechain-slots";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-aura";
            packageId = "sp-consensus-aura";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-slots";
            packageId = "sp-consensus-slots";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-session-validator-management";
            packageId = "sp-session-validator-management";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-std";
            packageId = "sp-std";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "runtime-benchmarks" = [ "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" ];
          "std" = [ "parity-scale-codec/std" "scale-info/std" "frame-benchmarking/std" "frame-support/std" "frame-system/std" "sp-std/std" "sp-runtime/std" "sp-core/std" "sp-io/std" "sp-consensus-slots/std" "sp-consensus-aura/std" "sidechain-domain/std" "sidechain-slots/std" "pallet-timestamp/std" "pallet-aura/std" "pallet-sidechain/std" "pallet-session-validator-management/std" "sp-session-validator-management/std" ];
        };
        resolvedDefaultFeatures = [ "default" "runtime-benchmarks" "std" ];
      };
      "pallet-session-validator-management-rpc" = rec {
        crateName = "pallet-session-validator-management-rpc";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/committee-selection/rpc; };
        libName = "pallet_session_validator_management_rpc";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "derive-new";
            packageId = "derive-new";
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "client-core" "server" "macros" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-session-validator-management-query";
            packageId = "sp-session-validator-management-query";
            usesDefaultFeatures = false;
          }
        ];

      };
      "pallet-sidechain" = rec {
        crateName = "pallet-sidechain";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/sidechain/pallet; };
        libName = "pallet_sidechain";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
          }
          {
            name = "sidechain-slots";
            packageId = "sidechain-slots";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-sidechain";
            packageId = "sp-sidechain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-std";
            packageId = "sp-std";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "frame-support/std" "frame-system/std" "scale-info/std" "sp-std/std" "sp-core/std" "sp-runtime/std" "sp-sidechain/std" "parity-scale-codec/std" "sidechain-domain/std" "sidechain-slots/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "pallet-sidechain-rpc" = rec {
        crateName = "pallet-sidechain-rpc";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/sidechain/rpc; };
        libName = "pallet_sidechain_rpc";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "derive-new";
            packageId = "derive-new";
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" "std" ];
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "client-core" "server" "macros" ];
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" "std" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" "std" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sidechain-slots";
            packageId = "sidechain-slots";
            usesDefaultFeatures = false;
            features = [ "std" "serde" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-sidechain";
            packageId = "sp-sidechain";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-timestamp";
            packageId = "sp-timestamp";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "time-source";
            packageId = "time-source";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" "macros" "time" "parking_lot" ];
          }
        ];
        devDependencies = [
          {
            name = "pretty_assertions";
            packageId = "pretty_assertions";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "sp-consensus-slots";
            packageId = "sp-consensus-slots";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "time-source";
            packageId = "time-source";
            features = [ "mock" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "pallet-sudo" = rec {
        crateName = "pallet-sudo";
        version = "40.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "pallet_sudo";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "docify";
            packageId = "docify";
          }
          {
            name = "frame-benchmarking";
            packageId = "frame-benchmarking";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "frame-benchmarking" = [ "dep:frame-benchmarking" ];
          "runtime-benchmarks" = [ "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "sp-runtime/runtime-benchmarks" ];
          "std" = [ "codec/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "scale-info/std" "sp-io/std" "sp-runtime/std" ];
          "try-runtime" = [ "frame-support/try-runtime" "frame-system/try-runtime" "sp-runtime/try-runtime" ];
        };
        resolvedDefaultFeatures = [ "frame-benchmarking" "runtime-benchmarks" "std" "try-runtime" ];
      };
      "pallet-timestamp" = rec {
        crateName = "pallet-timestamp";
        version = "39.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "pallet_timestamp";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "docify";
            packageId = "docify";
          }
          {
            name = "frame-benchmarking";
            packageId = "frame-benchmarking";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-storage";
            packageId = "sp-storage";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-timestamp";
            packageId = "sp-timestamp";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "sp-io";
            packageId = "sp-io";
          }
        ];
        features = {
          "default" = [ "std" ];
          "frame-benchmarking" = [ "dep:frame-benchmarking" ];
          "runtime-benchmarks" = [ "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "sp-io" "sp-runtime/runtime-benchmarks" ];
          "sp-io" = [ "dep:sp-io" ];
          "std" = [ "codec/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "log/std" "scale-info/std" "sp-inherents/std" "sp-io?/std" "sp-runtime/std" "sp-storage/std" "sp-timestamp/std" ];
          "try-runtime" = [ "frame-support/try-runtime" "frame-system/try-runtime" "sp-runtime/try-runtime" ];
        };
        resolvedDefaultFeatures = [ "frame-benchmarking" "runtime-benchmarks" "sp-io" "std" "try-runtime" ];
      };
      "pallet-transaction-payment" = rec {
        crateName = "pallet-transaction-payment";
        version = "40.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "pallet_transaction_payment";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "frame-benchmarking";
            packageId = "frame-benchmarking";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "frame-benchmarking" = [ "dep:frame-benchmarking" ];
          "runtime-benchmarks" = [ "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "pallet-balances/runtime-benchmarks" "sp-runtime/runtime-benchmarks" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "codec/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "scale-info/std" "serde" "sp-core/std" "sp-io/std" "sp-runtime/std" ];
          "try-runtime" = [ "frame-support/try-runtime" "frame-system/try-runtime" "pallet-balances/try-runtime" "sp-runtime/try-runtime" ];
        };
        resolvedDefaultFeatures = [ "serde" "std" "try-runtime" ];
      };
      "pallet-transaction-payment-rpc" = rec {
        crateName = "pallet-transaction-payment-rpc";
        version = "43.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "pallet_transaction_payment_rpc";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "client-core" "macros" "server-core" ];
          }
          {
            name = "pallet-transaction-payment-rpc-runtime-api";
            packageId = "pallet-transaction-payment-rpc-runtime-api";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
          }
          {
            name = "sp-api";
            packageId = "sp-api";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-rpc";
            packageId = "sp-rpc";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "sp-weights";
            packageId = "sp-weights";
          }
        ];

      };
      "pallet-transaction-payment-rpc-runtime-api" = rec {
        crateName = "pallet-transaction-payment-rpc-runtime-api";
        version = "40.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "pallet_transaction_payment_rpc_runtime_api";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "pallet-transaction-payment";
            packageId = "pallet-transaction-payment";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-weights";
            packageId = "sp-weights";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "codec/std" "pallet-transaction-payment/std" "sp-api/std" "sp-runtime/std" "sp-weights/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "parity-bip39" = rec {
        crateName = "parity-bip39";
        version = "2.0.1";
        edition = "2018";
        sha256 = "1sfk5kfkc7jr308sr2h8p612rry2y5y3yz9sspvyy1n4dl0vysaf";
        libName = "parity_bip39";
        authors = [
          "Steven Roose <steven@stevenroose.org>"
        ];
        dependencies = [
          {
            name = "bitcoin_hashes";
            packageId = "bitcoin_hashes 0.13.0";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            rename = "crate_rand";
            optional = true;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "bitcoin_hashes";
            packageId = "bitcoin_hashes 0.13.0";
          }
        ];
        features = {
          "all-languages" = [ "chinese-simplified" "chinese-traditional" "czech" "french" "italian" "japanese" "korean" "portuguese" "spanish" ];
          "alloc" = [ "unicode-normalization" ];
          "crate_rand" = [ "dep:crate_rand" ];
          "default" = [ "std" ];
          "rand" = [ "crate_rand" "rand_core" ];
          "rand_core" = [ "dep:rand_core" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" "serde/std" "unicode-normalization/std" ];
          "unicode-normalization" = [ "dep:unicode-normalization" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "crate_rand" "default" "rand" "rand_core" "serde" "std" "unicode-normalization" ];
      };
      "parity-db" = rec {
        crateName = "parity-db";
        version = "0.4.13";
        edition = "2021";
        sha256 = "0blda2i6m7aa3qpc2hpy19r7qhdwka1sdylamhhdrj899fi2hajr";
        libName = "parity_db";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "blake2";
            packageId = "blake2 0.10.6";
          }
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "fs2";
            packageId = "fs2";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "lz4";
            packageId = "lz4";
          }
          {
            name = "memmap2";
            packageId = "memmap2 0.5.10";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "siphasher";
            packageId = "siphasher";
          }
          {
            name = "snap";
            packageId = "snap";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "small_rng" ];
          }
        ];
        features = {
          "loom" = [ "dep:loom" ];
        };
      };
      "parity-scale-codec" = rec {
        crateName = "parity-scale-codec";
        version = "3.7.4";
        edition = "2021";
        sha256 = "0gf2in4gq14d2579g9q3rma8s3ys04h6azap5z4mpbwbf78f7zf9";
        libName = "parity_scale_codec";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec 0.7.6";
            usesDefaultFeatures = false;
          }
          {
            name = "bitvec";
            packageId = "bitvec";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "byte-slice-cast";
            packageId = "byte-slice-cast";
            usesDefaultFeatures = false;
          }
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "const_format";
            packageId = "const_format";
          }
          {
            name = "impl-trait-for-tuples";
            packageId = "impl-trait-for-tuples";
          }
          {
            name = "parity-scale-codec-derive";
            packageId = "parity-scale-codec-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
        devDependencies = [
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bit-vec" = [ "bitvec" ];
          "bitvec" = [ "dep:bitvec" ];
          "bytes" = [ "dep:bytes" ];
          "default" = [ "std" ];
          "derive" = [ "parity-scale-codec-derive" ];
          "fuzz" = [ "std" "arbitrary" ];
          "generic-array" = [ "dep:generic-array" ];
          "max-encoded-len" = [ "parity-scale-codec-derive?/max-encoded-len" ];
          "parity-scale-codec-derive" = [ "dep:parity-scale-codec-derive" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "serde/std" "bitvec?/std" "byte-slice-cast/std" "chain-error" ];
        };
        resolvedDefaultFeatures = [ "bytes" "chain-error" "default" "derive" "full" "max-encoded-len" "parity-scale-codec-derive" "serde" "std" ];
      };
      "parity-scale-codec-derive" = rec {
        crateName = "parity-scale-codec-derive";
        version = "3.7.4";
        edition = "2021";
        sha256 = "1cxp9x8fw9y8jfy6h3vb1xjvfkvfc4h7qdx9zbkiqm5rnrxq672q";
        procMacro = true;
        libName = "parity_scale_codec_derive";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.3.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "visit" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "max-encoded-len" ];
      };
      "parity-wasm" = rec {
        crateName = "parity-wasm";
        version = "0.45.0";
        edition = "2021";
        sha256 = "013k2l79sdisylkad175f23a5a8z7vvjmjsg4nqi9nn163zhmbg1";
        libName = "parity_wasm";
        authors = [
          "Nikolay Volf <nikvolf@gmail.com>"
          "Svyatoslav Nikolsky <svyatonik@yandex.ru>"
          "Sergey Shulepov <s.pepyakin@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "parking" = rec {
        crateName = "parking";
        version = "2.2.1";
        edition = "2018";
        sha256 = "1fnfgmzkfpjd69v4j9x737b1k8pnn054bvzcn5dm3pkgq595d3gk";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "The Rust Project Developers"
        ];
        features = {
          "loom" = [ "dep:loom" ];
        };
      };
      "parking_lot 0.11.2" = rec {
        crateName = "parking_lot";
        version = "0.11.2";
        edition = "2018";
        sha256 = "16gzf41bxmm10x82bla8d6wfppy9ym3fxsmdjyvn61m66s0bf5vx";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core 0.8.6";
          }
        ];
        features = {
          "arc_lock" = [ "lock_api/arc_lock" ];
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
          "stdweb" = [ "instant/stdweb" ];
          "wasm-bindgen" = [ "instant/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot 0.12.3" = rec {
        crateName = "parking_lot";
        version = "0.12.3";
        edition = "2021";
        sha256 = "09ws9g6245iiq8z975h8ycf818a66q3c6zv4b5h8skpm7hc1igzi";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core 0.9.10";
          }
        ];
        features = {
          "arc_lock" = [ "lock_api/arc_lock" ];
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot_core 0.8.6" = rec {
        crateName = "parking_lot_core";
        version = "0.8.6";
        edition = "2018";
        sha256 = "1p2nfcbr0b9lm9rglgm28k6mwyjwgm4knipsmqbgqaxdy3kcz8k0";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.2.16";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "winnt" "ntstatus" "minwindef" "winerror" "winbase" "errhandlingapi" "handleapi" ];
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
          "petgraph" = [ "dep:petgraph" ];
          "thread-id" = [ "dep:thread-id" ];
        };
      };
      "parking_lot_core 0.9.10" = rec {
        crateName = "parking_lot_core";
        version = "0.9.10";
        edition = "2021";
        sha256 = "1y3cf9ld9ijf7i4igwzffcn0xl16dxyn4c5bwgjck1dkgabiyh0y";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.5.12";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
          "petgraph" = [ "dep:petgraph" ];
          "thread-id" = [ "dep:thread-id" ];
        };
      };
      "partial_sort" = rec {
        crateName = "partial_sort";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0mhizhm2hvxid00383gkjcwwwgk7dh0nvqk5j1f6cvw3mp8d293r";
        authors = [
          "sundy-li <543950155@qq.com>"
        ];

      };
      "partner-chains-cardano-offchain" = rec {
        crateName = "partner-chains-cardano-offchain";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/smart-contracts/offchain; };
        libName = "partner_chains_cardano_offchain";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "cardano-serialization-lib";
            packageId = "cardano-serialization-lib";
            usesDefaultFeatures = false;
          }
          {
            name = "cbor_event";
            packageId = "cbor_event";
          }
          {
            name = "fraction";
            packageId = "fraction";
            usesDefaultFeatures = false;
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "hex-literal";
            packageId = "hex-literal 1.0.0";
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "minicbor";
            packageId = "minicbor";
            features = [ "alloc" ];
          }
          {
            name = "ogmios-client";
            packageId = "ogmios-client";
            usesDefaultFeatures = false;
            features = [ "jsonrpsee-client" ];
          }
          {
            name = "pallas-primitives";
            packageId = "pallas-primitives";
          }
          {
            name = "partner-chains-plutus-data";
            packageId = "partner-chains-plutus-data";
            usesDefaultFeatures = false;
          }
          {
            name = "plutus";
            packageId = "plutus";
            usesDefaultFeatures = false;
          }
          {
            name = "raw-scripts";
            packageId = "raw-scripts";
          }
          {
            name = "secp256k1";
            packageId = "secp256k1 0.30.0";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" "std" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" ];
          }
          {
            name = "tokio-retry";
            packageId = "tokio-retry";
          }
          {
            name = "uplc";
            packageId = "uplc";
          }
        ];
        devDependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.14.0";
          }
          {
            name = "pretty_assertions";
            packageId = "pretty_assertions";
          }
          {
            name = "proptest";
            packageId = "proptest";
          }
          {
            name = "testcontainers";
            packageId = "testcontainers";
          }
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
            features = [ "std" "serde" "parsing" ];
          }
        ];

      };
      "partner-chains-cli" = rec {
        crateName = "partner-chains-cli";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/partner-chains-cli; };
        libName = "partner_chains_cli";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "cardano-serialization-lib";
            packageId = "cardano-serialization-lib";
            usesDefaultFeatures = false;
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "colored";
            packageId = "colored";
          }
          {
            name = "ed25519-zebra";
            packageId = "ed25519-zebra";
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "inquire";
            packageId = "inquire";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
            features = [ "peerid" "ed25519" ];
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "ogmios-client";
            packageId = "ogmios-client";
            usesDefaultFeatures = false;
            features = [ "jsonrpsee-client" ];
          }
          {
            name = "pallet-session-validator-management";
            packageId = "pallet-session-validator-management";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "partner-chains-cardano-offchain";
            packageId = "partner-chains-cardano-offchain";
            usesDefaultFeatures = false;
          }
          {
            name = "plutus";
            packageId = "plutus";
            usesDefaultFeatures = false;
          }
          {
            name = "plutus-datum-derive";
            packageId = "plutus-datum-derive";
            usesDefaultFeatures = false;
          }
          {
            name = "secp256k1";
            packageId = "secp256k1 0.30.0";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" "std" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-session-validator-management";
            packageId = "sp-session-validator-management";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" ];
          }
        ];
        devDependencies = [
          {
            name = "hex-literal";
            packageId = "hex-literal 1.0.0";
          }
          {
            name = "pretty_assertions";
            packageId = "pretty_assertions";
          }
        ];

      };
      "partner-chains-data-sources-cli" = rec {
        crateName = "partner-chains-data-sources-cli";
        version = "1.7.0";
        edition = "2024";
        crateBin = [
          {
            name = "partner-chains-data-sources-cli";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/data-sources/cli; };
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "authority-selection-inherents";
            packageId = "authority-selection-inherents";
            usesDefaultFeatures = false;
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "env_logger";
            packageId = "env_logger 0.11.8";
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "partner-chains-db-sync-data-sources";
            packageId = "partner-chains-db-sync-data-sources";
            features = [ "block-source" "candidate-source" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-timestamp";
            packageId = "sp-timestamp";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" ];
          }
        ];

      };
      "partner-chains-db-sync-data-sources" = rec {
        crateName = "partner-chains-db-sync-data-sources";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/data-sources/db-sync; };
        libName = "partner_chains_db_sync_data_sources";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "authority-selection-inherents";
            packageId = "authority-selection-inherents";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "bigdecimal";
            packageId = "bigdecimal";
          }
          {
            name = "blake2b_simd";
            packageId = "blake2b_simd";
            usesDefaultFeatures = false;
          }
          {
            name = "cardano-serialization-lib";
            packageId = "cardano-serialization-lib";
            usesDefaultFeatures = false;
          }
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "db-sync-sqlx";
            packageId = "db-sync-sqlx";
          }
          {
            name = "derive-new";
            packageId = "derive-new";
          }
          {
            name = "figment";
            packageId = "figment";
            features = [ "env" "test" ];
          }
          {
            name = "futures";
            packageId = "futures";
            features = [ "thread-pool" ];
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "hex-literal";
            packageId = "hex-literal 1.0.0";
          }
          {
            name = "itertools";
            packageId = "itertools 0.14.0";
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "lru";
            packageId = "lru 0.14.0";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-sidechain-rpc";
            packageId = "pallet-sidechain-rpc";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "partner-chains-plutus-data";
            packageId = "partner-chains-plutus-data";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
            features = [ "std" "serde" ];
          }
          {
            name = "sidechain-mc-hash";
            packageId = "sidechain-mc-hash";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-block-participation";
            packageId = "sp-block-participation";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-governed-map";
            packageId = "sp-governed-map";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-native-token-management";
            packageId = "sp-native-token-management";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-timestamp";
            packageId = "sp-timestamp";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sqlx";
            packageId = "sqlx";
            usesDefaultFeatures = false;
            features = [ "runtime-tokio-rustls" "postgres" "macros" "chrono" "migrate" "bigdecimal" ];
          }
          {
            name = "substrate-prometheus-endpoint";
            packageId = "substrate-prometheus-endpoint";
            rename = "substrate-prometheus-endpoint";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" "full" ];
          }
        ];
        devDependencies = [
          {
            name = "ctor";
            packageId = "ctor";
          }
          {
            name = "pretty_assertions";
            packageId = "pretty_assertions";
          }
          {
            name = "testcontainers-modules";
            packageId = "testcontainers-modules";
            features = [ "postgres" ];
          }
          {
            name = "tokio-test";
            packageId = "tokio-test";
          }
        ];
        features = {
          "authority-selection-inherents" = [ "dep:authority-selection-inherents" ];
          "block-participation" = [ "sp-block-participation" ];
          "candidate-source" = [ "authority-selection-inherents" ];
          "governed-map" = [ "sp-governed-map" ];
          "mc-hash" = [ "sidechain-mc-hash" "block-source" ];
          "native-token" = [ "sp-native-token-management" ];
          "pallet-sidechain-rpc" = [ "dep:pallet-sidechain-rpc" ];
          "sidechain-mc-hash" = [ "dep:sidechain-mc-hash" ];
          "sidechain-rpc" = [ "pallet-sidechain-rpc" "block-source" ];
          "sp-block-participation" = [ "dep:sp-block-participation" ];
          "sp-governed-map" = [ "dep:sp-governed-map" ];
          "sp-native-token-management" = [ "dep:sp-native-token-management" ];
        };
        resolvedDefaultFeatures = [ "authority-selection-inherents" "block-participation" "block-source" "candidate-source" "default" "governed-map" "mc-hash" "native-token" "pallet-sidechain-rpc" "sidechain-mc-hash" "sidechain-rpc" "sp-block-participation" "sp-governed-map" "sp-native-token-management" ];
      };
      "partner-chains-demo-node" = rec {
        crateName = "partner-chains-demo-node";
        version = "1.7.0";
        edition = "2024";
        crateBin = [
          {
            name = "partner-chains-demo-node";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./demo/node; };
        libName = "partner_chains_demo_node";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "authority-selection-inherents";
            packageId = "authority-selection-inherents";
            usesDefaultFeatures = false;
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "derive-new";
            packageId = "derive-new";
          }
          {
            name = "envy";
            packageId = "envy";
          }
          {
            name = "frame-benchmarking";
            packageId = "frame-benchmarking";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "futures";
            packageId = "futures";
            features = [ "thread-pool" ];
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "client-core" "server" "macros" ];
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-block-producer-fees-rpc";
            packageId = "pallet-block-producer-fees-rpc";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-block-producer-metadata-rpc";
            packageId = "pallet-block-producer-metadata-rpc";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-partner-chains-session";
            packageId = "pallet-partner-chains-session";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-session-validator-management";
            packageId = "pallet-session-validator-management";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-session-validator-management-rpc";
            packageId = "pallet-session-validator-management-rpc";
          }
          {
            name = "pallet-sidechain-rpc";
            packageId = "pallet-sidechain-rpc";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-transaction-payment";
            packageId = "pallet-transaction-payment";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-transaction-payment-rpc";
            packageId = "pallet-transaction-payment-rpc";
            usesDefaultFeatures = false;
          }
          {
            name = "partner-chains-db-sync-data-sources";
            packageId = "partner-chains-db-sync-data-sources";
            features = [ "block-source" "candidate-source" "governed-map" "native-token" "mc-hash" "sidechain-rpc" "block-participation" ];
          }
          {
            name = "partner-chains-demo-runtime";
            packageId = "partner-chains-demo-runtime";
          }
          {
            name = "partner-chains-mock-data-sources";
            packageId = "partner-chains-mock-data-sources";
            usesDefaultFeatures = false;
            features = [ "block-source" "candidate-source" "governed-map" "native-token" "mc-hash" "sidechain-rpc" "block-participation" ];
          }
          {
            name = "partner-chains-node-commands";
            packageId = "partner-chains-node-commands";
          }
          {
            name = "sc-basic-authorship";
            packageId = "sc-basic-authorship";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-cli";
            packageId = "sc-cli";
            usesDefaultFeatures = false;
            features = [ "rocksdb" ];
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-client-db";
            packageId = "sc-client-db";
            usesDefaultFeatures = false;
            features = [ "rocksdb" ];
          }
          {
            name = "sc-consensus";
            packageId = "sc-consensus";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-consensus-aura";
            packageId = "sc-consensus-aura";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-consensus-beefy";
            packageId = "sc-consensus-beefy";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-consensus-beefy-rpc";
            packageId = "sc-consensus-beefy-rpc";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-consensus-grandpa";
            packageId = "sc-consensus-grandpa";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-consensus-grandpa-rpc";
            packageId = "sc-consensus-grandpa-rpc";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-executor";
            packageId = "sc-executor";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-network";
            packageId = "sc-network";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-partner-chains-consensus-aura";
            packageId = "sc-partner-chains-consensus-aura";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-rpc";
            packageId = "sc-rpc";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-rpc-api";
            packageId = "sc-rpc-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-service";
            packageId = "sc-service";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-telemetry";
            packageId = "sc-telemetry";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-transaction-pool";
            packageId = "sc-transaction-pool";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-transaction-pool-api";
            packageId = "sc-transaction-pool-api";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
          }
          {
            name = "sidechain-mc-hash";
            packageId = "sidechain-mc-hash";
            usesDefaultFeatures = false;
            features = [ "mock" ];
          }
          {
            name = "sidechain-slots";
            packageId = "sidechain-slots";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-block-builder";
            packageId = "sp-block-builder";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-block-participation";
            packageId = "sp-block-participation";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-block-producer-fees";
            packageId = "sp-block-producer-fees";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-block-producer-metadata";
            packageId = "sp-block-producer-metadata";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-block-production-log";
            packageId = "sp-block-production-log";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus";
            packageId = "sp-consensus";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-aura";
            packageId = "sp-consensus-aura";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-beefy";
            packageId = "sp-consensus-beefy";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-grandpa";
            packageId = "sp-consensus-grandpa";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-governed-map";
            packageId = "sp-governed-map";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-keyring";
            packageId = "sp-keyring";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-native-token-management";
            packageId = "sp-native-token-management";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-partner-chains-consensus-aura";
            packageId = "sp-partner-chains-consensus-aura";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-session-validator-management";
            packageId = "sp-session-validator-management";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-session-validator-management-query";
            packageId = "sp-session-validator-management-query";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-sidechain";
            packageId = "sp-sidechain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-timestamp";
            packageId = "sp-timestamp";
            usesDefaultFeatures = false;
          }
          {
            name = "substrate-frame-rpc-system";
            packageId = "substrate-frame-rpc-system";
            usesDefaultFeatures = false;
          }
          {
            name = "substrate-prometheus-endpoint";
            packageId = "substrate-prometheus-endpoint";
            rename = "substrate-prometheus-endpoint";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
          {
            name = "time-source";
            packageId = "time-source";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" ];
          }
        ];
        buildDependencies = [
          {
            name = "substrate-build-script-utils";
            packageId = "substrate-build-script-utils";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "assert_cmd";
            packageId = "assert_cmd";
          }
          {
            name = "authority-selection-inherents";
            packageId = "authority-selection-inherents";
            usesDefaultFeatures = false;
            features = [ "mock" ];
          }
          {
            name = "hex-literal";
            packageId = "hex-literal 1.0.0";
          }
          {
            name = "pallet-sidechain-rpc";
            packageId = "pallet-sidechain-rpc";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-native-token-management";
            packageId = "sp-native-token-management";
            usesDefaultFeatures = false;
            features = [ "mock" ];
          }
          {
            name = "time-source";
            packageId = "time-source";
            features = [ "mock" ];
          }
        ];
        features = {
          "default" = [ "sidechain-domain/std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "partner-chains-demo-runtime" = rec {
        crateName = "partner-chains-demo-runtime";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./demo/runtime; };
        libName = "partner_chains_demo_runtime";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "authority-selection-inherents";
            packageId = "authority-selection-inherents";
            usesDefaultFeatures = false;
          }
          {
            name = "derive-new";
            packageId = "derive-new";
          }
          {
            name = "frame-benchmarking";
            packageId = "frame-benchmarking";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "frame-executive";
            packageId = "frame-executive";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system-benchmarking";
            packageId = "frame-system-benchmarking";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system-rpc-runtime-api";
            packageId = "frame-system-rpc-runtime-api";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-try-runtime";
            packageId = "frame-try-runtime";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "hex-literal";
            packageId = "hex-literal 1.0.0";
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-address-associations";
            packageId = "pallet-address-associations";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-aura";
            packageId = "pallet-aura";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-balances";
            packageId = "pallet-balances";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-beefy";
            packageId = "pallet-beefy";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-beefy-mmr";
            packageId = "pallet-beefy-mmr";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-block-participation";
            packageId = "pallet-block-participation";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-block-producer-fees";
            packageId = "pallet-block-producer-fees";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-block-producer-metadata";
            packageId = "pallet-block-producer-metadata";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-block-production-log";
            packageId = "pallet-block-production-log";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-governed-map";
            packageId = "pallet-governed-map";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-grandpa";
            packageId = "pallet-grandpa";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-mmr";
            packageId = "pallet-mmr";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-native-token-management";
            packageId = "pallet-native-token-management";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-partner-chains-session";
            packageId = "pallet-partner-chains-session";
            usesDefaultFeatures = false;
            features = [ "pallet-session-compat" ];
          }
          {
            name = "pallet-session";
            packageId = "pallet-session";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-session-validator-management";
            packageId = "pallet-session-validator-management";
            usesDefaultFeatures = false;
            features = [ "pallet-session-compat" ];
          }
          {
            name = "pallet-session-validator-management-benchmarking";
            packageId = "pallet-session-validator-management-benchmarking";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-sidechain";
            packageId = "pallet-sidechain";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-sudo";
            packageId = "pallet-sudo";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-timestamp";
            packageId = "pallet-timestamp";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-transaction-payment";
            packageId = "pallet-transaction-payment";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-transaction-payment-rpc-runtime-api";
            packageId = "pallet-transaction-payment-rpc-runtime-api";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" "alloc" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sidechain-slots";
            packageId = "sidechain-slots";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-block-builder";
            packageId = "sp-block-builder";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-block-participation";
            packageId = "sp-block-participation";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-block-producer-fees";
            packageId = "sp-block-producer-fees";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-block-producer-metadata";
            packageId = "sp-block-producer-metadata";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-block-production-log";
            packageId = "sp-block-production-log";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-aura";
            packageId = "sp-consensus-aura";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-beefy";
            packageId = "sp-consensus-beefy";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-grandpa";
            packageId = "sp-consensus-grandpa";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-slots";
            packageId = "sp-consensus-slots";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-genesis-builder";
            packageId = "sp-genesis-builder";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-governed-map";
            packageId = "sp-governed-map";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-keyring";
            packageId = "sp-keyring";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-native-token-management";
            packageId = "sp-native-token-management";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-offchain";
            packageId = "sp-offchain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-session";
            packageId = "sp-session";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-session-validator-management";
            packageId = "sp-session-validator-management";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-sidechain";
            packageId = "sp-sidechain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-staking";
            packageId = "sp-staking";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-std";
            packageId = "sp-std";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-storage";
            packageId = "sp-storage";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-transaction-pool";
            packageId = "sp-transaction-pool";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-version";
            packageId = "sp-version";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-weights";
            packageId = "sp-weights";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "substrate-wasm-builder";
            packageId = "substrate-wasm-builder";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "minicbor";
            packageId = "minicbor";
            features = [ "alloc" ];
          }
          {
            name = "plutus";
            packageId = "plutus";
            usesDefaultFeatures = false;
          }
          {
            name = "pretty_assertions";
            packageId = "pretty_assertions";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "sp-consensus-slots";
            packageId = "sp-consensus-slots";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-keyring";
            packageId = "sp-keyring";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "frame-benchmarking" = [ "dep:frame-benchmarking" ];
          "frame-system-benchmarking" = [ "dep:frame-system-benchmarking" ];
          "frame-try-runtime" = [ "dep:frame-try-runtime" ];
          "pallet-session-validator-management-benchmarking" = [ "dep:pallet-session-validator-management-benchmarking" ];
          "runtime-benchmarks" = [ "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system-benchmarking/runtime-benchmarks" "frame-system/runtime-benchmarks" "pallet-balances/runtime-benchmarks" "pallet-beefy-mmr/runtime-benchmarks" "pallet-mmr/runtime-benchmarks" "pallet-grandpa/runtime-benchmarks" "pallet-sudo/runtime-benchmarks" "pallet-timestamp/runtime-benchmarks" "sp-runtime/runtime-benchmarks" "pallet-block-production-log/runtime-benchmarks" "pallet-native-token-management/runtime-benchmarks" "pallet-address-associations/runtime-benchmarks" "pallet-block-producer-fees/runtime-benchmarks" "pallet-block-producer-metadata/runtime-benchmarks" "pallet-block-participation/runtime-benchmarks" "pallet-governed-map/runtime-benchmarks" ];
          "std" = [ "authority-selection-inherents/std" "serde_json/std" "frame-try-runtime?/std" "frame-system-benchmarking?/std" "frame-system-rpc-runtime-api/std" "frame-benchmarking?/std" "parity-scale-codec/std" "scale-info/std" "frame-executive/std" "frame-support/std" "frame-system-rpc-runtime-api/std" "frame-system/std" "frame-executive/std" "frame-try-runtime/std" "pallet-aura/std" "pallet-balances/std" "pallet-beefy/std" "pallet-beefy-mmr/std" "pallet-mmr/std" "pallet-block-producer-fees/std" "pallet-block-production-log/std" "pallet-grandpa/std" "pallet-sudo/std" "pallet-partner-chains-session/std" "pallet-session-validator-management/std" "pallet-session-validator-management-benchmarking?/std" "pallet-timestamp/std" "pallet-transaction-payment-rpc-runtime-api/std" "pallet-transaction-payment/std" "pallet-address-associations/std" "pallet-block-producer-metadata/std" "sp-block-producer-metadata/std" "sp-api/std" "sp-block-builder/std" "sp-block-producer-fees/std" "sp-consensus-aura/std" "sp-consensus-beefy/std" "sp-consensus-grandpa/std" "sp-consensus-slots/std" "sp-core/std" "sp-genesis-builder/std" "sp-keyring/std" "sp-inherents/std" "sp-offchain/std" "sp-runtime/std" "sp-session/std" "sp-staking/std" "sp-std/std" "sp-transaction-pool/std" "sp-version/std" "sp-storage/std" "sp-io/std" "sp-weights/std" "substrate-wasm-builder" "pallet-sidechain/std" "sidechain-slots/std" "sidechain-domain/std" "sp-inherents/std" "pallet-native-token-management/std" "sp-native-token-management/std" "sp-block-production-log/std" "pallet-block-participation/std" "sp-block-participation/std" "pallet-governed-map/std" "sp-governed-map/std" ];
          "substrate-wasm-builder" = [ "dep:substrate-wasm-builder" ];
          "try-runtime" = [ "frame-try-runtime/try-runtime" "frame-executive/try-runtime" "frame-system/try-runtime" "frame-support/try-runtime" "pallet-aura/try-runtime" "pallet-balances/try-runtime" "pallet-beefy/try-runtime" "pallet-beefy-mmr/try-runtime" "pallet-mmr/try-runtime" "pallet-grandpa/try-runtime" "pallet-sudo/try-runtime" "pallet-timestamp/try-runtime" "pallet-transaction-payment/try-runtime" ];
        };
        resolvedDefaultFeatures = [ "default" "frame-benchmarking" "frame-system-benchmarking" "frame-try-runtime" "pallet-session-validator-management-benchmarking" "runtime-benchmarks" "std" "substrate-wasm-builder" "try-runtime" ];
      };
      "partner-chains-mock-data-sources" = rec {
        crateName = "partner-chains-mock-data-sources";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/data-sources/mock; };
        libName = "partner_chains_mock_data_sources";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "authority-selection-inherents";
            packageId = "authority-selection-inherents";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "hex-literal";
            packageId = "hex-literal 1.0.0";
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-sidechain-rpc";
            packageId = "pallet-sidechain-rpc";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.9.1";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
          }
          {
            name = "sidechain-mc-hash";
            packageId = "sidechain-mc-hash";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-block-participation";
            packageId = "sp-block-participation";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-governed-map";
            packageId = "sp-governed-map";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-native-token-management";
            packageId = "sp-native-token-management";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-timestamp";
            packageId = "sp-timestamp";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "authority-selection-inherents" = [ "dep:authority-selection-inherents" ];
          "block-participation" = [ "sp-block-participation" ];
          "candidate-source" = [ "authority-selection-inherents" ];
          "default" = [ "std" "block-source" "candidate-source" "governed-map" "native-token" ];
          "governed-map" = [ "sp-governed-map" ];
          "mc-hash" = [ "sidechain-mc-hash" ];
          "native-token" = [ "sp-native-token-management" ];
          "pallet-sidechain-rpc" = [ "dep:pallet-sidechain-rpc" ];
          "sidechain-mc-hash" = [ "dep:sidechain-mc-hash" ];
          "sidechain-rpc" = [ "pallet-sidechain-rpc" ];
          "sp-block-participation" = [ "dep:sp-block-participation" ];
          "sp-governed-map" = [ "dep:sp-governed-map" ];
          "sp-native-token-management" = [ "dep:sp-native-token-management" ];
          "std" = [ "serde_json/std" "sidechain-domain/std" "rand/std" "sp-native-token-management?/std" "sp-block-participation?/std" ];
        };
        resolvedDefaultFeatures = [ "authority-selection-inherents" "block-participation" "block-source" "candidate-source" "default" "governed-map" "mc-hash" "native-token" "pallet-sidechain-rpc" "sidechain-mc-hash" "sidechain-rpc" "sp-block-participation" "sp-governed-map" "sp-native-token-management" "std" ];
      };
      "partner-chains-node-commands" = rec {
        crateName = "partner-chains-node-commands";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/cli/node-commands; };
        libName = "partner_chains_node_commands";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "authority-selection-inherents";
            packageId = "authority-selection-inherents";
            usesDefaultFeatures = false;
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "cli-commands";
            packageId = "cli-commands";
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "log4rs";
            packageId = "log4rs";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "partner-chains-cli";
            packageId = "partner-chains-cli";
            usesDefaultFeatures = false;
          }
          {
            name = "partner-chains-smart-contracts-commands";
            packageId = "partner-chains-smart-contracts-commands";
            usesDefaultFeatures = false;
          }
          {
            name = "plutus";
            packageId = "plutus";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-cli";
            packageId = "sc-cli";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-service";
            packageId = "sc-service";
            usesDefaultFeatures = false;
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-session-validator-management";
            packageId = "sp-session-validator-management";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-session-validator-management-query";
            packageId = "sp-session-validator-management-query";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-sidechain";
            packageId = "sp-sidechain";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" ];
          }
        ];

      };
      "partner-chains-plutus-data" = rec {
        crateName = "partner-chains-plutus-data";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/smart-contracts/plutus-data; };
        libName = "partner_chains_plutus_data";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "cardano-serialization-lib";
            packageId = "cardano-serialization-lib";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "hex-literal";
            packageId = "hex-literal 1.0.0";
          }
          {
            name = "pretty_assertions";
            packageId = "pretty_assertions";
          }
          {
            name = "raw-scripts";
            packageId = "raw-scripts";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];

      };
      "partner-chains-smart-contracts-commands" = rec {
        crateName = "partner-chains-smart-contracts-commands";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/smart-contracts/commands; };
        libName = "partner_chains_smart_contracts_commands";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "derive" "env" ];
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "ogmios-client";
            packageId = "ogmios-client";
            usesDefaultFeatures = false;
          }
          {
            name = "partner-chains-cardano-offchain";
            packageId = "partner-chains-cardano-offchain";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" ];
          }
        ];
        devDependencies = [
          {
            name = "hex-literal";
            packageId = "hex-literal 1.0.0";
          }
        ];

      };
      "password-hash" = rec {
        crateName = "password-hash";
        version = "0.5.0";
        edition = "2021";
        sha256 = "0ri1mim11zk0a9s40zdi288dfqvmdiryc7lw8vl46b59ifa08vrl";
        libName = "password_hash";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base64ct";
            packageId = "base64ct";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle 2.6.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "base64ct/alloc" ];
          "default" = [ "rand_core" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "rand_core" = [ "dep:rand_core" ];
          "std" = [ "alloc" "base64ct/std" "rand_core/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "rand_core" "std" ];
      };
      "paste" = rec {
        crateName = "paste";
        version = "1.0.15";
        edition = "2018";
        sha256 = "02pxffpdqkapy292harq6asfjvadgp1s005fip9ljfsn9fvxgh2p";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "pbkdf2" = rec {
        crateName = "pbkdf2";
        version = "0.12.2";
        edition = "2021";
        sha256 = "1wms79jh4flpy1zi8xdp4h8ccxv4d85adc6zjagknvppc5vnmvgq";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "mac" ];
          }
          {
            name = "password-hash";
            packageId = "password-hash";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "rand_core" ];
          }
        ];
        features = {
          "default" = [ "hmac" ];
          "hmac" = [ "dep:hmac" ];
          "parallel" = [ "rayon" "std" ];
          "password-hash" = [ "dep:password-hash" ];
          "rayon" = [ "dep:rayon" ];
          "sha1" = [ "dep:sha1" ];
          "sha2" = [ "dep:sha2" ];
          "simple" = [ "hmac" "password-hash" "sha2" ];
          "std" = [ "password-hash/std" ];
        };
        resolvedDefaultFeatures = [ "password-hash" "std" ];
      };
      "pear" = rec {
        crateName = "pear";
        version = "0.2.9";
        edition = "2018";
        sha256 = "0rxlyizzaqq6lswgyfdxjxd3dyb1jfml9gwfpbx5g1j8rq0amvmx";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "inlinable_string";
            packageId = "inlinable_string";
          }
          {
            name = "pear_codegen";
            packageId = "pear_codegen";
          }
          {
            name = "yansi";
            packageId = "yansi";
            optional = true;
          }
        ];
        features = {
          "color" = [ "yansi" ];
          "default" = [ "color" ];
          "yansi" = [ "dep:yansi" ];
        };
        resolvedDefaultFeatures = [ "color" "default" "yansi" ];
      };
      "pear_codegen" = rec {
        crateName = "pear_codegen";
        version = "0.2.9";
        edition = "2018";
        sha256 = "0izijffdd2xs762497mk0xr7xwmyw62dzdqjz12v70n0bnc5pasb";
        procMacro = true;
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "proc-macro2-diagnostics";
            packageId = "proc-macro2-diagnostics";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "extra-traits" "visit-mut" ];
          }
        ];

      };
      "peeking_take_while" = rec {
        crateName = "peeking_take_while";
        version = "0.1.2";
        edition = "2015";
        sha256 = "16bhqr6rdyrp12zv381cxaaqqd0pwysvm1q8h2ygihvypvfprc8r";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];

      };
      "peg" = rec {
        crateName = "peg";
        version = "0.8.5";
        edition = "2021";
        sha256 = "0xr42lbgihlwbyfcmjggqv1s3a38agp4j077cd8yqdhv235cya4r";
        authors = [
          "Kevin Mehall <km@kevinmehall.net>"
        ];
        dependencies = [
          {
            name = "peg-macros";
            packageId = "peg-macros";
          }
          {
            name = "peg-runtime";
            packageId = "peg-runtime";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "peg-runtime/std" ];
          "trace" = [ "peg-macros/trace" ];
          "unstable" = [ "peg-runtime/unstable" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "peg-macros" = rec {
        crateName = "peg-macros";
        version = "0.8.5";
        edition = "2021";
        crateBin = [];
        sha256 = "0w8g53c75hz6iy3khc1ja2qm0idpnygjc0xsa9fmpyh2q82ap632";
        procMacro = true;
        libName = "peg_macros";
        libPath = "lib.rs";
        authors = [
          "Kevin Mehall <km@kevinmehall.net>"
        ];
        dependencies = [
          {
            name = "peg-runtime";
            packageId = "peg-runtime";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];
        features = {
        };
      };
      "peg-runtime" = rec {
        crateName = "peg-runtime";
        version = "0.8.5";
        edition = "2021";
        sha256 = "1jkgfy5jkjqwqy7h11nn3bmm1qfyn9kq2wnxnlspp4ldhsdwlb8k";
        libName = "peg_runtime";
        libPath = "lib.rs";
        authors = [
          "Kevin Mehall <km@kevinmehall.net>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "pem" = rec {
        crateName = "pem";
        version = "3.0.5";
        edition = "2021";
        sha256 = "1wwfk8sbyi9l18fvvn6z9p2gy7v7q7wimbhvrvixxj8a8zl3ibrq";
        authors = [
          "Jonathan Creekmore <jonathan@thecreekmores.org>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "base64/std" "serde?/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "pem-rfc7468" = rec {
        crateName = "pem-rfc7468";
        version = "0.7.0";
        edition = "2021";
        sha256 = "04l4852scl4zdva31c1z6jafbak0ni5pi0j38ml108zwzjdrrcw8";
        libName = "pem_rfc7468";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base64ct";
            packageId = "base64ct";
          }
        ];
        features = {
          "alloc" = [ "base64ct/alloc" ];
          "std" = [ "alloc" "base64ct/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.3.1";
        edition = "2018";
        sha256 = "0gi8wgx0dcy8rnv1kywdv98lwcx67hz0a0zwpib5v2i08r88y573";
        libName = "percent_encoding";
        authors = [
          "The rust-url developers"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "petgraph" = rec {
        crateName = "petgraph";
        version = "0.7.1";
        edition = "2018";
        sha256 = "0wkpppwrfv1h197asz1p4yfb4li5b1kw0nqllil67n6vj1qb6win";
        authors = [
          "bluss"
          "mitchmindtree"
        ];
        dependencies = [
          {
            name = "fixedbitset";
            packageId = "fixedbitset";
            usesDefaultFeatures = false;
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.9.0";
          }
        ];
        features = {
          "all" = [ "unstable" "quickcheck" "matrix_graph" "stable_graph" "graphmap" "rayon" ];
          "default" = [ "graphmap" "stable_graph" "matrix_graph" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" "indexmap/rayon" ];
          "serde" = [ "dep:serde" ];
          "serde-1" = [ "serde" "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
          "unstable" = [ "generate" ];
        };
      };
      "pin-project" = rec {
        crateName = "pin-project";
        version = "1.1.10";
        edition = "2021";
        sha256 = "12kadbnfm1f43cyadw9gsbyln1cy7vj764wz5c8wxaiza3filzv7";
        libName = "pin_project";
        dependencies = [
          {
            name = "pin-project-internal";
            packageId = "pin-project-internal";
          }
        ];

      };
      "pin-project-internal" = rec {
        crateName = "pin-project-internal";
        version = "1.1.10";
        edition = "2021";
        sha256 = "0qgqzfl0f4lzaz7yl5llhbg97g68r15kljzihaw9wm64z17qx4bf";
        procMacro = true;
        libName = "pin_project_internal";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "parsing" "printing" "clone-impls" "proc-macro" "full" "visit-mut" ];
          }
        ];

      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.2.16";
        edition = "2018";
        sha256 = "16wzc7z7dfkf9bmjin22f5282783f6mdksnr0nv0j5ym5f9gyg1v";
        libName = "pin_project_lite";

      };
      "pin-utils" = rec {
        crateName = "pin-utils";
        version = "0.1.0";
        edition = "2018";
        sha256 = "117ir7vslsl2z1a7qzhws4pd01cg2d3338c47swjyvqv2n60v1wb";
        libName = "pin_utils";
        authors = [
          "Josef Brandl <mail@josefbrandl.de>"
        ];

      };
      "pkcs1" = rec {
        crateName = "pkcs1";
        version = "0.7.5";
        edition = "2021";
        sha256 = "0zz4mil3nchnxljdfs2k5ab1cjqn7kq5lqp62n9qfix01zqvkzy8";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "der";
            packageId = "der";
            features = [ "oid" ];
          }
          {
            name = "pkcs8";
            packageId = "pkcs8";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "spki";
            packageId = "spki";
          }
        ];
        features = {
          "alloc" = [ "der/alloc" "zeroize" "pkcs8?/alloc" ];
          "pem" = [ "alloc" "der/pem" "pkcs8?/pem" ];
          "pkcs8" = [ "dep:pkcs8" ];
          "std" = [ "der/std" "alloc" ];
          "zeroize" = [ "der/zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "pem" "pkcs8" "std" "zeroize" ];
      };
      "pkcs8" = rec {
        crateName = "pkcs8";
        version = "0.10.2";
        edition = "2021";
        sha256 = "1dx7w21gvn07azszgqd3ryjhyphsrjrmq5mmz1fbxkj5g0vv4l7r";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "der";
            packageId = "der";
            features = [ "oid" ];
          }
          {
            name = "spki";
            packageId = "spki";
          }
        ];
        features = {
          "3des" = [ "encryption" "pkcs5/3des" ];
          "alloc" = [ "der/alloc" "der/zeroize" "spki/alloc" ];
          "des-insecure" = [ "encryption" "pkcs5/des-insecure" ];
          "encryption" = [ "alloc" "pkcs5/alloc" "pkcs5/pbes2" "rand_core" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "pem" = [ "alloc" "der/pem" "spki/pem" ];
          "pkcs5" = [ "dep:pkcs5" ];
          "rand_core" = [ "dep:rand_core" ];
          "sha1-insecure" = [ "encryption" "pkcs5/sha1-insecure" ];
          "std" = [ "alloc" "der/std" "spki/std" ];
          "subtle" = [ "dep:subtle" ];
        };
        resolvedDefaultFeatures = [ "alloc" "pem" "std" ];
      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.32";
        edition = "2018";
        sha256 = "0k4h3gnzs94sjb2ix6jyksacs52cf1fanpwsmlhjnwrdnp8dppby";
        libName = "pkg_config";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "plutus" = rec {
        crateName = "plutus";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/utils/plutus; };
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "minicbor";
            packageId = "minicbor";
            features = [ "alloc" ];
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];

      };
      "plutus-datum-derive" = rec {
        crateName = "plutus-datum-derive";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/utils/plutus/plutus-datum-derive; };
        procMacro = true;
        libName = "plutus_datum_derive";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "polkadot-ckb-merkle-mountain-range" = rec {
        crateName = "polkadot-ckb-merkle-mountain-range";
        version = "0.8.1";
        edition = "2018";
        sha256 = "0iv9gsndnf12bfgg02isy3np9fac1rr5znyy1x54k3mk6as72712";
        libName = "polkadot_ckb_merkle_mountain_range";
        authors = [
          "Nervos Core Dev <dev@nervos.org>"
          "Parity Technologies <admin@parity.io>"
          "Robert Hambrock <roberthambrock@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
            usesDefaultFeatures = false;
            features = [ "use_alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "polkadot-sdk-frame" = rec {
        crateName = "polkadot-sdk-frame";
        version = "0.9.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "polkadot_sdk_frame";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "docify";
            packageId = "docify";
          }
          {
            name = "frame-benchmarking";
            packageId = "frame-benchmarking";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "frame-executive";
            packageId = "frame-executive";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system-benchmarking";
            packageId = "frame-system-benchmarking";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system-rpc-runtime-api";
            packageId = "frame-system-rpc-runtime-api";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "frame-try-runtime";
            packageId = "frame-try-runtime";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-arithmetic";
            packageId = "sp-arithmetic";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-block-builder";
            packageId = "sp-block-builder";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-aura";
            packageId = "sp-consensus-aura";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-grandpa";
            packageId = "sp-consensus-grandpa";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-genesis-builder";
            packageId = "sp-genesis-builder";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-keyring";
            packageId = "sp-keyring";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-offchain";
            packageId = "sp-offchain";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-session";
            packageId = "sp-session";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-storage";
            packageId = "sp-storage";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-transaction-pool";
            packageId = "sp-transaction-pool";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-version";
            packageId = "sp-version";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "runtime" "std" ];
          "experimental" = [ "frame-support/experimental" ];
          "frame-benchmarking" = [ "dep:frame-benchmarking" ];
          "frame-executive" = [ "dep:frame-executive" ];
          "frame-system-benchmarking" = [ "dep:frame-system-benchmarking" ];
          "frame-system-rpc-runtime-api" = [ "dep:frame-system-rpc-runtime-api" ];
          "frame-try-runtime" = [ "dep:frame-try-runtime" ];
          "runtime" = [ "frame-executive" "frame-system-rpc-runtime-api" "sp-api" "sp-block-builder" "sp-consensus-aura" "sp-consensus-grandpa" "sp-genesis-builder" "sp-inherents" "sp-keyring" "sp-offchain" "sp-session" "sp-storage" "sp-transaction-pool" "sp-version" ];
          "runtime-benchmarks" = [ "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system-benchmarking/runtime-benchmarks" "frame-system/runtime-benchmarks" "sp-runtime/runtime-benchmarks" ];
          "sp-api" = [ "dep:sp-api" ];
          "sp-block-builder" = [ "dep:sp-block-builder" ];
          "sp-consensus-aura" = [ "dep:sp-consensus-aura" ];
          "sp-consensus-grandpa" = [ "dep:sp-consensus-grandpa" ];
          "sp-genesis-builder" = [ "dep:sp-genesis-builder" ];
          "sp-inherents" = [ "dep:sp-inherents" ];
          "sp-keyring" = [ "dep:sp-keyring" ];
          "sp-offchain" = [ "dep:sp-offchain" ];
          "sp-session" = [ "dep:sp-session" ];
          "sp-storage" = [ "dep:sp-storage" ];
          "sp-transaction-pool" = [ "dep:sp-transaction-pool" ];
          "sp-version" = [ "dep:sp-version" ];
          "std" = [ "codec/std" "frame-benchmarking?/std" "frame-executive?/std" "frame-support/std" "frame-system-benchmarking?/std" "frame-system-rpc-runtime-api?/std" "frame-system/std" "frame-try-runtime?/std" "log/std" "scale-info/std" "serde/std" "sp-api?/std" "sp-arithmetic/std" "sp-block-builder?/std" "sp-consensus-aura?/std" "sp-consensus-grandpa?/std" "sp-core/std" "sp-genesis-builder?/std" "sp-inherents?/std" "sp-io/std" "sp-keyring?/std" "sp-offchain?/std" "sp-runtime/std" "sp-session?/std" "sp-storage/std" "sp-transaction-pool?/std" "sp-version?/std" ];
          "try-runtime" = [ "frame-executive/try-runtime" "frame-support/try-runtime" "frame-system/try-runtime" "frame-try-runtime/try-runtime" "pallet-examples/try-runtime" "sp-runtime/try-runtime" ];
        };
        resolvedDefaultFeatures = [ "frame-benchmarking" "frame-executive" "frame-system-benchmarking" "frame-system-rpc-runtime-api" "frame-try-runtime" "runtime" "runtime-benchmarks" "sp-api" "sp-block-builder" "sp-consensus-aura" "sp-consensus-grandpa" "sp-genesis-builder" "sp-inherents" "sp-keyring" "sp-offchain" "sp-session" "sp-storage" "sp-transaction-pool" "sp-version" "std" "try-runtime" ];
      };
      "polkavm" = rec {
        crateName = "polkavm";
        version = "0.18.0";
        edition = "2021";
        sha256 = "0g9lbn7535hfiac74n8d48s40awrk8jp3jlqdfmnf5disfqll16x";
        authors = [
          "Jan Bujak <jan@parity.io>"
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((!(target."miri" or false)) && ("x86_64" == target."arch" or null) && (("macos" == target."os" or null) || ("freebsd" == target."os" or null)));
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "polkavm-assembler";
            packageId = "polkavm-assembler";
            features = [ "alloc" ];
          }
          {
            name = "polkavm-common";
            packageId = "polkavm-common";
            features = [ "alloc" "logging" "regmap" "unique-id" ];
          }
          {
            name = "polkavm-linux-raw";
            packageId = "polkavm-linux-raw";
            target = { target, features }: ((!(target."miri" or false)) && ("x86_64" == target."arch" or null) && ("linux" == target."os" or null));
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "polkavm-common";
            packageId = "polkavm-common";
            features = [ "export-internals-for-testing" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "module-cache" = [ "dep:schnellru" "polkavm-common/blake3" ];
          "std" = [ "ruzstd/std" ];
        };
      };
      "polkavm-assembler" = rec {
        crateName = "polkavm-assembler";
        version = "0.18.0";
        edition = "2021";
        sha256 = "13rnlvwgwn03yhyfc0xlgbjgapyffg4p253kdygdgzhb8bf3ibga";
        libName = "polkavm_assembler";
        authors = [
          "Jan Bujak <jan@parity.io>"
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
      "polkavm-common" = rec {
        crateName = "polkavm-common";
        version = "0.18.0";
        edition = "2021";
        sha256 = "00p1i0k03nddgjjk9xclnjy8gaypnnwq8isxcikqazc05ac37zri";
        libName = "polkavm_common";
        authors = [
          "Jan Bujak <jan@parity.io>"
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "polkavm-assembler";
            packageId = "polkavm-assembler";
            optional = true;
          }
        ];
        features = {
          "blake3" = [ "dep:blake3" ];
          "logging" = [ "dep:log" ];
          "regmap" = [ "dep:polkavm-assembler" ];
          "std" = [ "alloc" "blake3/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "logging" "regmap" "unique-id" ];
      };
      "polkavm-derive" = rec {
        crateName = "polkavm-derive";
        version = "0.18.0";
        edition = "2021";
        sha256 = "0zhiwig11v3k80rzx2pmp0bgsqz0xajrhbj050rc21347czp1sy2";
        libName = "polkavm_derive";
        authors = [
          "Jan Bujak <jan@parity.io>"
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "polkavm-derive-impl-macro";
            packageId = "polkavm-derive-impl-macro";
          }
        ];

      };
      "polkavm-derive-impl" = rec {
        crateName = "polkavm-derive-impl";
        version = "0.18.1";
        edition = "2021";
        sha256 = "1xv1ya9zsawqr57h7qpk0r12d8fdlv4g8c49745255kf5slic89g";
        libName = "polkavm_derive_impl";
        authors = [
          "Jan Bujak <jan@parity.io>"
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "polkavm-common";
            packageId = "polkavm-common";
            features = [ "alloc" ];
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "extra-traits" ];
          }
        ];

      };
      "polkavm-derive-impl-macro" = rec {
        crateName = "polkavm-derive-impl-macro";
        version = "0.18.0";
        edition = "2021";
        sha256 = "0jr9z4693hs1nkabjg2jiqz1x4401c432z80q4s3why7vmlndha8";
        procMacro = true;
        libName = "polkavm_derive_impl_macro";
        authors = [
          "Jan Bujak <jan@parity.io>"
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "polkavm-derive-impl";
            packageId = "polkavm-derive-impl";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "polkavm-linker" = rec {
        crateName = "polkavm-linker";
        version = "0.18.0";
        edition = "2021";
        sha256 = "1lsb39qbygldpyxgvfzl927hyyr7dsj3pi5pk5ffmncln29yggz9";
        libName = "polkavm_linker";
        authors = [
          "Jan Bujak <jan@parity.io>"
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "dirs";
            packageId = "dirs";
          }
          {
            name = "gimli";
            packageId = "gimli 0.31.1";
            usesDefaultFeatures = false;
            features = [ "std" "read" "endian-reader" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            usesDefaultFeatures = false;
            features = [ "raw" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "object";
            packageId = "object 0.36.7";
            usesDefaultFeatures = false;
            features = [ "std" "read_core" "elf" "unaligned" ];
          }
          {
            name = "polkavm-common";
            packageId = "polkavm-common";
            features = [ "alloc" ];
          }
          {
            name = "regalloc2";
            packageId = "regalloc2 0.9.3";
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
        ];

      };
      "polkavm-linux-raw" = rec {
        crateName = "polkavm-linux-raw";
        version = "0.18.0";
        edition = "2021";
        sha256 = "1phgwb62ipidazxy4h9p2lzcykliibl1bnd3g0cg6w0c0wng1vr3";
        libName = "polkavm_linux_raw";
        authors = [
          "Jan Bujak <jan@parity.io>"
          "Parity Technologies <admin@parity.io>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "polling" = rec {
        crateName = "polling";
        version = "3.7.4";
        edition = "2021";
        sha256 = "0bs4nhwfwsvlzlhah2gbhj3aa9ynvchv2g350wapswh26a65c156";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "hermit-abi";
            packageId = "hermit-abi 0.4.0";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.44";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) || ("fuchsia" == target."os" or null) || ("vxworks" == target."os" or null));
            features = [ "event" "fs" "pipe" "process" "std" "time" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Wdk_Foundation" "Wdk_Storage_FileSystem" "Win32_Foundation" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage_FileSystem" "Win32_System_IO" "Win32_System_LibraryLoader" "Win32_System_Threading" "Win32_System_WindowsProgramming" ];
          }
        ];

      };
      "poly1305" = rec {
        crateName = "poly1305";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1grs77skh7d8vi61ji44i8gpzs3r9x7vay50i6cg8baxfa8bsnc1";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug 0.3.1";
          }
          {
            name = "universal-hash";
            packageId = "universal-hash";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "std" = [ "universal-hash/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "polyval" = rec {
        crateName = "polyval";
        version = "0.6.2";
        edition = "2021";
        sha256 = "09gs56vm36ls6pyxgh06gw2875z2x77r8b2km8q28fql0q6yc7wx";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug 0.3.1";
          }
          {
            name = "universal-hash";
            packageId = "universal-hash";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "std" = [ "universal-hash/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "portable-atomic" = rec {
        crateName = "portable-atomic";
        version = "1.11.0";
        edition = "2018";
        sha256 = "0glb2wngflvfmg789qbf6dbnwcf6ai212fs7n0lf1c66rd49n3im";
        libName = "portable_atomic";
        features = {
          "critical-section" = [ "dep:critical-section" ];
          "default" = [ "fallback" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "fallback" "require-cas" ];
      };
      "portable-atomic-util" = rec {
        crateName = "portable-atomic-util";
        version = "0.2.4";
        edition = "2018";
        sha256 = "01rmx1li07ixsx3sqg2bxqrkzk7b5n8pibwwf2589ms0s3cg18nq";
        libName = "portable_atomic_util";
        dependencies = [
          {
            name = "portable-atomic";
            packageId = "portable-atomic";
            usesDefaultFeatures = false;
            features = [ "require-cas" ];
          }
        ];
        features = {
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "potential_utf" = rec {
        crateName = "potential_utf";
        version = "0.1.2";
        edition = "2021";
        sha256 = "11dm6k3krx3drbvhgjw8z508giiv0m09wzl6ghza37176w4c79z5";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "zerovec";
            packageId = "zerovec";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" "zerovec?/alloc" ];
          "databake" = [ "dep:databake" ];
          "serde" = [ "dep:serde" ];
          "writeable" = [ "dep:writeable" "alloc" ];
          "zerovec" = [ "dep:zerovec" ];
        };
        resolvedDefaultFeatures = [ "zerovec" ];
      };
      "powerfmt" = rec {
        crateName = "powerfmt";
        version = "0.2.0";
        edition = "2021";
        sha256 = "14ckj2xdpkhv3h6l5sdmb9f1d57z8hbfpdldjc2vl5givq2y77j3";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];
        features = {
          "default" = [ "std" "macros" ];
          "macros" = [ "dep:powerfmt-macros" ];
          "std" = [ "alloc" ];
        };
      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.21";
        edition = "2021";
        sha256 = "1abxx6qz5qnd43br1dd9b2savpihzjza8gb4fbzdql1gxp2f7sl5";
        libName = "ppv_lite86";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "zerocopy";
            packageId = "zerocopy";
            features = [ "simd" ];
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "simd" "std" ];
      };
      "predicates" = rec {
        crateName = "predicates";
        version = "3.1.3";
        edition = "2021";
        sha256 = "0wrm57acvagx0xmh5xffx5xspsr2kbggm698x0vks132fpjrxld5";
        authors = [
          "Nick Stevens <nick@bitcurry.com>"
        ];
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "difflib";
            packageId = "difflib";
            optional = true;
          }
          {
            name = "predicates-core";
            packageId = "predicates-core";
          }
        ];
        features = {
          "default" = [ "diff" "regex" "float-cmp" "normalize-line-endings" "color" ];
          "diff" = [ "dep:difflib" ];
          "float-cmp" = [ "dep:float-cmp" ];
          "normalize-line-endings" = [ "dep:normalize-line-endings" ];
          "regex" = [ "dep:regex" ];
        };
        resolvedDefaultFeatures = [ "diff" ];
      };
      "predicates-core" = rec {
        crateName = "predicates-core";
        version = "1.0.9";
        edition = "2021";
        sha256 = "1yjz144yn3imq2r4mh7k9h0r8wv4yyjjj57bs0zwkscz24mlczkj";
        libName = "predicates_core";
        authors = [
          "Nick Stevens <nick@bitcurry.com>"
        ];

      };
      "predicates-tree" = rec {
        crateName = "predicates-tree";
        version = "1.0.12";
        edition = "2021";
        sha256 = "0p223d9y02ywwxs3yl68kziswz4da4vabz67jfhp7yqx71njvpbj";
        libName = "predicates_tree";
        authors = [
          "Nick Stevens <nick@bitcurry.com>"
        ];
        dependencies = [
          {
            name = "predicates-core";
            packageId = "predicates-core";
          }
          {
            name = "termtree";
            packageId = "termtree";
          }
        ];

      };
      "pretty" = rec {
        crateName = "pretty";
        version = "0.11.3";
        edition = "2018";
        sha256 = "0ikq0dfcgj99m8z50zpkfz140sqpmiji4imp9l93nzd87hgamww3";
        authors = [
          "Jonathan Sterling <jon@jonmsterling.com>"
          "Darin Morrison <darinmorrison+git@gmail.com>"
          "Markus Westerlind <marwes91@gmail.com>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec 0.5.2";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "typed-arena";
            packageId = "typed-arena";
          }
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
        ];
        features = {
          "termcolor" = [ "dep:termcolor" ];
        };
      };
      "pretty_assertions" = rec {
        crateName = "pretty_assertions";
        version = "1.4.1";
        edition = "2018";
        sha256 = "0v8iq35ca4rw3rza5is3wjxwsf88303ivys07anc5yviybi31q9s";
        authors = [
          "Colin Kiegel <kiegel@gmx.de>"
          "Florent Fayolle <florent.fayolle69@gmail.com>"
          "Tom Milligan <code@tommilligan.net>"
        ];
        dependencies = [
          {
            name = "diff";
            packageId = "diff";
          }
          {
            name = "yansi";
            packageId = "yansi";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "prettyplease" = rec {
        crateName = "prettyplease";
        version = "0.2.32";
        edition = "2021";
        links = "prettyplease02";
        sha256 = "1xmdmwhsvqc8l5ns029vzjida4k3lp5ynin0xra43qsiki0wakk6";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "full" ];
          }
        ];
        devDependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "extra-traits" "parsing" "printing" "visit-mut" ];
          }
        ];
        features = {
          "verbatim" = [ "syn/parsing" ];
        };
      };
      "primitive-types" = rec {
        crateName = "primitive-types";
        version = "0.13.1";
        edition = "2021";
        sha256 = "1xc7khlv6zgzya79ym28cd9c4a7y27iy0gwb4xyhnisnv2kh0mni";
        libName = "primitive_types";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "fixed-hash";
            packageId = "fixed-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "impl-codec";
            packageId = "impl-codec";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "impl-num-traits";
            packageId = "impl-num-traits";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "impl-serde";
            packageId = "impl-serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            rename = "scale-info-crate";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "uint";
            packageId = "uint 0.10.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "fixed-hash/arbitrary" "uint/arbitrary" ];
          "byteorder" = [ "fixed-hash/byteorder" ];
          "codec" = [ "impl-codec" ];
          "default" = [ "std" "rand" ];
          "fp-conversion" = [ "std" ];
          "impl-codec" = [ "dep:impl-codec" ];
          "impl-num-traits" = [ "dep:impl-num-traits" ];
          "impl-rlp" = [ "dep:impl-rlp" ];
          "impl-serde" = [ "dep:impl-serde" ];
          "json-schema" = [ "dep:schemars" ];
          "num-traits" = [ "impl-num-traits" ];
          "rand" = [ "fixed-hash/rand" ];
          "rlp" = [ "impl-rlp" ];
          "rustc-hex" = [ "fixed-hash/rustc-hex" ];
          "scale-info" = [ "codec" "scale-info-crate" ];
          "scale-info-crate" = [ "dep:scale-info-crate" ];
          "serde" = [ "std" "impl-serde" "impl-serde/std" ];
          "serde_no_std" = [ "impl-serde" ];
          "std" = [ "uint/std" "fixed-hash/std" "impl-codec?/std" ];
        };
        resolvedDefaultFeatures = [ "byteorder" "codec" "impl-codec" "impl-num-traits" "impl-serde" "num-traits" "rustc-hex" "scale-info" "scale-info-crate" "serde" "serde_no_std" "std" ];
      };
      "proc-macro-crate 1.1.3" = rec {
        crateName = "proc-macro-crate";
        version = "1.1.3";
        edition = "2018";
        sha256 = "06pi2jqncn1kscwsp7zm0p04iki3vl70n99j0d2dxx2bj774fzg1";
        libName = "proc_macro_crate";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "toml";
            packageId = "toml 0.5.11";
          }
        ];

      };
      "proc-macro-crate 3.3.0" = rec {
        crateName = "proc-macro-crate";
        version = "3.3.0";
        edition = "2021";
        sha256 = "0d9xlymplfi9yv3f5g4bp0d6qh70apnihvqcjllampx4f5lmikpd";
        libName = "proc_macro_crate";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "toml_edit";
            packageId = "toml_edit";
            usesDefaultFeatures = false;
            features = [ "parse" ];
          }
        ];

      };
      "proc-macro-error" = rec {
        crateName = "proc-macro-error";
        version = "1.0.4";
        edition = "2018";
        sha256 = "1373bhxaf0pagd8zkyd03kkx6bchzf6g0dkwrwzsnal9z47lj9fs";
        libName = "proc_macro_error";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
        ];
        dependencies = [
          {
            name = "proc-macro-error-attr";
            packageId = "proc-macro-error-attr";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "default" = [ "syn-error" ];
          "syn" = [ "dep:syn" ];
          "syn-error" = [ "syn" ];
        };
        resolvedDefaultFeatures = [ "default" "syn" "syn-error" ];
      };
      "proc-macro-error-attr" = rec {
        crateName = "proc-macro-error-attr";
        version = "1.0.4";
        edition = "2018";
        sha256 = "0sgq6m5jfmasmwwy8x4mjygx5l7kp8s4j60bv25ckv2j1qc41gm1";
        procMacro = true;
        libName = "proc_macro_error_attr";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];

      };
      "proc-macro-warning" = rec {
        crateName = "proc-macro-warning";
        version = "1.84.1";
        edition = "2021";
        sha256 = "1hs2mrvjdirrcgcszvwyi26gfha85kaaxy53a440w4ndrwqsbvkm";
        libName = "proc_macro_warning";
        authors = [
          "Oliver Tale-Yazdi <oliver@tasty.limo>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "derive_debug" ];
        };
      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.95";
        edition = "2021";
        sha256 = "0y7pwxv6sh4fgg6s715ygk1i7g3w02c0ljgcsfm046isibkfbcq2";
        libName = "proc_macro2";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" "span-locations" ];
      };
      "proc-macro2-diagnostics" = rec {
        crateName = "proc-macro2-diagnostics";
        version = "0.10.1";
        edition = "2018";
        sha256 = "1j48ipc80pykvhx6yhndfa774s58ax1h6sm6mlhf09ls76f6l1mg";
        libName = "proc_macro2_diagnostics";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
          {
            name = "yansi";
            packageId = "yansi";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "colors" = [ "yansi" ];
          "default" = [ "colors" ];
          "yansi" = [ "dep:yansi" ];
        };
        resolvedDefaultFeatures = [ "colors" "default" "yansi" ];
      };
      "prometheus" = rec {
        crateName = "prometheus";
        version = "0.13.4";
        edition = "2018";
        sha256 = "1lbymqdsh9v4zk4fjdq2gq6lbxspp1w3z2b9vfb7y7vp625c4crx";
        authors = [
          "overvenus@gmail.com"
          "siddontang@gmail.com"
          "vistaswx@gmail.com"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "default" = [ "protobuf" ];
          "gen" = [ "protobuf-codegen-pure" ];
          "libc" = [ "dep:libc" ];
          "nightly" = [ "libc" ];
          "process" = [ "libc" "procfs" ];
          "procfs" = [ "dep:procfs" ];
          "protobuf" = [ "dep:protobuf" ];
          "protobuf-codegen-pure" = [ "dep:protobuf-codegen-pure" ];
          "push" = [ "reqwest" "libc" "protobuf" ];
          "reqwest" = [ "dep:reqwest" ];
        };
      };
      "prometheus-client" = rec {
        crateName = "prometheus-client";
        version = "0.22.3";
        edition = "2021";
        sha256 = "1jn3c2m4rnw7w61adsbjph7dqsdxh6s7x0n44w8qkpcsabzyjkjh";
        libName = "prometheus_client";
        authors = [
          "Max Inden <mail@max-inden.de>"
        ];
        dependencies = [
          {
            name = "dtoa";
            packageId = "dtoa";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "prometheus-client-derive-encode";
            packageId = "prometheus-client-derive-encode";
          }
        ];
        features = {
          "protobuf" = [ "dep:prost" "dep:prost-types" "dep:prost-build" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "prometheus-client-derive-encode" = rec {
        crateName = "prometheus-client-derive-encode";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1f22ckswiqnjlh1xaxkh8pqlfsdhj851ns33bnvrcsczp97743s4";
        procMacro = true;
        libName = "prometheus_client_derive_encode";
        authors = [
          "Max Inden <mail@max-inden.de>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "proptest" = rec {
        crateName = "proptest";
        version = "1.6.0";
        edition = "2018";
        sha256 = "0l4y4bb8hffv7cys7d59qwqdmvmqjfzz0x9vblc08209clqfkjhl";
        authors = [
          "Jason Lingle"
        ];
        dependencies = [
          {
            name = "bit-set";
            packageId = "bit-set";
            optional = true;
          }
          {
            name = "bit-vec";
            packageId = "bit-vec";
            optional = true;
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.3.1";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_xorshift";
            packageId = "rand_xorshift";
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.5";
            optional = true;
          }
          {
            name = "rusty-fork";
            packageId = "rusty-fork";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tempfile";
            packageId = "tempfile";
            optional = true;
          }
          {
            name = "unarray";
            packageId = "unarray";
          }
        ];
        features = {
          "attr-macro" = [ "proptest-macro" ];
          "bit-set" = [ "dep:bit-set" "dep:bit-vec" ];
          "default" = [ "std" "fork" "timeout" "bit-set" ];
          "default-code-coverage" = [ "std" "fork" "timeout" "bit-set" ];
          "fork" = [ "std" "rusty-fork" "tempfile" ];
          "handle-panics" = [ "std" ];
          "hardware-rng" = [ "x86" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "no_std" = [ "num-traits/libm" ];
          "proptest-macro" = [ "dep:proptest-macro" ];
          "regex-syntax" = [ "dep:regex-syntax" ];
          "rusty-fork" = [ "dep:rusty-fork" ];
          "std" = [ "rand/std" "lazy_static" "regex-syntax" "num-traits/std" ];
          "tempfile" = [ "dep:tempfile" ];
          "timeout" = [ "fork" "rusty-fork/timeout" ];
          "x86" = [ "dep:x86" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bit-set" "default" "fork" "lazy_static" "regex-syntax" "rusty-fork" "std" "tempfile" "timeout" ];
      };
      "prost 0.12.6" = rec {
        crateName = "prost";
        version = "0.12.6";
        edition = "2021";
        sha256 = "0a8z87ir8yqjgl1kxbdj30a7pzsjs9ka85szll6i6xlb31f47cfy";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "prost-derive";
            packageId = "prost-derive 0.12.6";
            optional = true;
          }
        ];
        features = {
          "default" = [ "derive" "std" ];
          "derive" = [ "dep:prost-derive" ];
          "prost-derive" = [ "derive" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "std" ];
      };
      "prost 0.13.5" = rec {
        crateName = "prost";
        version = "0.13.5";
        edition = "2021";
        sha256 = "1r8yi6zxxwv9gq5ia9p55nspgwmchs94sqpp64x33v5k3njgm5i7";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "prost-derive";
            packageId = "prost-derive 0.13.5";
            optional = true;
          }
        ];
        features = {
          "default" = [ "derive" "std" ];
          "derive" = [ "dep:prost-derive" ];
          "prost-derive" = [ "derive" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "prost-derive" "std" ];
      };
      "prost-build" = rec {
        crateName = "prost-build";
        version = "0.13.5";
        edition = "2021";
        sha256 = "1gw1mr0rmv15fc2yvn9jmxbqaj8qh80w5nn5x5s1932y8ijr8xmy";
        libName = "prost_build";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "itertools";
            packageId = "itertools 0.14.0";
            usesDefaultFeatures = false;
            features = [ "use_alloc" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "multimap";
            packageId = "multimap";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "petgraph";
            packageId = "petgraph";
            usesDefaultFeatures = false;
          }
          {
            name = "prettyplease";
            packageId = "prettyplease";
            optional = true;
          }
          {
            name = "prost";
            packageId = "prost 0.13.5";
            usesDefaultFeatures = false;
          }
          {
            name = "prost-types";
            packageId = "prost-types";
            usesDefaultFeatures = false;
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" "unicode-bool" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            optional = true;
            features = [ "full" ];
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        features = {
          "cleanup-markdown" = [ "dep:pulldown-cmark" "dep:pulldown-cmark-to-cmark" ];
          "default" = [ "format" ];
          "format" = [ "dep:prettyplease" "dep:syn" ];
        };
        resolvedDefaultFeatures = [ "default" "format" ];
      };
      "prost-derive 0.12.6" = rec {
        crateName = "prost-derive";
        version = "0.12.6";
        edition = "2021";
        sha256 = "1waaq9d2f114bvvpw957s7vsx268licnfawr20b51ydb43dxrgc1";
        procMacro = true;
        libName = "prost_derive";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
            usesDefaultFeatures = false;
            features = [ "use_alloc" ];
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" ];
          }
        ];

      };
      "prost-derive 0.13.5" = rec {
        crateName = "prost-derive";
        version = "0.13.5";
        edition = "2021";
        sha256 = "0kgc9gbzsa998xixblfi3kfydka64zqf6rmpm53b761cjxbxfmla";
        procMacro = true;
        libName = "prost_derive";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "itertools";
            packageId = "itertools 0.14.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" ];
          }
        ];

      };
      "prost-types" = rec {
        crateName = "prost-types";
        version = "0.13.5";
        edition = "2021";
        sha256 = "05mx699wyg7cjil3hz7h8lp4dhi7xhy1lq5kjv1s3cfx6szw3hjj";
        libName = "prost_types";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "prost";
            packageId = "prost 0.13.5";
            usesDefaultFeatures = false;
            features = [ "prost-derive" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "std" = [ "prost/std" ];
        };
      };
      "psm" = rec {
        crateName = "psm";
        version = "0.1.26";
        edition = "2021";
        sha256 = "07xfl8gpz8v9qz2zvnpcy9r3nppbhxlxkgqbxcdwsdl5xij4953f";
        authors = [
          "Simonas Kazlauskas <psm@kazlauskas.me>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "quanta" = rec {
        crateName = "quanta";
        version = "0.12.5";
        edition = "2021";
        sha256 = "03kwh0xb7gr461jcjhrxvcj9157k1jyg2gyy0f4579nf4ilgxl9v";
        authors = [
          "Toby Lawrence <toby@nuclearfurnace.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(("windows" == target."os" or null) || ("wasm32" == target."arch" or null)));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "raw-cpuid";
            packageId = "raw-cpuid";
            target = { target, features }: ("x86" == target."arch" or null);
          }
          {
            name = "raw-cpuid";
            packageId = "raw-cpuid";
            target = { target, features }: ("x86_64" == target."arch" or null);
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.0+wasi-snapshot-preview1";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("wasi" == target."os" or null));
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
            features = [ "Window" "Performance" ];
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "profileapi" ];
          }
        ];
        features = {
          "default" = [ "flaky_tests" ];
          "prost" = [ "prost-types" ];
          "prost-types" = [ "dep:prost-types" ];
        };
        resolvedDefaultFeatures = [ "default" "flaky_tests" ];
      };
      "quick-error" = rec {
        crateName = "quick-error";
        version = "1.2.3";
        edition = "2015";
        sha256 = "1q6za3v78hsspisc197bg3g7rpc989qycy8ypr8ap8igv10ikl51";
        libName = "quick_error";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
          "Colin Kiegel <kiegel@gmx.de>"
        ];

      };
      "quick-protobuf" = rec {
        crateName = "quick-protobuf";
        version = "0.8.1";
        edition = "2018";
        sha256 = "07rf1pdzq9l5rsv0qg96487ijvi73rp2zfh1ksc2lwh4q96ahvcx";
        libName = "quick_protobuf";
        authors = [
          "Johann Tuffe <tafia973@gmail.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "byteorder/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "quick-protobuf-codec" = rec {
        crateName = "quick-protobuf-codec";
        version = "0.3.1";
        edition = "2021";
        sha256 = "0x14vq4v829j58avwcc9fcbcl9ljjsxb57d3sx2rf5ibnc55i80m";
        libName = "quick_protobuf_codec";
        authors = [
          "Max Inden <mail@max-inden.de>"
        ];
        dependencies = [
          {
            name = "asynchronous-codec";
            packageId = "asynchronous-codec 0.7.0";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "quick-protobuf";
            packageId = "quick-protobuf";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint 0.8.0";
            features = [ "std" ];
          }
        ];

      };
      "quickcheck" = rec {
        crateName = "quickcheck";
        version = "1.0.3";
        edition = "2018";
        sha256 = "1mjhkfqwrb8mdyxdqr4zzbj1rm5dfx25n9zcc25lb6fxwiw673sq";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "env_logger";
            packageId = "env_logger 0.8.4";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "getrandom" "small_rng" ];
          }
        ];
        features = {
          "default" = [ "regex" "use_logging" ];
          "env_logger" = [ "dep:env_logger" ];
          "log" = [ "dep:log" ];
          "regex" = [ "env_logger/regex" ];
          "use_logging" = [ "log" "env_logger" ];
        };
        resolvedDefaultFeatures = [ "default" "env_logger" "log" "regex" "use_logging" ];
      };
      "quickcheck_macros" = rec {
        crateName = "quickcheck_macros";
        version = "1.1.0";
        edition = "2021";
        sha256 = "0jn17bziphar3kmn2kw445a2vba1p3wycarnsf49ligq8a5y67pp";
        procMacro = true;
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "quinn" = rec {
        crateName = "quinn";
        version = "0.11.6";
        edition = "2021";
        sha256 = "1vq55p4kfc4zjxj58xrpf3kcjjqi4mn0wf52a5rzkiky4w46isb2";
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "quinn-proto";
            packageId = "quinn-proto";
            rename = "proto";
            usesDefaultFeatures = false;
          }
          {
            name = "quinn-udp";
            packageId = "quinn-udp";
            rename = "udp";
            usesDefaultFeatures = false;
            features = [ "tracing" ];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 2.1.1";
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "socket2";
            packageId = "socket2";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" "rt" "rt-multi-thread" "time" "macros" ];
          }
        ];
        features = {
          "async-io" = [ "dep:async-io" ];
          "async-std" = [ "dep:async-std" ];
          "aws-lc-rs" = [ "proto/aws-lc-rs" ];
          "aws-lc-rs-fips" = [ "proto/aws-lc-rs-fips" ];
          "default" = [ "log" "platform-verifier" "runtime-tokio" "rustls-ring" ];
          "futures-io" = [ "dep:futures-io" ];
          "log" = [ "tracing/log" "proto/log" "udp/log" ];
          "platform-verifier" = [ "proto/platform-verifier" ];
          "ring" = [ "proto/ring" ];
          "runtime-async-std" = [ "async-io" "async-std" ];
          "runtime-smol" = [ "async-io" "smol" ];
          "runtime-tokio" = [ "tokio/time" "tokio/rt" "tokio/net" ];
          "rustls" = [ "rustls-ring" ];
          "rustls-aws-lc-rs" = [ "dep:rustls" "aws-lc-rs" "proto/rustls-aws-lc-rs" "proto/aws-lc-rs" ];
          "rustls-aws-lc-rs-fips" = [ "dep:rustls" "aws-lc-rs-fips" "proto/rustls-aws-lc-rs-fips" "proto/aws-lc-rs-fips" ];
          "rustls-log" = [ "rustls?/logging" ];
          "rustls-ring" = [ "dep:rustls" "ring" "proto/rustls-ring" "proto/ring" ];
          "smol" = [ "dep:smol" ];
        };
        resolvedDefaultFeatures = [ "futures-io" "ring" "runtime-tokio" "rustls" "rustls-ring" ];
      };
      "quinn-proto" = rec {
        crateName = "quinn-proto";
        version = "0.11.9";
        edition = "2021";
        sha256 = "0p8k3iqd0rcxc7b6m2yyijhw4bpfwa61lyzigwvjwzax97rmxzm2";
        libName = "quinn_proto";
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            usesDefaultFeatures = false;
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = [ "js" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "ring";
            packageId = "ring 0.17.14";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring 0.17.14";
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = [ "wasm32_unknown_unknown_js" ];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 2.1.1";
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = [ "web" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "alloc" "alloc" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "aws-lc-rs" = [ "dep:aws-lc-rs" "aws-lc-rs?/aws-lc-sys" "aws-lc-rs?/prebuilt-nasm" ];
          "aws-lc-rs-fips" = [ "aws-lc-rs" "aws-lc-rs?/fips" ];
          "default" = [ "rustls-ring" "log" ];
          "log" = [ "tracing/log" ];
          "platform-verifier" = [ "dep:rustls-platform-verifier" ];
          "ring" = [ "dep:ring" ];
          "rustls" = [ "rustls-ring" ];
          "rustls-aws-lc-rs" = [ "dep:rustls" "rustls?/aws-lc-rs" "aws-lc-rs" ];
          "rustls-aws-lc-rs-fips" = [ "rustls-aws-lc-rs" "aws-lc-rs-fips" ];
          "rustls-log" = [ "rustls?/logging" ];
          "rustls-ring" = [ "dep:rustls" "rustls?/ring" "ring" ];
        };
        resolvedDefaultFeatures = [ "ring" "rustls-ring" ];
      };
      "quinn-udp" = rec {
        crateName = "quinn-udp";
        version = "0.5.12";
        edition = "2021";
        sha256 = "0hm89bv7mm383lv2c8z5r9512pdgp1q26lsmazicajgrj6cm4kpf";
        libName = "quinn_udp";
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            target = { target, features }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_IO" "Win32_Networking_WinSock" ];
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases 0.2.1";
          }
        ];
        features = {
          "default" = [ "tracing" "log" ];
          "direct-log" = [ "dep:log" ];
          "log" = [ "tracing/log" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "tracing" ];
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.40";
        edition = "2018";
        sha256 = "1394cxjg6nwld82pzp2d4fp6pmaz32gai1zh9z5hvh0dawww118q";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "r-efi" = rec {
        crateName = "r-efi";
        version = "5.2.0";
        edition = "2018";
        sha256 = "1ig93jvpqyi87nc5kb6dri49p56q7r7qxrn8kfizmqkfj5nmyxkl";
        libName = "r_efi";
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "examples" = [ "native" ];
          "rustc-dep-of-std" = [ "compiler_builtins/rustc-dep-of-std" "core" ];
        };
      };
      "radium" = rec {
        crateName = "radium";
        version = "0.7.0";
        edition = "2018";
        sha256 = "02cxfi3ky3c4yhyqx9axqwhyaca804ws46nn4gc1imbk94nzycyw";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
          "myrrlyn <self@myrrlyn.dev>"
        ];

      };
      "rand 0.8.5" = rec {
        crateName = "rand";
        version = "0.8.5";
        edition = "2018";
        sha256 = "013l6931nn7gkc23jz5mm3qdhf93jjf0fg64nz2lp4i51qd8vbrl";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.3.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" "std_rng" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "libc" = [ "dep:libc" ];
          "log" = [ "dep:log" ];
          "packed_simd" = [ "dep:packed_simd" ];
          "rand_chacha" = [ "dep:rand_chacha" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" "rand_core/serde1" ];
          "simd_support" = [ "packed_simd" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "std_rng" = [ "rand_chacha" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "libc" "rand_chacha" "small_rng" "std" "std_rng" ];
      };
      "rand 0.9.1" = rec {
        crateName = "rand";
        version = "0.9.1";
        edition = "2021";
        sha256 = "15yxfcxbgmwba5cv7mjg9bhc1r5c9483dfcdfspg62x4jk8dkgwz";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.9.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.9.3";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "std_rng" "os_rng" "small_rng" "thread_rng" ];
          "log" = [ "dep:log" ];
          "os_rng" = [ "rand_core/os_rng" ];
          "serde" = [ "dep:serde" "rand_core/serde" ];
          "std" = [ "rand_core/std" "rand_chacha?/std" "alloc" ];
          "std_rng" = [ "dep:rand_chacha" ];
          "thread_rng" = [ "std" "std_rng" "os_rng" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "os_rng" "small_rng" "std" "std_rng" "thread_rng" ];
      };
      "rand_chacha 0.3.1" = rec {
        crateName = "rand_chacha";
        version = "0.3.1";
        edition = "2018";
        sha256 = "123x2adin558xbhvqb8w4f6syjsdkmqff8cxwhmjacpsl1ihmhg6";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rand_chacha 0.9.0" = rec {
        crateName = "rand_chacha";
        version = "0.9.0";
        edition = "2021";
        sha256 = "1jr5ygix7r60pz0s1cv3ms1f6pd1i9pcdmnxzzhjc3zn3mgjn0nk";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.9.3";
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.9.3";
            features = [ "os_rng" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "os_rng" = [ "rand_core/os_rng" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "ppv-lite86/std" "rand_core/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_core 0.3.1" = rec {
        crateName = "rand_core";
        version = "0.3.1";
        edition = "2015";
        sha256 = "0jzdgszfa4bliigiy4hi66k7fs3gfwi2qxn8vik84ph77fwdwvvs";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.4.2";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "serde1" = [ "rand_core/serde1" ];
          "std" = [ "rand_core/std" ];
        };
      };
      "rand_core 0.4.2" = rec {
        crateName = "rand_core";
        version = "0.4.2";
        edition = "2015";
        sha256 = "1p09ynysrq1vcdlmcqnapq4qakl2yd1ng3kxh3qscpx09k2a6cww";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "rand_core 0.6.4" = rec {
        crateName = "rand_core";
        version = "0.6.4";
        edition = "2018";
        sha256 = "0b4j2v4cb5krak1pv6kakv4sz6xcwbrmy2zckc32hsigbrwy82zc";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            optional = true;
          }
        ];
        features = {
          "getrandom" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_core 0.9.3" = rec {
        crateName = "rand_core";
        version = "0.9.3";
        edition = "2021";
        sha256 = "0f3xhf16yks5ic6kmgxcpv1ngdhp48mmfy4ag82i1wnwh8ws3ncr";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            optional = true;
          }
        ];
        features = {
          "os_rng" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "getrandom?/std" ];
        };
        resolvedDefaultFeatures = [ "os_rng" "std" ];
      };
      "rand_distr" = rec {
        crateName = "rand_distr";
        version = "0.4.3";
        edition = "2018";
        sha256 = "0cgfwg3z0pkqhrl0x90c77kx70r6g9z4m6fxq9v0h2ibr2dhpjrj";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "libm" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "std_rng" "std" "small_rng" ];
          }
        ];
        features = {
          "alloc" = [ "rand/alloc" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" "rand/serde1" ];
          "std" = [ "alloc" "rand/std" ];
          "std_math" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "rand_os" = rec {
        crateName = "rand_os";
        version = "0.1.3";
        edition = "2015";
        sha256 = "0wahppm0s64gkr2vmhcgwc0lij37in1lgfxg5rbgqlz0l5vgcxbv";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cloudabi";
            packageId = "cloudabi";
            target = { target, features }: ("cloudabi" == target."os" or null);
          }
          {
            name = "fuchsia-cprng";
            packageId = "fuchsia-cprng";
            target = { target, features }: ("fuchsia" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.4.2";
            features = [ "std" ];
          }
          {
            name = "rdrand";
            packageId = "rdrand";
            target = { target, features }: ("sgx" == target."env" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "wasm32-unknown-unknown");
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "minwindef" "ntsecapi" "winnt" ];
          }
        ];
        features = {
          "log" = [ "dep:log" ];
          "stdweb" = [ "dep:stdweb" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "wasm-bindgen" ];
      };
      "rand_pcg" = rec {
        crateName = "rand_pcg";
        version = "0.3.1";
        edition = "2018";
        sha256 = "0gn79wzs5b19iivybwa09wv4lhi4kbcqciasiqqynggnr8cd1jjr";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
        };
      };
      "rand_xorshift" = rec {
        crateName = "rand_xorshift";
        version = "0.3.0";
        edition = "2018";
        sha256 = "13vcag7gmqspzyabfl1gr9ykvxd2142q2agrj8dkyjmfqmgg4nyj";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
        };
      };
      "raw-cpuid" = rec {
        crateName = "raw-cpuid";
        version = "11.5.0";
        edition = "2018";
        crateBin = [];
        sha256 = "0ijix3jmc89k54ly82z2wqgv90kggr868ilsl5xrj9zd72w7mpy6";
        libName = "raw_cpuid";
        authors = [
          "Gerd Zellweger <mail@gerdzellweger.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
          }
        ];
        features = {
          "clap" = [ "dep:clap" ];
          "cli" = [ "display" "clap" ];
          "display" = [ "std" "termimad" "serde_json" "serialize" ];
          "serde" = [ "dep:serde" ];
          "serde_derive" = [ "dep:serde_derive" ];
          "serde_json" = [ "dep:serde_json" ];
          "serialize" = [ "serde" "serde_derive" ];
          "termimad" = [ "dep:termimad" ];
        };
      };
      "raw-scripts" = rec {
        crateName = "raw-scripts";
        version = "7.2.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/input-output-hk/partner-chains-smart-contracts.git";
          rev = "fc595d621a046623189c82137f9fb8b9e2d166bf";
          sha256 = "1lny8rrpgwsna6y3bbhfq8yay8hnjyrqrc8ayzlj60qr0izs9m6h";
        };
        libName = "raw_scripts";
        dependencies = [
          {
            name = "hex-literal";
            packageId = "hex-literal 0.4.1";
          }
        ];

      };
      "rawpointer" = rec {
        crateName = "rawpointer";
        version = "0.2.1";
        edition = "2015";
        sha256 = "1qy1qvj17yh957vhffnq6agq0brvylw27xgks171qrah75wmg8v0";
        authors = [
          "bluss"
        ];

      };
      "rayon" = rec {
        crateName = "rayon";
        version = "1.10.0";
        edition = "2021";
        sha256 = "1ylgnzwgllajalr4v00y4kj22klq2jbwllm70aha232iah0sc65l";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
          {
            name = "rayon-core";
            packageId = "rayon-core";
          }
        ];
        features = {
          "web_spin_lock" = [ "dep:wasm_sync" "rayon-core/web_spin_lock" ];
        };
      };
      "rayon-core" = rec {
        crateName = "rayon-core";
        version = "1.12.1";
        edition = "2021";
        links = "rayon-core";
        sha256 = "1qpwim68ai5h0j7axa8ai8z0payaawv3id0lrgkqmapx7lx8fr8l";
        libName = "rayon_core";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
        ];
        features = {
          "web_spin_lock" = [ "dep:wasm_sync" ];
        };
      };
      "rcgen" = rec {
        crateName = "rcgen";
        version = "0.11.3";
        edition = "2021";
        crateBin = [];
        sha256 = "1iivv3xycr9mjfmp522xjqj47nsl5amlzzsfpbxpvg53984g7i2j";
        dependencies = [
          {
            name = "pem";
            packageId = "pem";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring 0.16.20";
          }
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
          }
          {
            name = "yasna";
            packageId = "yasna";
            features = [ "time" "std" ];
          }
        ];
        features = {
          "default" = [ "pem" ];
          "pem" = [ "dep:pem" ];
          "x509-parser" = [ "dep:x509-parser" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "default" "pem" ];
      };
      "rdrand" = rec {
        crateName = "rdrand";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1cjq0kwx1bk7jx3kzyciiish5gqsj7620dm43dc52sr8fzmm9037";
        authors = [
          "Simonas Kazlauskas <rdrand@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "redox_syscall 0.2.16" = rec {
        crateName = "redox_syscall";
        version = "0.2.16";
        edition = "2018";
        sha256 = "16jicm96kjyzm802cxdd1k9jmcph0db1a4lhslcnhjsvhp0mhnpv";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
        ];

      };
      "redox_syscall 0.5.12" = rec {
        crateName = "redox_syscall";
        version = "0.5.12";
        edition = "2021";
        sha256 = "1by5k76jr4kjy37287ifn56dzw6jh6nrwnrjm29j615ayafcm3wj";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
          }
        ];
        features = {
          "core" = [ "dep:core" ];
          "default" = [ "userspace" ];
          "rustc-dep-of-std" = [ "core" "bitflags/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" "userspace" ];
      };
      "redox_users" = rec {
        crateName = "redox_users";
        version = "0.4.6";
        edition = "2021";
        sha256 = "0hya2cxx6hxmjfxzv9n8rjl5igpychav7zfi1f81pz6i4krry05s";
        authors = [
          "Jose Narvaez <goyox86@gmail.com>"
          "Wesley Hershberger <mggmugginsmc@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            features = [ "std" ];
          }
          {
            name = "libredox";
            packageId = "libredox";
            usesDefaultFeatures = false;
            features = [ "std" "call" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "auth" = [ "rust-argon2" "zeroize" ];
          "default" = [ "auth" ];
          "rust-argon2" = [ "dep:rust-argon2" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "ref-cast" = rec {
        crateName = "ref-cast";
        version = "1.0.24";
        edition = "2021";
        sha256 = "1kx57g118vs9sqi6d2dcxy6vp8jbx8n5hilmv1sacip9vc8y82ja";
        libName = "ref_cast";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "ref-cast-impl";
            packageId = "ref-cast-impl";
          }
        ];

      };
      "ref-cast-impl" = rec {
        crateName = "ref-cast-impl";
        version = "1.0.24";
        edition = "2021";
        sha256 = "1ir7dm7hpqqdgg60hlspsc1ck6wli7wa3xcqrsxz7wdz45f24r8i";
        procMacro = true;
        libName = "ref_cast_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "regalloc2 0.6.1" = rec {
        crateName = "regalloc2";
        version = "0.6.1";
        edition = "2018";
        sha256 = "08bn5l2akabc36g7dmw2kmcdlz4dwcvkrgcgc6fi86z1ra1m2lw0";
        authors = [
          "Chris Fallin <chris@cfallin.org>"
          "Mozilla SpiderMonkey Developers"
        ];
        dependencies = [
          {
            name = "fxhash";
            packageId = "fxhash";
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "slice-group-by";
            packageId = "slice-group-by";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = [ "union" ];
          }
        ];
        features = {
          "enable-serde" = [ "serde" ];
          "fuzzing" = [ "libfuzzer-sys" "checker" "trace-log" ];
          "libfuzzer-sys" = [ "dep:libfuzzer-sys" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "checker" "default" ];
      };
      "regalloc2 0.9.3" = rec {
        crateName = "regalloc2";
        version = "0.9.3";
        edition = "2018";
        sha256 = "19i94jyjma82hgyf5wj83zkqc5wnfxnh38k3lcj7m6w7ki9ns5dd";
        authors = [
          "Chris Fallin <chris@cfallin.org>"
          "Mozilla SpiderMonkey Developers"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.13.2";
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 1.1.0";
            usesDefaultFeatures = false;
          }
          {
            name = "slice-group-by";
            packageId = "slice-group-by";
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = [ "union" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "enable-serde" = [ "serde" ];
          "fuzzing" = [ "libfuzzer-sys" "checker" "trace-log" ];
          "libfuzzer-sys" = [ "dep:libfuzzer-sys" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "regex" = rec {
        crateName = "regex";
        version = "1.11.1";
        edition = "2021";
        sha256 = "148i41mzbx8bmq32hsj1q4karkzzx5m60qza6gdw4pdc9qdyyi5m";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-automata";
            packageId = "regex-automata 0.4.9";
            usesDefaultFeatures = false;
            features = [ "alloc" "syntax" "meta" "nfa-pikevm" ];
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.5";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "perf" "unicode" "regex-syntax/default" ];
          "logging" = [ "aho-corasick?/logging" "memchr?/logging" "regex-automata/logging" ];
          "perf" = [ "perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal" ];
          "perf-backtrack" = [ "regex-automata/nfa-backtrack" ];
          "perf-dfa" = [ "regex-automata/hybrid" ];
          "perf-dfa-full" = [ "regex-automata/dfa-build" "regex-automata/dfa-search" ];
          "perf-inline" = [ "regex-automata/perf-inline" ];
          "perf-literal" = [ "dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal" ];
          "perf-onepass" = [ "regex-automata/dfa-onepass" ];
          "std" = [ "aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode" ];
          "unicode-age" = [ "regex-automata/unicode-age" "regex-syntax/unicode-age" ];
          "unicode-bool" = [ "regex-automata/unicode-bool" "regex-syntax/unicode-bool" ];
          "unicode-case" = [ "regex-automata/unicode-case" "regex-syntax/unicode-case" ];
          "unicode-gencat" = [ "regex-automata/unicode-gencat" "regex-syntax/unicode-gencat" ];
          "unicode-perl" = [ "regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl" ];
          "unicode-script" = [ "regex-automata/unicode-script" "regex-syntax/unicode-script" ];
          "unicode-segment" = [ "regex-automata/unicode-segment" "regex-syntax/unicode-segment" ];
          "unstable" = [ "pattern" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "perf" "perf-backtrack" "perf-cache" "perf-dfa" "perf-inline" "perf-literal" "perf-onepass" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-automata 0.1.10" = rec {
        crateName = "regex-automata";
        version = "0.1.10";
        edition = "2015";
        sha256 = "0ci1hvbzhrfby5fdpf4ganhf7kla58acad9i1ff1p34dzdrhs8vc";
        libName = "regex_automata";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.6.29";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "fst" = [ "dep:fst" ];
          "regex-syntax" = [ "dep:regex-syntax" ];
          "std" = [ "regex-syntax" ];
          "transducer" = [ "std" "fst" ];
        };
        resolvedDefaultFeatures = [ "default" "regex-syntax" "std" ];
      };
      "regex-automata 0.4.9" = rec {
        crateName = "regex-automata";
        version = "0.4.9";
        edition = "2021";
        sha256 = "02092l8zfh3vkmk47yjc8d631zhhcd49ck2zr133prvd3z38v7l0";
        libName = "regex_automata";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid" ];
          "dfa" = [ "dfa-build" "dfa-search" "dfa-onepass" ];
          "dfa-build" = [ "nfa-thompson" "dfa-search" ];
          "dfa-onepass" = [ "nfa-thompson" ];
          "hybrid" = [ "alloc" "nfa-thompson" ];
          "internal-instrument" = [ "internal-instrument-pikevm" ];
          "internal-instrument-pikevm" = [ "logging" "std" ];
          "logging" = [ "dep:log" "aho-corasick?/logging" "memchr?/logging" ];
          "meta" = [ "syntax" "nfa-pikevm" ];
          "nfa" = [ "nfa-thompson" "nfa-pikevm" "nfa-backtrack" ];
          "nfa-backtrack" = [ "nfa-thompson" ];
          "nfa-pikevm" = [ "nfa-thompson" ];
          "nfa-thompson" = [ "alloc" ];
          "perf" = [ "perf-inline" "perf-literal" ];
          "perf-literal" = [ "perf-literal-substring" "perf-literal-multisubstring" ];
          "perf-literal-multisubstring" = [ "std" "dep:aho-corasick" ];
          "perf-literal-substring" = [ "aho-corasick?/perf-literal" "dep:memchr" ];
          "std" = [ "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc" ];
          "syntax" = [ "dep:regex-syntax" "alloc" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode" ];
          "unicode-age" = [ "regex-syntax?/unicode-age" ];
          "unicode-bool" = [ "regex-syntax?/unicode-bool" ];
          "unicode-case" = [ "regex-syntax?/unicode-case" ];
          "unicode-gencat" = [ "regex-syntax?/unicode-gencat" ];
          "unicode-perl" = [ "regex-syntax?/unicode-perl" ];
          "unicode-script" = [ "regex-syntax?/unicode-script" ];
          "unicode-segment" = [ "regex-syntax?/unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "alloc" "dfa-onepass" "dfa-search" "hybrid" "meta" "nfa-backtrack" "nfa-pikevm" "nfa-thompson" "perf-inline" "perf-literal" "perf-literal-multisubstring" "perf-literal-substring" "std" "syntax" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" ];
      };
      "regex-syntax 0.6.29" = rec {
        crateName = "regex-syntax";
        version = "0.6.29";
        edition = "2018";
        sha256 = "1qgj49vm6y3zn1hi09x91jvgkl2b1fiaq402skj83280ggfwcqpi";
        libName = "regex_syntax";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "default" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-syntax 0.8.5" = rec {
        crateName = "regex-syntax";
        version = "0.8.5";
        edition = "2021";
        sha256 = "0p41p3hj9ww7blnbwbj9h7rwxzxg0c1hvrdycgys8rxyhqqw859b";
        libName = "regex_syntax";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "resolv-conf" = rec {
        crateName = "resolv-conf";
        version = "0.7.4";
        edition = "2021";
        sha256 = "1qw8kbpn52nbc1b624x53jjnsjifqk0hpqv5fygwicc4qram2clm";
        libName = "resolv_conf";
        features = {
        };
        resolvedDefaultFeatures = [ "system" ];
      };
      "rfc6979" = rec {
        crateName = "rfc6979";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1chw95jgcfrysyzsq6a10b1j5qb7bagkx8h0wda4lv25in02mpgq";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
            usesDefaultFeatures = false;
            features = [ "reset" ];
          }
          {
            name = "subtle";
            packageId = "subtle 2.6.1";
            usesDefaultFeatures = false;
          }
        ];

      };
      "ring 0.16.20" = rec {
        crateName = "ring";
        version = "0.16.20";
        edition = "2018";
        links = "ring-asm";
        sha256 = "1z682xp7v38ayq9g9nkbhhfpj6ygralmlx7wdmsfv8rnw99cylrh";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("android" == target."os" or null) || ("linux" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (("android" == target."os" or null) || ("linux" == target."os" or null));
            features = [ "std" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            target = { target, features }: (("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("illumos" == target."os" or null) || ("netbsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("solaris" == target."os" or null));
            features = [ "std" ];
          }
          {
            name = "spin";
            packageId = "spin 0.5.2";
            usesDefaultFeatures = false;
            target = { target, features }: (("x86" == target."arch" or null) || ("x86_64" == target."arch" or null) || ((("aarch64" == target."arch" or null) || ("arm" == target."arch" or null)) && (("android" == target."os" or null) || ("fuchsia" == target."os" or null) || ("linux" == target."os" or null))));
          }
          {
            name = "untrusted";
            packageId = "untrusted 0.7.1";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."vendor" or null) && ("unknown" == target."os" or null) && ("" == target."env" or null));
            features = [ "Crypto" "Window" ];
          }
          {
            name = "winapi";
            packageId = "winapi";
            usesDefaultFeatures = false;
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "ntsecapi" "wtypesbase" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {target, features}: ((target."unix" or false) || (target."windows" or false));
          }
        ];
        features = {
          "default" = [ "alloc" "dev_urandom_fallback" ];
          "dev_urandom_fallback" = [ "once_cell" ];
          "once_cell" = [ "dep:once_cell" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "dev_urandom_fallback" "once_cell" ];
      };
      "ring 0.17.14" = rec {
        crateName = "ring";
        version = "0.17.14";
        edition = "2021";
        links = "ring_core_0_17_14_";
        sha256 = "1dw32gv19ccq4hsx3ribhpdzri1vnrlcfqb2vj41xn4l49n9ws54";
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            usesDefaultFeatures = false;
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((("aarch64" == target."arch" or null) && ("little" == target."endian" or null)) && ("apple" == target."vendor" or null) && (("ios" == target."os" or null) || ("macos" == target."os" or null) || ("tvos" == target."os" or null) || ("visionos" == target."os" or null) || ("watchos" == target."os" or null)));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (((("aarch64" == target."arch" or null) && ("little" == target."endian" or null)) || (("arm" == target."arch" or null) && ("little" == target."endian" or null))) && (("android" == target."os" or null) || ("linux" == target."os" or null)));
          }
          {
            name = "untrusted";
            packageId = "untrusted 0.9.0";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: ((("aarch64" == target."arch" or null) && ("little" == target."endian" or null)) && ("windows" == target."os" or null));
            features = [ "Win32_Foundation" "Win32_System_Threading" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {target, features}: ((target."unix" or false) || (target."windows" or false) || ("wasi" == target."os" or null));
          }
        ];
        features = {
          "default" = [ "alloc" "dev_urandom_fallback" ];
          "std" = [ "alloc" ];
          "wasm32_unknown_unknown_js" = [ "getrandom/js" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "dev_urandom_fallback" "std" "wasm32_unknown_unknown_js" ];
      };
      "rocksdb" = rec {
        crateName = "rocksdb";
        version = "0.21.0";
        edition = "2018";
        sha256 = "1zlz55fkk55nln4jchifx9ishv3dj4a2w3abw060mma18051fvxv";
        authors = [
          "Tyler Neely <t@jujit.su>"
          "David Greenberg <dsg123456789@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "librocksdb-sys";
            packageId = "librocksdb-sys";
          }
        ];
        features = {
          "bzip2" = [ "librocksdb-sys/bzip2" ];
          "default" = [ "snappy" "lz4" "zstd" "zlib" "bzip2" ];
          "io-uring" = [ "librocksdb-sys/io-uring" ];
          "jemalloc" = [ "librocksdb-sys/jemalloc" ];
          "lz4" = [ "librocksdb-sys/lz4" ];
          "rtti" = [ "librocksdb-sys/rtti" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "snappy" = [ "librocksdb-sys/snappy" ];
          "zlib" = [ "librocksdb-sys/zlib" ];
          "zstd" = [ "librocksdb-sys/zstd" ];
        };
        resolvedDefaultFeatures = [ "jemalloc" "snappy" ];
      };
      "route-recognizer" = rec {
        crateName = "route-recognizer";
        version = "0.3.1";
        edition = "2018";
        sha256 = "0ikp3blbina00jdbifxw1c9whg6mljli24lq5pv82iar53xr9axg";
        libName = "route_recognizer";
        authors = [
          "wycats"
          "rustasync"
        ];

      };
      "rpassword" = rec {
        crateName = "rpassword";
        version = "7.4.0";
        edition = "2018";
        sha256 = "0ffzfff51pl95a7px9gwlz243mn3vxyw7klcxhhng7049yvcim36";
        authors = [
          "Conrad Kleinespel <conradk@conradk.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rtoolbox";
            packageId = "rtoolbox";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Console" "Win32_Storage_FileSystem" "Win32_Security" "Win32_System_SystemServices" ];
          }
        ];

      };
      "rsa" = rec {
        crateName = "rsa";
        version = "0.9.8";
        edition = "2021";
        sha256 = "06v9zl604jsqjajm647l9jjirn7k4lc8lmvys6hmqshpxp0qm4kq";
        authors = [
          "RustCrypto Developers"
          "dignifiedquire <dignifiedquire@gmail.com>"
        ];
        dependencies = [
          {
            name = "const-oid";
            packageId = "const-oid";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            usesDefaultFeatures = false;
            features = [ "alloc" "oid" ];
          }
          {
            name = "num-bigint-dig";
            packageId = "num-bigint-dig";
            rename = "num-bigint";
            usesDefaultFeatures = false;
            features = [ "i128" "prime" "zeroize" ];
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "libm" ];
          }
          {
            name = "pkcs1";
            packageId = "pkcs1";
            usesDefaultFeatures = false;
            features = [ "alloc" "pkcs8" ];
          }
          {
            name = "pkcs8";
            packageId = "pkcs8";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "signature";
            packageId = "signature";
            usesDefaultFeatures = false;
            features = [ "alloc" "digest" "rand_core" ];
          }
          {
            name = "spki";
            packageId = "spki";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "subtle";
            packageId = "subtle 2.6.1";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            features = [ "alloc" ];
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "pem" "u64_digit" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "nightly" = [ "num-bigint/nightly" ];
          "pem" = [ "pkcs1/pem" "pkcs8/pem" ];
          "pkcs5" = [ "pkcs8/encryption" ];
          "serde" = [ "dep:serde" "num-bigint/serde" ];
          "sha1" = [ "dep:sha1" ];
          "sha2" = [ "dep:sha2" ];
          "std" = [ "digest/std" "pkcs1/std" "pkcs8/std" "rand_core/std" "signature/std" ];
          "u64_digit" = [ "num-bigint/u64_digit" ];
        };
        resolvedDefaultFeatures = [ "default" "pem" "std" "u64_digit" ];
      };
      "rtnetlink" = rec {
        crateName = "rtnetlink";
        version = "0.13.1";
        edition = "2018";
        sha256 = "1h46w6knfvfa352b8fn4kbmlqhxa4fyqdxykxqxqrwqr5nw2wmbs";
        authors = [
          "Corentin Henry <corentinhenry@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "netlink-packet-core";
            packageId = "netlink-packet-core";
          }
          {
            name = "netlink-packet-route";
            packageId = "netlink-packet-route";
          }
          {
            name = "netlink-packet-utils";
            packageId = "netlink-packet-utils";
          }
          {
            name = "netlink-proto";
            packageId = "netlink-proto";
            usesDefaultFeatures = false;
          }
          {
            name = "netlink-sys";
            packageId = "netlink-sys";
          }
          {
            name = "nix";
            packageId = "nix";
            usesDefaultFeatures = false;
            features = [ "fs" "mount" "sched" "signal" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "rt" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "rt" "rt-multi-thread" ];
          }
        ];
        features = {
          "async-global-executor" = [ "dep:async-global-executor" ];
          "default" = [ "tokio_socket" ];
          "smol_socket" = [ "netlink-proto/smol_socket" "async-global-executor" ];
          "tokio" = [ "dep:tokio" ];
          "tokio_socket" = [ "netlink-proto/tokio_socket" "tokio" ];
        };
        resolvedDefaultFeatures = [ "tokio" "tokio_socket" ];
      };
      "rtoolbox" = rec {
        crateName = "rtoolbox";
        version = "0.0.3";
        edition = "2018";
        sha256 = "0vvz9p8wdzspwd7hk0cxyjr0i49cfqks5q02drym5glz4h5rgk57";
        authors = [
          "Conrad Kleinespel <conradk@conradk.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Security" "Win32_Storage_FileSystem" "Win32_System_Console" "Win32_System_SystemServices" ];
          }
        ];
        features = {
          "serde" = [ "dep:serde" "dep:serde_json" ];
        };
      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.24";
        edition = "2015";
        sha256 = "07zysaafgrkzy2rjgwqdj2a8qdpsm6zv6f5pgpk9x0lm40z9b6vi";
        libName = "rustc_demangle";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "rustc-hash 1.1.0" = rec {
        crateName = "rustc-hash";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1qkc5khrmv5pqi5l5ca9p5nl5hs742cagrndhbrlk3dhlrx3zm08";
        libName = "rustc_hash";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rustc-hash 2.1.1" = rec {
        crateName = "rustc-hash";
        version = "2.1.1";
        edition = "2021";
        sha256 = "03gz5lvd9ghcwsal022cgkq67dmimcgdjghfb5yb5d352ga06xrm";
        libName = "rustc_hash";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rand" = [ "dep:rand" "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rustc-hex" = rec {
        crateName = "rustc-hex";
        version = "2.1.0";
        edition = "2018";
        sha256 = "1mkjy2vbn5kzg67wgngwddlk4snmd8mkjkql2dzrzzfh6ajzcx9y";
        libName = "rustc_hex";
        authors = [
          "The Rust Project Developers"
          "debris <marek.kotewicz@gmail.com>"
          "Robert Habermeier"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rustc_version" = rec {
        crateName = "rustc_version";
        version = "0.4.1";
        edition = "2018";
        sha256 = "14lvdsmr5si5qbqzrajgb6vfn69k0sfygrvfvr2mps26xwi3mjyg";
        dependencies = [
          {
            name = "semver";
            packageId = "semver 1.0.26";
          }
        ];

      };
      "rusticata-macros" = rec {
        crateName = "rusticata-macros";
        version = "4.1.0";
        edition = "2018";
        sha256 = "0ch67lljmgl5pfrlb90bl5kkp2x6yby1qaxnpnd0p5g9xjkc9w7s";
        libName = "rusticata_macros";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];

      };
      "rustix 0.36.17" = rec {
        crateName = "rustix";
        version = "0.36.17";
        edition = "2018";
        sha256 = "1vf7p0ixq1vm537bv7zs6fq21dabk4vg3x8xa3mkjhfy9z8znpih";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
          "Jakub Konka <kubkon@jakubkonka.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || (("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("powerpc64" == target."arch" or null) || ("riscv64" == target."arch" or null) || ("mips" == target."arch" or null) || ("mips64" == target."arch" or null)))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || (("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("powerpc64" == target."arch" or null) || ("riscv64" == target."arch" or null) || ("mips" == target."arch" or null) || ("mips64" == target."arch" or null)))))));
          }
          {
            name = "io-lifetimes";
            packageId = "io-lifetimes";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "close" ];
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || (("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("powerpc64" == target."arch" or null) || ("riscv64" == target."arch" or null) || ("mips" == target."arch" or null) || ("mips64" == target."arch" or null)))));
            features = [ "extra_traits" ];
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || (("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("powerpc64" == target."arch" or null) || ("riscv64" == target."arch" or null) || ("mips" == target."arch" or null) || ("mips64" == target."arch" or null)))))));
            features = [ "extra_traits" ];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys 0.1.4";
            usesDefaultFeatures = false;
            target = { target, features }: ((("android" == target."os" or null) || ("linux" == target."os" or null)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || (("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("powerpc64" == target."arch" or null) || ("riscv64" == target."arch" or null) || ("mips" == target."arch" or null) || ("mips64" == target."arch" or null))))))));
            features = [ "general" "no_std" ];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys 0.1.4";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || (("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("powerpc64" == target."arch" or null) || ("riscv64" == target."arch" or null) || ("mips" == target."arch" or null) || ("mips64" == target."arch" or null)))));
            features = [ "general" "errno" "ioctl" "no_std" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.45.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_NetworkManagement_IpHelper" "Win32_System_Threading" ];
          }
        ];
        devDependencies = [
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
          }
          {
            name = "io-lifetimes";
            packageId = "io-lifetimes";
            usesDefaultFeatures = false;
            features = [ "close" ];
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "all-apis" = [ "fs" "io_uring" "mm" "net" "param" "process" "procfs" "rand" "runtime" "termios" "thread" "time" ];
          "all-impls" = [ "os_pipe" "fs-err" ];
          "alloc" = [ "dep:alloc" ];
          "cc" = [ "dep:cc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" "use-libc-auxv" ];
          "fs-err" = [ "io-lifetimes/fs-err" ];
          "io-lifetimes" = [ "dep:io-lifetimes" ];
          "io_uring" = [ "fs" "net" ];
          "itoa" = [ "dep:itoa" ];
          "libc" = [ "dep:libc" ];
          "libc_errno" = [ "dep:libc_errno" ];
          "once_cell" = [ "dep:once_cell" ];
          "os_pipe" = [ "io-lifetimes/os_pipe" ];
          "param" = [ "fs" ];
          "procfs" = [ "once_cell" "itoa" "fs" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "linux-raw-sys/rustc-dep-of-std" "bitflags/rustc-dep-of-std" ];
          "std" = [ "io-lifetimes" ];
          "use-libc" = [ "libc_errno" "libc" ];
          "use-libc-auxv" = [ "libc" ];
        };
        resolvedDefaultFeatures = [ "default" "fs" "io-lifetimes" "libc" "libc_errno" "mm" "param" "process" "std" "time" "use-libc" "use-libc-auxv" ];
      };
      "rustix 0.38.44" = rec {
        crateName = "rustix";
        version = "0.38.44";
        edition = "2021";
        sha256 = "0m61v0h15lf5rrnbjhcb9306bgqrhskrqv7i1n0939dsw8dbrdgx";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
          "Jakub Konka <kubkon@jakubkonka.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
            usesDefaultFeatures = false;
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || ("s390x" == target."arch" or null)) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || ("s390x" == target."arch" or null)) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || ("s390x" == target."arch" or null)) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || ("s390x" == target."arch" or null)) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys 0.4.15";
            usesDefaultFeatures = false;
            target = { target, features }: ((("android" == target."os" or null) || ("linux" == target."os" or null)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || ("s390x" == target."arch" or null)) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
            features = [ "general" "ioctl" "no_std" ];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys 0.4.15";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || ("s390x" == target."arch" or null)) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
            features = [ "general" "errno" "ioctl" "no_std" "elf" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_NetworkManagement_IpHelper" "Win32_System_Threading" ];
          }
        ];
        devDependencies = [
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "all-apis" = [ "event" "fs" "io_uring" "mm" "mount" "net" "param" "pipe" "process" "procfs" "pty" "rand" "runtime" "shm" "stdio" "system" "termios" "thread" "time" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" "use-libc-auxv" ];
          "io_uring" = [ "event" "fs" "net" "linux-raw-sys/io_uring" ];
          "itoa" = [ "dep:itoa" ];
          "libc" = [ "dep:libc" ];
          "libc-extra-traits" = [ "libc?/extra_traits" ];
          "libc_errno" = [ "dep:libc_errno" ];
          "linux_latest" = [ "linux_4_11" ];
          "net" = [ "linux-raw-sys/net" "linux-raw-sys/netlink" "linux-raw-sys/if_ether" "linux-raw-sys/xdp" ];
          "once_cell" = [ "dep:once_cell" ];
          "param" = [ "fs" ];
          "process" = [ "linux-raw-sys/prctl" ];
          "procfs" = [ "once_cell" "itoa" "fs" ];
          "pty" = [ "itoa" "fs" ];
          "runtime" = [ "linux-raw-sys/prctl" ];
          "rustc-dep-of-std" = [ "core" "rustc-std-workspace-alloc" "compiler_builtins" "linux-raw-sys/rustc-dep-of-std" "bitflags/rustc-dep-of-std" "compiler_builtins?/rustc-dep-of-std" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
          "shm" = [ "fs" ];
          "std" = [ "bitflags/std" "alloc" "libc?/std" "libc_errno?/std" "libc-extra-traits" ];
          "system" = [ "linux-raw-sys/system" ];
          "thread" = [ "linux-raw-sys/prctl" ];
          "use-libc" = [ "libc_errno" "libc" "libc-extra-traits" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "event" "fs" "libc-extra-traits" "net" "pipe" "process" "std" "time" "use-libc-auxv" ];
      };
      "rustix 1.0.7" = rec {
        crateName = "rustix";
        version = "1.0.7";
        edition = "2021";
        sha256 = "0rhjh16bnxi86nrn9qwcnw5632mvd5m1vdy61s4n9zz7mzb867n7";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
          "Jakub Konka <kubkon@jakubkonka.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
            usesDefaultFeatures = false;
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys 0.9.4";
            usesDefaultFeatures = false;
            target = { target, features }: ((("android" == target."os" or null) || ("linux" == target."os" or null)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
            features = [ "general" "ioctl" "no_std" ];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys 0.9.4";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
            features = [ "general" "errno" "ioctl" "no_std" "elf" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" ];
          }
        ];
        devDependencies = [
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "all-apis" = [ "event" "fs" "io_uring" "mm" "mount" "net" "param" "pipe" "process" "pty" "rand" "runtime" "shm" "stdio" "system" "termios" "thread" "time" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "io_uring" = [ "event" "fs" "net" "thread" "linux-raw-sys/io_uring" ];
          "libc" = [ "dep:libc" ];
          "libc_errno" = [ "dep:libc_errno" ];
          "linux_5_1" = [ "linux_4_11" ];
          "linux_5_11" = [ "linux_5_1" ];
          "linux_latest" = [ "linux_5_11" ];
          "net" = [ "linux-raw-sys/net" "linux-raw-sys/netlink" "linux-raw-sys/if_ether" "linux-raw-sys/xdp" ];
          "process" = [ "linux-raw-sys/prctl" ];
          "pty" = [ "fs" ];
          "runtime" = [ "linux-raw-sys/prctl" ];
          "rustc-dep-of-std" = [ "core" "rustc-std-workspace-alloc" "compiler_builtins" "linux-raw-sys/rustc-dep-of-std" "bitflags/rustc-dep-of-std" "compiler_builtins?/rustc-dep-of-std" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
          "shm" = [ "fs" ];
          "std" = [ "bitflags/std" "alloc" "libc?/std" "libc_errno?/std" ];
          "system" = [ "linux-raw-sys/system" ];
          "thread" = [ "linux-raw-sys/prctl" ];
          "use-libc" = [ "libc_errno" "libc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "fs" "std" "termios" ];
      };
      "rustls" = rec {
        crateName = "rustls";
        version = "0.23.27";
        edition = "2021";
        sha256 = "08d3nipyhmy4apksjyrb98s9k91wjyg1k7y0flx2671w135482bk";
        dependencies = [
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [ "alloc" "race" ];
          }
          {
            name = "ring";
            packageId = "ring 0.17.14";
            optional = true;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            features = [ "alloc" ];
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki 0.103.3";
            rename = "webpki";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "subtle";
            packageId = "subtle 2.6.1";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "aws-lc-rs" = [ "aws_lc_rs" ];
          "aws_lc_rs" = [ "dep:aws-lc-rs" "webpki/aws-lc-rs" "aws-lc-rs/aws-lc-sys" "aws-lc-rs/prebuilt-nasm" ];
          "brotli" = [ "dep:brotli" "dep:brotli-decompressor" "std" ];
          "default" = [ "aws_lc_rs" "logging" "prefer-post-quantum" "std" "tls12" ];
          "fips" = [ "aws_lc_rs" "aws-lc-rs?/fips" "webpki/aws-lc-rs-fips" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" ];
          "prefer-post-quantum" = [ "aws_lc_rs" ];
          "read_buf" = [ "rustversion" "std" ];
          "ring" = [ "dep:ring" "webpki/ring" ];
          "rustversion" = [ "dep:rustversion" ];
          "std" = [ "webpki/std" "pki-types/std" "once_cell/std" ];
          "zlib" = [ "dep:zlib-rs" ];
        };
        resolvedDefaultFeatures = [ "log" "logging" "ring" "std" "tls12" ];
      };
      "rustls-native-certs" = rec {
        crateName = "rustls-native-certs";
        version = "0.8.1";
        edition = "2021";
        sha256 = "1ls7laa3748mkn23fmi3g4mlwk131lx6chq2lyc8v2mmabfz5kvz";
        libName = "rustls_native_certs";
        dependencies = [
          {
            name = "openssl-probe";
            packageId = "openssl-probe";
            target = { target, features }: ((target."unix" or false) && (!("macos" == target."os" or null)));
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            features = [ "std" ];
          }
          {
            name = "schannel";
            packageId = "schannel";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "security-framework";
            packageId = "security-framework";
            target = { target, features }: ("macos" == target."os" or null);
          }
        ];

      };
      "rustls-pki-types" = rec {
        crateName = "rustls-pki-types";
        version = "1.12.0";
        edition = "2021";
        sha256 = "0yawbdpix8jif6s8zj1p2hbyb7y3bj66fhx0y7hyf4qh4964m6i2";
        libName = "rustls_pki_types";
        dependencies = [
          {
            name = "web-time";
            packageId = "web-time";
            optional = true;
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "dep:zeroize" ];
          "default" = [ "alloc" ];
          "std" = [ "alloc" ];
          "web" = [ "web-time" ];
          "web-time" = [ "dep:web-time" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" "web" "web-time" ];
      };
      "rustls-platform-verifier" = rec {
        crateName = "rustls-platform-verifier";
        version = "0.5.3";
        edition = "2021";
        sha256 = "1hdc6h6p89x7bz3jsxj9xj7wv1swg4qqpp238i0cb3j0fvd7qy0r";
        libName = "rustls_platform_verifier";type = [ "cdylib" "rlib" ];
        authors = [
          "ComplexSpaces <complexspacescode@gmail.com>"
          "1Password"
        ];
        dependencies = [
          {
            name = "core-foundation";
            packageId = "core-foundation 0.10.0";
            target = { target, features }: (("apple" == target."vendor" or null));
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            target = { target, features }: (("apple" == target."vendor" or null));
          }
          {
            name = "jni";
            packageId = "jni";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "jni";
            packageId = "jni";
            usesDefaultFeatures = false;
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustls-native-certs";
            packageId = "rustls-native-certs";
            target = { target, features }: ((target."unix" or false) && (!("android" == target."os" or null)) && (!("apple" == target."vendor" or null)) && (!("wasm32" == target."arch" or null)));
          }
          {
            name = "rustls-platform-verifier-android";
            packageId = "rustls-platform-verifier-android";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki 0.103.3";
            rename = "webpki";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) && (!("android" == target."os" or null)) && (!("apple" == target."vendor" or null)) && (!("wasm32" == target."arch" or null)));
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki 0.103.3";
            rename = "webpki";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki 0.103.3";
            rename = "webpki";
            usesDefaultFeatures = false;
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "security-framework";
            packageId = "security-framework";
            target = { target, features }: (("apple" == target."vendor" or null));
            features = [ "OSX_10_14" ];
          }
          {
            name = "security-framework-sys";
            packageId = "security-framework-sys";
            target = { target, features }: (("apple" == target."vendor" or null));
            features = [ "OSX_10_14" ];
          }
          {
            name = "webpki-root-certs";
            packageId = "webpki-root-certs 0.26.11";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Security_Cryptography" ];
          }
        ];
        devDependencies = [
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
            features = [ "ring" ];
          }
          {
            name = "webpki-root-certs";
            packageId = "webpki-root-certs 0.26.11";
            target = {target, features}: ("freebsd" == target."os" or null);
          }
        ];
        features = {
          "android_logger" = [ "dep:android_logger" ];
          "base64" = [ "dep:base64" ];
          "cert-logging" = [ "base64" ];
          "docsrs" = [ "jni" ];
          "ffi-testing" = [ "android_logger" "rustls/ring" ];
          "jni" = [ "dep:jni" ];
        };
      };
      "rustls-platform-verifier-android" = rec {
        crateName = "rustls-platform-verifier-android";
        version = "0.1.1";
        edition = "2021";
        sha256 = "13vq6sxsgz9547xm2zbdxiw8x7ad1g8n8ax6xvxsjqszk7q6awgq";
        libName = "rustls_platform_verifier_android";

      };
      "rustls-webpki 0.101.7" = rec {
        crateName = "rustls-webpki";
        version = "0.101.7";
        edition = "2021";
        sha256 = "0rapfhpkqp75552i8r0y7f4vq7csb4k7gjjans0df73sxv8paqlb";
        libName = "webpki";
        dependencies = [
          {
            name = "ring";
            packageId = "ring 0.17.14";
            usesDefaultFeatures = false;
          }
          {
            name = "untrusted";
            packageId = "untrusted 0.9.0";
          }
        ];
        features = {
          "alloc" = [ "ring/alloc" ];
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "rustls-webpki 0.103.3" = rec {
        crateName = "rustls-webpki";
        version = "0.103.3";
        edition = "2021";
        sha256 = "0ddl9qxx94iyichk05r7l30d9dxfd35ybffhsxpsr9pppki2z9z4";
        libName = "webpki";
        dependencies = [
          {
            name = "ring";
            packageId = "ring 0.17.14";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            usesDefaultFeatures = false;
          }
          {
            name = "untrusted";
            packageId = "untrusted 0.9.0";
          }
        ];
        features = {
          "alloc" = [ "ring?/alloc" "pki-types/alloc" ];
          "aws-lc-rs" = [ "dep:aws-lc-rs" "aws-lc-rs/aws-lc-sys" "aws-lc-rs/prebuilt-nasm" ];
          "aws-lc-rs-fips" = [ "dep:aws-lc-rs" "aws-lc-rs/fips" ];
          "default" = [ "std" ];
          "ring" = [ "dep:ring" ];
          "std" = [ "alloc" "pki-types/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "ring" "std" ];
      };
      "rustversion" = rec {
        crateName = "rustversion";
        version = "1.0.20";
        edition = "2018";
        sha256 = "1lhwjb16dsm8brd18bn2bh0ryzc7qi29bi2jjsc6ny2zbwn3ivgd";
        procMacro = true;
        build = "build/build.rs";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "rusty-fork" = rec {
        crateName = "rusty-fork";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0kxwq5c480gg6q0j3bg4zzyfh2kwmc3v2ba94jw8ncjc8mpcqgfb";
        libName = "rusty_fork";
        authors = [
          "Jason Lingle"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "quick-error";
            packageId = "quick-error";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "wait-timeout";
            packageId = "wait-timeout";
            optional = true;
          }
        ];
        features = {
          "default" = [ "timeout" ];
          "timeout" = [ "wait-timeout" ];
          "wait-timeout" = [ "dep:wait-timeout" ];
        };
        resolvedDefaultFeatures = [ "timeout" "wait-timeout" ];
      };
      "rw-stream-sink" = rec {
        crateName = "rw-stream-sink";
        version = "0.4.0";
        edition = "2021";
        sha256 = "18g9bxl1lb6har1f9i09zcdh10v32lzjig2vwjjkvwnjymph5jfq";
        libName = "rw_stream_sink";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];

      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.20";
        edition = "2018";
        sha256 = "07s855l8sb333h6bpn24pka5sp7hjk2w667xy6a0khkf6sqv5lr8";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "safe_arch" = rec {
        crateName = "safe_arch";
        version = "0.7.4";
        edition = "2018";
        sha256 = "08sk47n1kcm5w2di6bpgi2hsw8r2caz2230pwqvbdqfv5pl2vc4n";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
          }
        ];
        features = {
          "bytemuck" = [ "dep:bytemuck" ];
        };
        resolvedDefaultFeatures = [ "bytemuck" "default" ];
      };
      "same-file" = rec {
        crateName = "same-file";
        version = "1.0.6";
        edition = "2018";
        sha256 = "00h5j1w87dmhnvbv9l8bic3y7xxsnjmssvifw2ayvgx9mb1ivz4k";
        libName = "same_file";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "sc-allocator" = rec {
        crateName = "sc-allocator";
        version = "31.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_allocator";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-wasm-interface";
            packageId = "sp-wasm-interface";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "sc-basic-authorship" = rec {
        crateName = "sc-basic-authorship";
        version = "0.49.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_basic_authorship";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
          }
          {
            name = "sc-block-builder";
            packageId = "sc-block-builder";
          }
          {
            name = "sc-proposer-metrics";
            packageId = "sc-proposer-metrics";
          }
          {
            name = "sc-telemetry";
            packageId = "sc-telemetry";
          }
          {
            name = "sc-transaction-pool-api";
            packageId = "sc-transaction-pool-api";
          }
          {
            name = "sp-api";
            packageId = "sp-api";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-consensus";
            packageId = "sp-consensus";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "substrate-prometheus-endpoint";
            packageId = "substrate-prometheus-endpoint";
            rename = "prometheus-endpoint";
          }
        ];

      };
      "sc-block-builder" = rec {
        crateName = "sc-block-builder";
        version = "0.44.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_block_builder";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            features = [ "derive" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
          }
          {
            name = "sp-block-builder";
            packageId = "sp-block-builder";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "sp-trie";
            packageId = "sp-trie";
          }
        ];

      };
      "sc-chain-spec" = rec {
        crateName = "sc-chain-spec";
        version = "42.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_chain_spec";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "array-bytes";
            packageId = "array-bytes";
          }
          {
            name = "docify";
            packageId = "docify";
          }
          {
            name = "memmap2";
            packageId = "memmap2 0.9.5";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sc-chain-spec-derive";
            packageId = "sc-chain-spec-derive";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-executor";
            packageId = "sc-executor";
          }
          {
            name = "sc-network";
            packageId = "sc-network";
          }
          {
            name = "sc-telemetry";
            packageId = "sc-telemetry";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-crypto-hashing";
            packageId = "sp-crypto-hashing";
          }
          {
            name = "sp-genesis-builder";
            packageId = "sp-genesis-builder";
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "sp-state-machine";
            packageId = "sp-state-machine";
          }
          {
            name = "sp-tracing";
            packageId = "sp-tracing";
          }
        ];
        features = {
          "clap" = [ "dep:clap" ];
        };
      };
      "sc-chain-spec-derive" = rec {
        crateName = "sc-chain-spec-derive";
        version = "12.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        procMacro = true;
        libName = "sc_chain_spec_derive";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.3.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "sc-cli" = rec {
        crateName = "sc-cli";
        version = "0.51.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_cli";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "array-bytes";
            packageId = "array-bytes";
          }
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "string" "wrap_help" ];
          }
          {
            name = "fdlimit";
            packageId = "fdlimit";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "itertools";
            packageId = "itertools 0.11.0";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
            features = [ "ed25519" "peerid" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "names";
            packageId = "names";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-bip39";
            packageId = "parity-bip39";
            rename = "bip39";
            features = [ "rand" ];
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "rpassword";
            packageId = "rpassword";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-client-db";
            packageId = "sc-client-db";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-keystore";
            packageId = "sc-keystore";
          }
          {
            name = "sc-mixnet";
            packageId = "sc-mixnet";
          }
          {
            name = "sc-network";
            packageId = "sc-network";
          }
          {
            name = "sc-service";
            packageId = "sc-service";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-telemetry";
            packageId = "sc-telemetry";
          }
          {
            name = "sc-tracing";
            packageId = "sc-tracing";
          }
          {
            name = "sc-transaction-pool";
            packageId = "sc-transaction-pool";
          }
          {
            name = "sc-utils";
            packageId = "sc-utils";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-keyring";
            packageId = "sp-keyring";
          }
          {
            name = "sp-keystore";
            packageId = "sp-keystore";
          }
          {
            name = "sp-panic-handler";
            packageId = "sp-panic-handler";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "sp-version";
            packageId = "sp-version";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "parking_lot" "rt-multi-thread" "signal" ];
          }
        ];
        features = {
          "default" = [ "rocksdb" ];
          "rocksdb" = [ "sc-client-db/rocksdb" ];
        };
        resolvedDefaultFeatures = [ "rocksdb" ];
      };
      "sc-client-api" = rec {
        crateName = "sc-client-api";
        version = "39.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_client_api";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "sc-executor";
            packageId = "sc-executor";
          }
          {
            name = "sc-transaction-pool-api";
            packageId = "sc-transaction-pool-api";
          }
          {
            name = "sc-utils";
            packageId = "sc-utils";
          }
          {
            name = "sp-api";
            packageId = "sp-api";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-consensus";
            packageId = "sp-consensus";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-database";
            packageId = "sp-database";
          }
          {
            name = "sp-externalities";
            packageId = "sp-externalities";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-state-machine";
            packageId = "sp-state-machine";
          }
          {
            name = "sp-storage";
            packageId = "sp-storage";
          }
          {
            name = "sp-trie";
            packageId = "sp-trie";
          }
          {
            name = "substrate-prometheus-endpoint";
            packageId = "substrate-prometheus-endpoint";
            rename = "prometheus-endpoint";
          }
        ];

      };
      "sc-client-db" = rec {
        crateName = "sc-client-db";
        version = "0.46.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_client_db";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "hash-db";
            packageId = "hash-db";
          }
          {
            name = "kvdb";
            packageId = "kvdb";
          }
          {
            name = "kvdb-memorydb";
            packageId = "kvdb-memorydb";
          }
          {
            name = "kvdb-rocksdb";
            packageId = "kvdb-rocksdb";
            optional = true;
          }
          {
            name = "linked-hash-map";
            packageId = "linked-hash-map";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-db";
            packageId = "parity-db";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            features = [ "derive" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-state-db";
            packageId = "sc-state-db";
          }
          {
            name = "schnellru";
            packageId = "schnellru";
          }
          {
            name = "sp-arithmetic";
            packageId = "sp-arithmetic";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-database";
            packageId = "sp-database";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "sp-state-machine";
            packageId = "sp-state-machine";
          }
          {
            name = "sp-trie";
            packageId = "sp-trie";
          }
        ];
        devDependencies = [
          {
            name = "kvdb-rocksdb";
            packageId = "kvdb-rocksdb";
          }
        ];
        features = {
          "kvdb-rocksdb" = [ "dep:kvdb-rocksdb" ];
          "rocksdb" = [ "kvdb-rocksdb" ];
          "runtime-benchmarks" = [ "kitchensink-runtime/runtime-benchmarks" "sp-runtime/runtime-benchmarks" ];
        };
        resolvedDefaultFeatures = [ "kvdb-rocksdb" "rocksdb" "test-helpers" ];
      };
      "sc-consensus" = rec {
        crateName = "sc-consensus";
        version = "0.48.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_consensus";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "futures";
            packageId = "futures";
            features = [ "thread-pool" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mockall";
            packageId = "mockall";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-network-types";
            packageId = "sc-network-types";
          }
          {
            name = "sc-utils";
            packageId = "sc-utils";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-consensus";
            packageId = "sp-consensus";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "sp-state-machine";
            packageId = "sp-state-machine";
          }
          {
            name = "substrate-prometheus-endpoint";
            packageId = "substrate-prometheus-endpoint";
            rename = "prometheus-endpoint";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "sc-consensus-aura" = rec {
        crateName = "sc-consensus-aura";
        version = "0.49.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_consensus_aura";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
          }
          {
            name = "sc-block-builder";
            packageId = "sc-block-builder";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-consensus";
            packageId = "sc-consensus";
          }
          {
            name = "sc-consensus-slots";
            packageId = "sc-consensus-slots";
          }
          {
            name = "sc-telemetry";
            packageId = "sc-telemetry";
          }
          {
            name = "sp-api";
            packageId = "sp-api";
          }
          {
            name = "sp-application-crypto";
            packageId = "sp-application-crypto";
          }
          {
            name = "sp-block-builder";
            packageId = "sp-block-builder";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-consensus";
            packageId = "sp-consensus";
          }
          {
            name = "sp-consensus-aura";
            packageId = "sp-consensus-aura";
          }
          {
            name = "sp-consensus-slots";
            packageId = "sp-consensus-slots";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
          }
          {
            name = "sp-keystore";
            packageId = "sp-keystore";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "substrate-prometheus-endpoint";
            packageId = "substrate-prometheus-endpoint";
            rename = "prometheus-endpoint";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "sc-consensus-beefy" = rec {
        crateName = "sc-consensus-beefy";
        version = "28.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_consensus_beefy";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "array-bytes";
            packageId = "array-bytes";
          }
          {
            name = "async-channel";
            packageId = "async-channel";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            features = [ "derive" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-consensus";
            packageId = "sc-consensus";
          }
          {
            name = "sc-network";
            packageId = "sc-network";
          }
          {
            name = "sc-network-gossip";
            packageId = "sc-network-gossip";
          }
          {
            name = "sc-network-sync";
            packageId = "sc-network-sync";
          }
          {
            name = "sc-network-types";
            packageId = "sc-network-types";
          }
          {
            name = "sc-utils";
            packageId = "sc-utils";
          }
          {
            name = "sp-api";
            packageId = "sp-api";
          }
          {
            name = "sp-application-crypto";
            packageId = "sp-application-crypto";
          }
          {
            name = "sp-arithmetic";
            packageId = "sp-arithmetic";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-consensus";
            packageId = "sp-consensus";
          }
          {
            name = "sp-consensus-beefy";
            packageId = "sp-consensus-beefy";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-keystore";
            packageId = "sp-keystore";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "substrate-prometheus-endpoint";
            packageId = "substrate-prometheus-endpoint";
            rename = "prometheus-endpoint";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "wasm-timer";
            packageId = "wasm-timer";
          }
        ];
        features = {
          "bls-experimental" = [ "sp-application-crypto/bls-experimental" "sp-consensus-beefy/bls-experimental" "sp-core/bls-experimental" ];
        };
      };
      "sc-consensus-beefy-rpc" = rec {
        crateName = "sc-consensus-beefy-rpc";
        version = "28.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_consensus_beefy_rpc";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "client-core" "macros" "server-core" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            features = [ "derive" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "sc-consensus-beefy";
            packageId = "sc-consensus-beefy";
          }
          {
            name = "sc-rpc";
            packageId = "sc-rpc";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sp-application-crypto";
            packageId = "sp-application-crypto";
          }
          {
            name = "sp-consensus-beefy";
            packageId = "sp-consensus-beefy";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        devDependencies = [
          {
            name = "sc-rpc";
            packageId = "sc-rpc";
            features = [ "test-helpers" ];
          }
        ];

      };
      "sc-consensus-grandpa" = rec {
        crateName = "sc-consensus-grandpa";
        version = "0.34.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_consensus_grandpa";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
          }
          {
            name = "array-bytes";
            packageId = "array-bytes";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "dyn-clone";
            packageId = "dyn-clone";
          }
          {
            name = "finality-grandpa";
            packageId = "finality-grandpa";
            features = [ "derive-codec" ];
          }
          {
            name = "fork-tree";
            packageId = "fork-tree";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            features = [ "derive" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "sc-block-builder";
            packageId = "sc-block-builder";
          }
          {
            name = "sc-chain-spec";
            packageId = "sc-chain-spec";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-consensus";
            packageId = "sc-consensus";
          }
          {
            name = "sc-network";
            packageId = "sc-network";
          }
          {
            name = "sc-network-common";
            packageId = "sc-network-common";
          }
          {
            name = "sc-network-gossip";
            packageId = "sc-network-gossip";
          }
          {
            name = "sc-network-sync";
            packageId = "sc-network-sync";
          }
          {
            name = "sc-network-types";
            packageId = "sc-network-types";
          }
          {
            name = "sc-telemetry";
            packageId = "sc-telemetry";
          }
          {
            name = "sc-transaction-pool-api";
            packageId = "sc-transaction-pool-api";
          }
          {
            name = "sc-utils";
            packageId = "sc-utils";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sp-api";
            packageId = "sp-api";
          }
          {
            name = "sp-application-crypto";
            packageId = "sp-application-crypto";
          }
          {
            name = "sp-arithmetic";
            packageId = "sp-arithmetic";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-consensus";
            packageId = "sp-consensus";
          }
          {
            name = "sp-consensus-grandpa";
            packageId = "sp-consensus-grandpa";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-crypto-hashing";
            packageId = "sp-crypto-hashing";
          }
          {
            name = "sp-keystore";
            packageId = "sp-keystore";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "substrate-prometheus-endpoint";
            packageId = "substrate-prometheus-endpoint";
            rename = "prometheus-endpoint";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        devDependencies = [
          {
            name = "finality-grandpa";
            packageId = "finality-grandpa";
            features = [ "derive-codec" "test-helpers" ];
          }
          {
            name = "sc-network";
            packageId = "sc-network";
          }
        ];

      };
      "sc-consensus-grandpa-rpc" = rec {
        crateName = "sc-consensus-grandpa-rpc";
        version = "0.34.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_consensus_grandpa_rpc";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "finality-grandpa";
            packageId = "finality-grandpa";
            features = [ "derive-codec" ];
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "client-core" "macros" "server-core" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            features = [ "derive" ];
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-consensus-grandpa";
            packageId = "sc-consensus-grandpa";
          }
          {
            name = "sc-rpc";
            packageId = "sc-rpc";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        devDependencies = [
          {
            name = "sc-rpc";
            packageId = "sc-rpc";
            features = [ "test-helpers" ];
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
        ];

      };
      "sc-consensus-slots" = rec {
        crateName = "sc-consensus-slots";
        version = "0.48.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_consensus_slots";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-consensus";
            packageId = "sc-consensus";
          }
          {
            name = "sc-telemetry";
            packageId = "sc-telemetry";
          }
          {
            name = "sp-arithmetic";
            packageId = "sp-arithmetic";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-consensus";
            packageId = "sp-consensus";
          }
          {
            name = "sp-consensus-slots";
            packageId = "sp-consensus-slots";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "sp-state-machine";
            packageId = "sp-state-machine";
          }
        ];

      };
      "sc-executor" = rec {
        crateName = "sc-executor";
        version = "0.42.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_executor";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "sc-executor-common";
            packageId = "sc-executor-common";
          }
          {
            name = "sc-executor-polkavm";
            packageId = "sc-executor-polkavm";
          }
          {
            name = "sc-executor-wasmtime";
            packageId = "sc-executor-wasmtime";
          }
          {
            name = "schnellru";
            packageId = "schnellru";
          }
          {
            name = "sp-api";
            packageId = "sp-api";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-externalities";
            packageId = "sp-externalities";
          }
          {
            name = "sp-io";
            packageId = "sp-io";
          }
          {
            name = "sp-panic-handler";
            packageId = "sp-panic-handler";
          }
          {
            name = "sp-runtime-interface";
            packageId = "sp-runtime-interface";
          }
          {
            name = "sp-trie";
            packageId = "sp-trie";
          }
          {
            name = "sp-version";
            packageId = "sp-version";
          }
          {
            name = "sp-wasm-interface";
            packageId = "sp-wasm-interface";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "sp-api/std" "sp-core/std" "sp-externalities/std" "sp-io/std" "sp-runtime-interface/std" "sp-trie/std" "sp-version/std" "sp-wasm-interface/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sc-executor-common" = rec {
        crateName = "sc-executor-common";
        version = "0.38.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_executor_common";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "polkavm";
            packageId = "polkavm";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-allocator";
            packageId = "sc-allocator";
          }
          {
            name = "sp-maybe-compressed-blob";
            packageId = "sp-maybe-compressed-blob";
          }
          {
            name = "sp-wasm-interface";
            packageId = "sp-wasm-interface";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "wasm-instrument";
            packageId = "wasm-instrument";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "sc-executor-polkavm" = rec {
        crateName = "sc-executor-polkavm";
        version = "0.35.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_executor_polkavm";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "polkavm";
            packageId = "polkavm";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-executor-common";
            packageId = "sc-executor-common";
          }
          {
            name = "sp-wasm-interface";
            packageId = "sp-wasm-interface";
          }
        ];

      };
      "sc-executor-wasmtime" = rec {
        crateName = "sc-executor-wasmtime";
        version = "0.38.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_executor_wasmtime";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "rustix";
            packageId = "rustix 0.36.17";
            usesDefaultFeatures = false;
            features = [ "fs" "mm" "param" "std" "use-libc" ];
          }
          {
            name = "sc-allocator";
            packageId = "sc-allocator";
          }
          {
            name = "sc-executor-common";
            packageId = "sc-executor-common";
          }
          {
            name = "sp-runtime-interface";
            packageId = "sp-runtime-interface";
          }
          {
            name = "sp-wasm-interface";
            packageId = "sp-wasm-interface";
            features = [ "wasmtime" ];
          }
          {
            name = "wasmtime";
            packageId = "wasmtime";
            usesDefaultFeatures = false;
            features = [ "cache" "cranelift" "jitdump" "parallel-compilation" "pooling-allocator" ];
          }
        ];

      };
      "sc-informant" = rec {
        crateName = "sc-informant";
        version = "0.48.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_informant";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "console";
            packageId = "console";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-network";
            packageId = "sc-network";
          }
          {
            name = "sc-network-sync";
            packageId = "sc-network-sync";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
        ];

      };
      "sc-keystore" = rec {
        crateName = "sc-keystore";
        version = "35.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_keystore";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "array-bytes";
            packageId = "array-bytes";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sp-application-crypto";
            packageId = "sp-application-crypto";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-keystore";
            packageId = "sp-keystore";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "bandersnatch-experimental" = [ "sp-application-crypto/bandersnatch-experimental" "sp-core/bandersnatch-experimental" "sp-keystore/bandersnatch-experimental" ];
          "bls-experimental" = [ "sp-core/bls-experimental" "sp-keystore/bls-experimental" ];
        };
      };
      "sc-mixnet" = rec {
        crateName = "sc-mixnet";
        version = "0.19.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_mixnet";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "array-bytes";
            packageId = "array-bytes";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec 0.7.6";
          }
          {
            name = "blake2";
            packageId = "blake2 0.10.6";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mixnet";
            packageId = "mixnet";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-network";
            packageId = "sc-network";
          }
          {
            name = "sc-network-types";
            packageId = "sc-network-types";
          }
          {
            name = "sc-transaction-pool-api";
            packageId = "sc-transaction-pool-api";
          }
          {
            name = "sp-api";
            packageId = "sp-api";
          }
          {
            name = "sp-consensus";
            packageId = "sp-consensus";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-keystore";
            packageId = "sp-keystore";
          }
          {
            name = "sp-mixnet";
            packageId = "sp-mixnet";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "sc-network" = rec {
        crateName = "sc-network";
        version = "0.49.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_network";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "array-bytes";
            packageId = "array-bytes";
          }
          {
            name = "async-channel";
            packageId = "async-channel";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "asynchronous-codec";
            packageId = "asynchronous-codec 0.6.2";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "cid";
            packageId = "cid 0.9.0";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "ip_network";
            packageId = "ip_network";
          }
          {
            name = "libp2p";
            packageId = "libp2p";
            features = [ "dns" "identify" "kad" "macros" "mdns" "noise" "ping" "request-response" "tcp" "tokio" "websocket" "yamux" ];
          }
          {
            name = "linked_hash_set";
            packageId = "linked_hash_set";
          }
          {
            name = "litep2p";
            packageId = "litep2p";
            features = [ "websocket" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mockall";
            packageId = "mockall";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            features = [ "derive" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "partial_sort";
            packageId = "partial_sort";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "prost";
            packageId = "prost 0.12.6";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-network-common";
            packageId = "sc-network-common";
          }
          {
            name = "sc-network-types";
            packageId = "sc-network-types";
          }
          {
            name = "sc-utils";
            packageId = "sc-utils";
          }
          {
            name = "schnellru";
            packageId = "schnellru";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "sp-arithmetic";
            packageId = "sp-arithmetic";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "substrate-prometheus-endpoint";
            packageId = "substrate-prometheus-endpoint";
            rename = "prometheus-endpoint";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "sync" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint 0.7.2";
            features = [ "asynchronous_codec" "futures" ];
          }
          {
            name = "void";
            packageId = "void";
          }
          {
            name = "wasm-timer";
            packageId = "wasm-timer";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        buildDependencies = [
          {
            name = "prost-build";
            packageId = "prost-build";
          }
        ];
        devDependencies = [
          {
            name = "mockall";
            packageId = "mockall";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "rt-multi-thread" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "sc-network-common" = rec {
        crateName = "sc-network-common";
        version = "0.48.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_network_common";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            features = [ "derive" ];
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
        ];

      };
      "sc-network-gossip" = rec {
        crateName = "sc-network-gossip";
        version = "0.49.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_network_gossip";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "sc-network";
            packageId = "sc-network";
          }
          {
            name = "sc-network-common";
            packageId = "sc-network-common";
          }
          {
            name = "sc-network-sync";
            packageId = "sc-network-sync";
          }
          {
            name = "sc-network-types";
            packageId = "sc-network-types";
          }
          {
            name = "schnellru";
            packageId = "schnellru";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "substrate-prometheus-endpoint";
            packageId = "substrate-prometheus-endpoint";
            rename = "prometheus-endpoint";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "sc-network-light" = rec {
        crateName = "sc-network-light";
        version = "0.48.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_network_light";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "array-bytes";
            packageId = "array-bytes";
          }
          {
            name = "async-channel";
            packageId = "async-channel";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            features = [ "derive" ];
          }
          {
            name = "prost";
            packageId = "prost 0.12.6";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-network";
            packageId = "sc-network";
          }
          {
            name = "sc-network-types";
            packageId = "sc-network-types";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        buildDependencies = [
          {
            name = "prost-build";
            packageId = "prost-build";
          }
        ];

      };
      "sc-network-sync" = rec {
        crateName = "sc-network-sync";
        version = "0.48.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_network_sync";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "array-bytes";
            packageId = "array-bytes";
          }
          {
            name = "async-channel";
            packageId = "async-channel";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "fork-tree";
            packageId = "fork-tree";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mockall";
            packageId = "mockall";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            features = [ "derive" ];
          }
          {
            name = "prost";
            packageId = "prost 0.12.6";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-consensus";
            packageId = "sc-consensus";
          }
          {
            name = "sc-network";
            packageId = "sc-network";
          }
          {
            name = "sc-network-common";
            packageId = "sc-network-common";
          }
          {
            name = "sc-network-types";
            packageId = "sc-network-types";
          }
          {
            name = "sc-utils";
            packageId = "sc-utils";
          }
          {
            name = "schnellru";
            packageId = "schnellru";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "sp-arithmetic";
            packageId = "sp-arithmetic";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-consensus";
            packageId = "sp-consensus";
          }
          {
            name = "sp-consensus-grandpa";
            packageId = "sp-consensus-grandpa";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "substrate-prometheus-endpoint";
            packageId = "substrate-prometheus-endpoint";
            rename = "prometheus-endpoint";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "time" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
          }
        ];
        buildDependencies = [
          {
            name = "prost-build";
            packageId = "prost-build";
          }
        ];
        devDependencies = [
          {
            name = "mockall";
            packageId = "mockall";
          }
        ];

      };
      "sc-network-test" = rec {
        crateName = "sc-network-test";
        version = "0.8.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_network_test";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-channel";
            packageId = "async-channel";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "libp2p";
            packageId = "libp2p";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "sc-block-builder";
            packageId = "sc-block-builder";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-consensus";
            packageId = "sc-consensus";
          }
          {
            name = "sc-network";
            packageId = "sc-network";
          }
          {
            name = "sc-network-common";
            packageId = "sc-network-common";
          }
          {
            name = "sc-network-light";
            packageId = "sc-network-light";
          }
          {
            name = "sc-network-sync";
            packageId = "sc-network-sync";
          }
          {
            name = "sc-network-types";
            packageId = "sc-network-types";
          }
          {
            name = "sc-service";
            packageId = "sc-service";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-utils";
            packageId = "sc-utils";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-consensus";
            packageId = "sp-consensus";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "sp-tracing";
            packageId = "sp-tracing";
          }
          {
            name = "substrate-test-runtime";
            packageId = "substrate-test-runtime";
          }
          {
            name = "substrate-test-runtime-client";
            packageId = "substrate-test-runtime-client";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];

      };
      "sc-network-transactions" = rec {
        crateName = "sc-network-transactions";
        version = "0.48.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_network_transactions";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "array-bytes";
            packageId = "array-bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            features = [ "derive" ];
          }
          {
            name = "sc-network";
            packageId = "sc-network";
          }
          {
            name = "sc-network-common";
            packageId = "sc-network-common";
          }
          {
            name = "sc-network-sync";
            packageId = "sc-network-sync";
          }
          {
            name = "sc-network-types";
            packageId = "sc-network-types";
          }
          {
            name = "sc-utils";
            packageId = "sc-utils";
          }
          {
            name = "sp-consensus";
            packageId = "sp-consensus";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "substrate-prometheus-endpoint";
            packageId = "substrate-prometheus-endpoint";
            rename = "prometheus-endpoint";
          }
        ];

      };
      "sc-network-types" = rec {
        crateName = "sc-network-types";
        version = "0.15.3";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_network_types";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "bs58";
            packageId = "bs58";
          }
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
          }
          {
            name = "libp2p-identity";
            packageId = "libp2p-identity";
            features = [ "ed25519" "peerid" "rand" ];
          }
          {
            name = "libp2p-kad";
            packageId = "libp2p-kad";
            usesDefaultFeatures = false;
          }
          {
            name = "litep2p";
            packageId = "litep2p";
            features = [ "websocket" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "multiaddr";
            packageId = "multiaddr 0.18.2";
          }
          {
            name = "multihash";
            packageId = "multihash 0.19.3";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];

      };
      "sc-partner-chains-consensus-aura" = rec {
        crateName = "sc-partner-chains-consensus-aura";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./substrate-extensions/aura/consensus; };
        libName = "sc_partner_chains_consensus_aura";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "futures";
            packageId = "futures";
            features = [ "thread-pool" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-consensus";
            packageId = "sc-consensus";
          }
          {
            name = "sc-consensus-aura";
            packageId = "sc-consensus-aura";
          }
          {
            name = "sc-consensus-slots";
            packageId = "sc-consensus-slots";
          }
          {
            name = "sc-telemetry";
            packageId = "sc-telemetry";
          }
          {
            name = "sp-api";
            packageId = "sp-api";
          }
          {
            name = "sp-application-crypto";
            packageId = "sp-application-crypto";
          }
          {
            name = "sp-block-builder";
            packageId = "sp-block-builder";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-consensus";
            packageId = "sp-consensus";
          }
          {
            name = "sp-consensus-aura";
            packageId = "sp-consensus-aura";
          }
          {
            name = "sp-consensus-slots";
            packageId = "sp-consensus-slots";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
          }
          {
            name = "sp-keystore";
            packageId = "sp-keystore";
          }
          {
            name = "sp-partner-chains-consensus-aura";
            packageId = "sp-partner-chains-consensus-aura";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "sc-block-builder";
            packageId = "sc-block-builder";
          }
          {
            name = "sc-keystore";
            packageId = "sc-keystore";
          }
          {
            name = "sc-network";
            packageId = "sc-network";
          }
          {
            name = "sc-network-test";
            packageId = "sc-network-test";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-keyring";
            packageId = "sp-keyring";
          }
          {
            name = "sp-timestamp";
            packageId = "sp-timestamp";
          }
          {
            name = "sp-tracing";
            packageId = "sp-tracing";
          }
          {
            name = "substrate-test-runtime-client";
            packageId = "substrate-test-runtime-client";
            usesDefaultFeatures = false;
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" ];
          }
        ];

      };
      "sc-proposer-metrics" = rec {
        crateName = "sc-proposer-metrics";
        version = "0.20.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_proposer_metrics";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "substrate-prometheus-endpoint";
            packageId = "substrate-prometheus-endpoint";
            rename = "prometheus-endpoint";
          }
        ];

      };
      "sc-rpc" = rec {
        crateName = "sc-rpc";
        version = "44.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_rpc";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "server" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "sc-block-builder";
            packageId = "sc-block-builder";
          }
          {
            name = "sc-chain-spec";
            packageId = "sc-chain-spec";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-mixnet";
            packageId = "sc-mixnet";
          }
          {
            name = "sc-rpc-api";
            packageId = "sc-rpc-api";
          }
          {
            name = "sc-tracing";
            packageId = "sc-tracing";
          }
          {
            name = "sc-transaction-pool-api";
            packageId = "sc-transaction-pool-api";
          }
          {
            name = "sc-utils";
            packageId = "sc-utils";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sp-api";
            packageId = "sp-api";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-keystore";
            packageId = "sp-keystore";
          }
          {
            name = "sp-offchain";
            packageId = "sp-offchain";
          }
          {
            name = "sp-rpc";
            packageId = "sp-rpc";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "sp-session";
            packageId = "sp-session";
          }
          {
            name = "sp-statement-store";
            packageId = "sp-statement-store";
          }
          {
            name = "sp-version";
            packageId = "sp-version";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        devDependencies = [
          {
            name = "sc-block-builder";
            packageId = "sc-block-builder";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        features = {
        };
      };
      "sc-rpc-api" = rec {
        crateName = "sc-rpc-api";
        version = "0.48.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_rpc_api";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "client-core" "macros" "server-core" ];
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
          }
          {
            name = "sc-chain-spec";
            packageId = "sc-chain-spec";
          }
          {
            name = "sc-mixnet";
            packageId = "sc-mixnet";
          }
          {
            name = "sc-transaction-pool-api";
            packageId = "sc-transaction-pool-api";
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-rpc";
            packageId = "sp-rpc";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "sp-version";
            packageId = "sp-version";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "sc-rpc-server" = rec {
        crateName = "sc-rpc-server";
        version = "21.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_rpc_server";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "dyn-clone";
            packageId = "dyn-clone";
          }
          {
            name = "forwarded-header-value";
            packageId = "forwarded-header-value";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "governor";
            packageId = "governor";
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
            usesDefaultFeatures = false;
          }
          {
            name = "hyper";
            packageId = "hyper 1.6.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ip_network";
            packageId = "ip_network";
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "server" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "sc-rpc-api";
            packageId = "sc-rpc-api";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "substrate-prometheus-endpoint";
            packageId = "substrate-prometheus-endpoint";
            rename = "prometheus-endpoint";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "parking_lot" ];
          }
          {
            name = "tower";
            packageId = "tower";
            features = [ "util" ];
          }
          {
            name = "tower-http";
            packageId = "tower-http";
            features = [ "cors" ];
          }
        ];

      };
      "sc-rpc-spec-v2" = rec {
        crateName = "sc-rpc-spec-v2";
        version = "0.49.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_rpc_spec_v2";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "array-bytes";
            packageId = "array-bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "itertools";
            packageId = "itertools 0.11.0";
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "client-core" "macros" "server-core" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "sc-chain-spec";
            packageId = "sc-chain-spec";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-rpc";
            packageId = "sc-rpc";
          }
          {
            name = "sc-transaction-pool-api";
            packageId = "sc-transaction-pool-api";
          }
          {
            name = "schnellru";
            packageId = "schnellru";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "sp-api";
            packageId = "sp-api";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-rpc";
            packageId = "sp-rpc";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "sp-version";
            packageId = "sp-version";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            features = [ "sync" ];
          }
        ];
        devDependencies = [
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "server" "ws-client" ];
          }
          {
            name = "sc-rpc";
            packageId = "sc-rpc";
            features = [ "test-helpers" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" ];
          }
        ];

      };
      "sc-service" = rec {
        crateName = "sc-service";
        version = "0.50.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_service";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "directories";
            packageId = "directories";
          }
          {
            name = "exit-future";
            packageId = "exit-future";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "server" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "sc-chain-spec";
            packageId = "sc-chain-spec";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-client-db";
            packageId = "sc-client-db";
            usesDefaultFeatures = false;
          }
          {
            name = "sc-consensus";
            packageId = "sc-consensus";
          }
          {
            name = "sc-executor";
            packageId = "sc-executor";
          }
          {
            name = "sc-informant";
            packageId = "sc-informant";
          }
          {
            name = "sc-keystore";
            packageId = "sc-keystore";
          }
          {
            name = "sc-network";
            packageId = "sc-network";
          }
          {
            name = "sc-network-common";
            packageId = "sc-network-common";
          }
          {
            name = "sc-network-light";
            packageId = "sc-network-light";
          }
          {
            name = "sc-network-sync";
            packageId = "sc-network-sync";
          }
          {
            name = "sc-network-transactions";
            packageId = "sc-network-transactions";
          }
          {
            name = "sc-network-types";
            packageId = "sc-network-types";
          }
          {
            name = "sc-rpc";
            packageId = "sc-rpc";
          }
          {
            name = "sc-rpc-server";
            packageId = "sc-rpc-server";
          }
          {
            name = "sc-rpc-spec-v2";
            packageId = "sc-rpc-spec-v2";
          }
          {
            name = "sc-sysinfo";
            packageId = "sc-sysinfo";
          }
          {
            name = "sc-telemetry";
            packageId = "sc-telemetry";
          }
          {
            name = "sc-tracing";
            packageId = "sc-tracing";
          }
          {
            name = "sc-transaction-pool";
            packageId = "sc-transaction-pool";
          }
          {
            name = "sc-transaction-pool-api";
            packageId = "sc-transaction-pool-api";
          }
          {
            name = "sc-utils";
            packageId = "sc-utils";
          }
          {
            name = "schnellru";
            packageId = "schnellru";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sp-api";
            packageId = "sp-api";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-consensus";
            packageId = "sp-consensus";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-externalities";
            packageId = "sp-externalities";
          }
          {
            name = "sp-keystore";
            packageId = "sp-keystore";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "sp-session";
            packageId = "sp-session";
          }
          {
            name = "sp-state-machine";
            packageId = "sp-state-machine";
          }
          {
            name = "sp-storage";
            packageId = "sp-storage";
          }
          {
            name = "sp-transaction-pool";
            packageId = "sp-transaction-pool";
          }
          {
            name = "sp-transaction-storage-proof";
            packageId = "sp-transaction-storage-proof";
          }
          {
            name = "sp-trie";
            packageId = "sp-trie";
          }
          {
            name = "sp-version";
            packageId = "sp-version";
          }
          {
            name = "static_init";
            packageId = "static_init";
          }
          {
            name = "substrate-prometheus-endpoint";
            packageId = "substrate-prometheus-endpoint";
            rename = "prometheus-endpoint";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "parking_lot" "rt-multi-thread" "time" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-futures";
            packageId = "tracing-futures";
          }
        ];
        features = {
          "default" = [ "rocksdb" ];
          "rocksdb" = [ "sc-client-db/rocksdb" ];
          "runtime-benchmarks" = [ "sc-client-db/runtime-benchmarks" "sp-runtime/runtime-benchmarks" ];
        };
      };
      "sc-state-db" = rec {
        crateName = "sc-state-db";
        version = "0.38.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_state_db";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            features = [ "derive" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
        ];

      };
      "sc-sysinfo" = rec {
        crateName = "sc-sysinfo";
        version = "42.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_sysinfo";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "derive_more";
            packageId = "derive_more 0.99.20";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rand_pcg";
            packageId = "rand_pcg";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "sc-telemetry";
            packageId = "sc-telemetry";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-crypto-hashing";
            packageId = "sp-crypto-hashing";
          }
          {
            name = "sp-io";
            packageId = "sp-io";
          }
        ];

      };
      "sc-telemetry" = rec {
        crateName = "sc-telemetry";
        version = "28.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_telemetry";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "libp2p";
            packageId = "libp2p";
            features = [ "dns" "tcp" "tokio" "websocket" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "sc-utils";
            packageId = "sc-utils";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "wasm-timer";
            packageId = "wasm-timer";
          }
        ];

      };
      "sc-tracing" = rec {
        crateName = "sc-tracing";
        version = "39.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_tracing";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "console";
            packageId = "console";
          }
          {
            name = "is-terminal";
            packageId = "is-terminal";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 1.1.0";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-tracing-proc-macro";
            packageId = "sc-tracing-proc-macro";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "sp-api";
            packageId = "sp-api";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-rpc";
            packageId = "sp-rpc";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "sp-tracing";
            packageId = "sp-tracing";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            features = [ "env-filter" "parking_lot" ];
          }
        ];
        devDependencies = [
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            features = [ "chrono" "parking_lot" ];
          }
        ];

      };
      "sc-tracing-proc-macro" = rec {
        crateName = "sc-tracing-proc-macro";
        version = "11.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        procMacro = true;
        libName = "sc_tracing_proc_macro";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.3.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
            features = [ "proc-macro" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" "full" "parsing" "proc-macro" ];
          }
        ];

      };
      "sc-transaction-pool" = rec {
        crateName = "sc-transaction-pool";
        version = "39.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_transaction_pool";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.9.0";
          }
          {
            name = "itertools";
            packageId = "itertools 0.11.0";
          }
          {
            name = "linked-hash-map";
            packageId = "linked-hash-map";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-transaction-pool-api";
            packageId = "sc-transaction-pool-api";
          }
          {
            name = "sc-utils";
            packageId = "sc-utils";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-crypto-hashing";
            packageId = "sp-crypto-hashing";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "sp-tracing";
            packageId = "sp-tracing";
          }
          {
            name = "sp-transaction-pool";
            packageId = "sp-transaction-pool";
          }
          {
            name = "substrate-prometheus-endpoint";
            packageId = "substrate-prometheus-endpoint";
            rename = "prometheus-endpoint";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "time" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "rt-multi-thread" ];
          }
        ];

      };
      "sc-transaction-pool-api" = rec {
        crateName = "sc-transaction-pool-api";
        version = "39.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_transaction_pool_api";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.9.0";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "sc-utils" = rec {
        crateName = "sc-utils";
        version = "18.0.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sc_utils";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-channel";
            packageId = "async-channel";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-arithmetic";
            packageId = "sp-arithmetic";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "metered" ];
        };
        resolvedDefaultFeatures = [ "default" "metered" ];
      };
      "scale-bits" = rec {
        crateName = "scale-bits";
        version = "0.6.0";
        edition = "2021";
        sha256 = "0m6grlgzf55fr7fbvsgizmv6vmasfmysb1csww21zvb5ddziwyz5";
        libName = "scale_bits";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
          }
          {
            name = "scale-type-resolver";
            packageId = "scale-type-resolver";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "bit-vec" ];
          }
        ];
        features = {
          "default" = [ "std" "serde" "scale-info" ];
          "scale-info" = [ "dep:scale-info" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "scale-info?/std" "serde?/std" ];
        };
      };
      "scale-decode" = rec {
        crateName = "scale-decode";
        version = "0.13.1";
        edition = "2021";
        sha256 = "09svpznw85k5whavhbhw6c1ix10z9rqfn0mq1dq0xnahq9i353z9";
        libName = "scale_decode";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "derive_more";
            packageId = "derive_more 0.99.20";
            usesDefaultFeatures = false;
            features = [ "from" "display" ];
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-bits";
            packageId = "scale-bits";
            usesDefaultFeatures = false;
          }
          {
            name = "scale-type-resolver";
            packageId = "scale-type-resolver";
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];
        devDependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" "bit-vec" ];
          }
          {
            name = "scale-bits";
            packageId = "scale-bits";
            usesDefaultFeatures = false;
            features = [ "scale-info" ];
          }
          {
            name = "scale-type-resolver";
            packageId = "scale-type-resolver";
            usesDefaultFeatures = false;
            features = [ "scale-info" ];
          }
        ];
        features = {
          "default" = [ "std" "derive" "primitive-types" ];
          "derive" = [ "dep:scale-decode-derive" ];
          "primitive-types" = [ "dep:primitive-types" ];
        };
      };
      "scale-info" = rec {
        crateName = "scale-info";
        version = "2.11.6";
        edition = "2021";
        sha256 = "02sdd1yx0aic804zwwjvys8dxwq8dc2jfnfbm4bhsr52xcr3nsil";
        libName = "scale_info";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Centrality Developers <support@centrality.ai>"
        ];
        dependencies = [
          {
            name = "bitvec";
            packageId = "bitvec";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "derive_more";
            packageId = "derive_more 1.0.0";
            usesDefaultFeatures = false;
            features = [ "from" ];
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "scale";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info-derive";
            packageId = "scale-info-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
        ];
        devDependencies = [
          {
            name = "scale-info-derive";
            packageId = "scale-info-derive";
          }
        ];
        features = {
          "bit-vec" = [ "bitvec" ];
          "bitvec" = [ "dep:bitvec" ];
          "decode" = [ "scale/full" ];
          "default" = [ "std" ];
          "derive" = [ "scale-info-derive" ];
          "docs" = [ "scale-info-derive/docs" ];
          "scale-info-derive" = [ "dep:scale-info-derive" ];
          "schema" = [ "std" "schemars" ];
          "schemars" = [ "dep:schemars" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "bitvec?/std" "scale/std" ];
        };
        resolvedDefaultFeatures = [ "decode" "derive" "scale-info-derive" "serde" "std" ];
      };
      "scale-info-derive" = rec {
        crateName = "scale-info-derive";
        version = "2.11.6";
        edition = "2021";
        sha256 = "1gvyzvqvyzb7fv9waqj284cziflqi2r29d0zp5wj37kkpwj00qy6";
        procMacro = true;
        libName = "scale_info_derive";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Centrality Developers <support@centrality.ai>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.3.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "derive" "visit" "visit-mut" "extra-traits" ];
          }
        ];
        features = {
          "default" = [ "docs" ];
        };
      };
      "scale-type-resolver" = rec {
        crateName = "scale-type-resolver";
        version = "0.2.0";
        edition = "2021";
        sha256 = "1jxb28sz8d5dsnmznjqm1wprji3hpy0sr21bpv0xc2xa31jyvkgh";
        libName = "scale_type_resolver";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        features = {
          "default" = [ "scale-info" "visitor" ];
          "scale-info" = [ "dep:scale-info" ];
          "visitor" = [ "dep:smallvec" ];
        };
      };
      "schannel" = rec {
        crateName = "schannel";
        version = "0.1.27";
        edition = "2018";
        sha256 = "0gbbhy28v72kd5iina0z2vcdl3vz63mk5idvkzn5r52z6jmfna8z";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Steffen Butzer <steffen.butzer@outlook.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            features = [ "Win32_Foundation" "Win32_Security_Cryptography" "Win32_Security_Authentication_Identity" "Win32_Security_Credentials" "Win32_System_LibraryLoader" "Win32_System_Memory" "Win32_System_SystemInformation" ];
          }
        ];
        devDependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            features = [ "Win32_System_SystemInformation" "Win32_System_Time" ];
          }
        ];

      };
      "schemars" = rec {
        crateName = "schemars";
        version = "0.8.22";
        edition = "2021";
        sha256 = "05an9nbi18ynyxv1rjmwbg6j08j0496hd64mjggh53mwp3hjmgrz";
        authors = [
          "Graham Esau <gesau@hotmail.co.uk>"
        ];
        dependencies = [
          {
            name = "dyn-clone";
            packageId = "dyn-clone";
          }
          {
            name = "schemars_derive";
            packageId = "schemars_derive";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        features = {
          "arrayvec" = [ "arrayvec05" ];
          "arrayvec05" = [ "dep:arrayvec05" ];
          "arrayvec07" = [ "dep:arrayvec07" ];
          "bigdecimal" = [ "bigdecimal03" ];
          "bigdecimal03" = [ "dep:bigdecimal03" ];
          "bigdecimal04" = [ "dep:bigdecimal04" ];
          "bytes" = [ "dep:bytes" ];
          "chrono" = [ "dep:chrono" ];
          "default" = [ "derive" ];
          "derive" = [ "schemars_derive" ];
          "derive_json_schema" = [ "impl_json_schema" ];
          "either" = [ "dep:either" ];
          "enumset" = [ "dep:enumset" ];
          "impl_json_schema" = [ "derive" ];
          "indexmap" = [ "dep:indexmap" ];
          "indexmap1" = [ "indexmap" ];
          "indexmap2" = [ "dep:indexmap2" ];
          "preserve_order" = [ "indexmap" ];
          "raw_value" = [ "serde_json/raw_value" ];
          "rust_decimal" = [ "dep:rust_decimal" ];
          "schemars_derive" = [ "dep:schemars_derive" ];
          "semver" = [ "dep:semver" ];
          "smallvec" = [ "dep:smallvec" ];
          "smol_str" = [ "dep:smol_str" ];
          "url" = [ "dep:url" ];
          "uuid" = [ "uuid08" ];
          "uuid08" = [ "dep:uuid08" ];
          "uuid1" = [ "dep:uuid1" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "schemars_derive" ];
      };
      "schemars_derive" = rec {
        crateName = "schemars_derive";
        version = "0.8.22";
        edition = "2021";
        sha256 = "0kakyzrp5801s4i043l4ilv96lzimnlh01pap958h66n99w6bqij";
        procMacro = true;
        authors = [
          "Graham Esau <gesau@hotmail.co.uk>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "serde_derive_internals";
            packageId = "serde_derive_internals";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" ];
          }
        ];

      };
      "schnellru" = rec {
        crateName = "schnellru";
        version = "0.2.4";
        edition = "2021";
        sha256 = "0j8ngnis4qk1gncwpf2m5g4jlrrry0cbv5ifwpcn7skvy6xqaqim";
        authors = [
          "Jan Bujak <j@exia.io>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.13.2";
            usesDefaultFeatures = false;
            features = [ "raw" "inline-more" ];
          }
        ];
        features = {
          "default" = [ "runtime-rng" ];
          "runtime-rng" = [ "ahash/runtime-rng" ];
        };
        resolvedDefaultFeatures = [ "default" "runtime-rng" ];
      };
      "schnorrkel" = rec {
        crateName = "schnorrkel";
        version = "0.11.4";
        edition = "2021";
        sha256 = "187aa52b1msam04qb8w44l8w36cqq9zf1sjzbw2dgam0idnqzqcd";
        authors = [
          "Jeff Burdges <jeff@web3.foundation>"
        ];
        dependencies = [
          {
            name = "aead";
            packageId = "aead";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "arrayref";
            packageId = "arrayref";
            usesDefaultFeatures = false;
          }
          {
            name = "arrayvec";
            packageId = "arrayvec 0.7.6";
            usesDefaultFeatures = false;
          }
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            usesDefaultFeatures = false;
            features = [ "digest" "zeroize" "precomputed-tables" "legacy_compatibility" ];
          }
          {
            name = "getrandom_or_panic";
            packageId = "getrandom_or_panic";
            usesDefaultFeatures = false;
          }
          {
            name = "merlin";
            packageId = "merlin";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle 2.6.1";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        features = {
          "aead" = [ "dep:aead" ];
          "alloc" = [ "curve25519-dalek/alloc" "rand_core/alloc" "getrandom_or_panic/alloc" "serde_bytes/alloc" ];
          "asm" = [ "sha2/asm" ];
          "cfg-if" = [ "dep:cfg-if" ];
          "default" = [ "std" "getrandom" ];
          "failure" = [ "dep:failure" ];
          "getrandom" = [ "rand_core/getrandom" "getrandom_or_panic/getrandom" "aead?/getrandom" ];
          "serde" = [ "serde_crate" "serde_bytes" "cfg-if" ];
          "serde_bytes" = [ "dep:serde_bytes" ];
          "serde_crate" = [ "dep:serde_crate" ];
          "std" = [ "alloc" "getrandom" "serde_bytes/std" "rand_core/std" "getrandom_or_panic/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "preaudit_deprecated" "serde_bytes" "std" ];
      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.2.0";
        edition = "2015";
        sha256 = "0jcz9sd47zlsgcnm1hdw0664krxwb5gczlif4qngj2aif8vky54l";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "scratch" = rec {
        crateName = "scratch";
        version = "1.0.8";
        edition = "2015";
        sha256 = "0llahyff0cjjs9yklcgf7cxq6j29r3mlaym5dm9mkxg5hspq0qlz";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "sec1" = rec {
        crateName = "sec1";
        version = "0.7.3";
        edition = "2021";
        sha256 = "1p273j8c87pid6a1iyyc7vxbvifrw55wbxgr0dh3l8vnbxb7msfk";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base16ct";
            packageId = "base16ct";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "der";
            packageId = "der";
            optional = true;
            features = [ "oid" ];
          }
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "pkcs8";
            packageId = "pkcs8";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serdect";
            packageId = "serdect";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "subtle";
            packageId = "subtle 2.6.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "der?/alloc" "pkcs8?/alloc" "zeroize?/alloc" ];
          "default" = [ "der" "point" ];
          "der" = [ "dep:der" "zeroize" ];
          "pem" = [ "alloc" "der/pem" "pkcs8/pem" ];
          "pkcs8" = [ "dep:pkcs8" ];
          "point" = [ "dep:base16ct" "dep:generic-array" ];
          "serde" = [ "dep:serdect" ];
          "std" = [ "alloc" "der?/std" ];
          "subtle" = [ "dep:subtle" ];
          "zeroize" = [ "dep:zeroize" "der?/zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "der" "point" "serde" "std" "subtle" "zeroize" ];
      };
      "secp256k1 0.26.0" = rec {
        crateName = "secp256k1";
        version = "0.26.0";
        edition = "2018";
        sha256 = "152qlrpw07pqqimyxwh2jp7bjcls37x71zchqicl5q9swdgs6921";
        authors = [
          "Dawid Ciężarkiewicz <dpc@ucore.info>"
          "Andrew Poelstra <apoelstra@wpsoftware.net>"
        ];
        dependencies = [
          {
            name = "secp256k1-sys";
            packageId = "secp256k1-sys 0.8.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "secp256k1-sys/alloc" ];
          "bitcoin-hashes" = [ "bitcoin_hashes" ];
          "bitcoin-hashes-std" = [ "std" "bitcoin_hashes" "bitcoin_hashes/std" ];
          "bitcoin_hashes" = [ "dep:bitcoin_hashes" ];
          "default" = [ "std" ];
          "global-context" = [ "std" ];
          "global-context-less-secure" = [ "global-context" ];
          "lowmemory" = [ "secp256k1-sys/lowmemory" ];
          "rand" = [ "dep:rand" ];
          "rand-std" = [ "std" "rand" "rand/std" "rand/std_rng" ];
          "recovery" = [ "secp256k1-sys/recovery" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" "secp256k1-sys/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "secp256k1 0.28.2" = rec {
        crateName = "secp256k1";
        version = "0.28.2";
        edition = "2018";
        sha256 = "041g02yb5m0cf1yy9vhkszji4dq5z9927yx4mqhfmbfd578mjjyj";
        authors = [
          "Dawid Ciężarkiewicz <dpc@ucore.info>"
          "Andrew Poelstra <apoelstra@wpsoftware.net>"
        ];
        dependencies = [
          {
            name = "secp256k1-sys";
            packageId = "secp256k1-sys 0.9.2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "secp256k1-sys/alloc" ];
          "default" = [ "std" ];
          "global-context" = [ "std" ];
          "global-context-less-secure" = [ "global-context" ];
          "hashes" = [ "dep:hashes" ];
          "hashes-std" = [ "std" "hashes/std" ];
          "lowmemory" = [ "secp256k1-sys/lowmemory" ];
          "rand" = [ "dep:rand" ];
          "rand-std" = [ "std" "rand" "rand/std" "rand/std_rng" ];
          "recovery" = [ "secp256k1-sys/recovery" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" "secp256k1-sys/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "global-context" "recovery" "std" ];
      };
      "secp256k1 0.30.0" = rec {
        crateName = "secp256k1";
        version = "0.30.0";
        edition = "2021";
        sha256 = "0lhj9bj0ms35iswqm6sq4s5wg8qvcvr4kq45mwq83196sd1mj35m";
        authors = [
          "Dawid Ciężarkiewicz <dpc@ucore.info>"
          "Andrew Poelstra <apoelstra@wpsoftware.net>"
        ];
        dependencies = [
          {
            name = "bitcoin_hashes";
            packageId = "bitcoin_hashes 0.14.0";
            rename = "hashes";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "secp256k1-sys";
            packageId = "secp256k1-sys 0.10.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "secp256k1-sys/alloc" ];
          "default" = [ "std" ];
          "global-context" = [ "std" ];
          "global-context-less-secure" = [ "global-context" ];
          "hashes" = [ "dep:hashes" ];
          "lowmemory" = [ "secp256k1-sys/lowmemory" ];
          "rand" = [ "dep:rand" ];
          "recovery" = [ "secp256k1-sys/recovery" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" "secp256k1-sys/std" "rand?/std" "rand?/std_rng" "hashes?/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "global-context" "hashes" "std" ];
      };
      "secp256k1-sys 0.10.1" = rec {
        crateName = "secp256k1-sys";
        version = "0.10.1";
        edition = "2021";
        links = "rustsecp256k1_v0_10_0";
        sha256 = "1n81a1qhwxncvkv38bw36xwfjlipkb31f2jk435shfix6f17hf6l";
        libName = "secp256k1_sys";
        authors = [
          "Dawid Ciężarkiewicz <dpc@ucore.info>"
          "Andrew Poelstra <apoelstra@wpsoftware.net>"
          "Steven Roose <steven@stevenroose.org>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "secp256k1-sys 0.8.1" = rec {
        crateName = "secp256k1-sys";
        version = "0.8.1";
        edition = "2018";
        links = "rustsecp256k1_v0_8_1";
        sha256 = "0zm0kw4v8nn2p87h2zwwzpvwy4rvmg26749vfliv5gzgx6wjk8bh";
        libName = "secp256k1_sys";
        authors = [
          "Dawid Ciężarkiewicz <dpc@ucore.info>"
          "Andrew Poelstra <apoelstra@wpsoftware.net>"
          "Steven Roose <steven@stevenroose.org>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "secp256k1-sys 0.9.2" = rec {
        crateName = "secp256k1-sys";
        version = "0.9.2";
        edition = "2018";
        links = "rustsecp256k1_v0_9_2";
        sha256 = "1sxpzg4w1qzjlx8wal90ir4i1ngsddj8q6iw7ic9vha2mrm79lg5";
        libName = "secp256k1_sys";
        authors = [
          "Dawid Ciężarkiewicz <dpc@ucore.info>"
          "Andrew Poelstra <apoelstra@wpsoftware.net>"
          "Steven Roose <steven@stevenroose.org>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "recovery" "std" ];
      };
      "secrecy" = rec {
        crateName = "secrecy";
        version = "0.8.0";
        edition = "2018";
        sha256 = "07p9h2bpkkg61f1fzzdqqbf74kwv1gg095r1cdmjzzbcl17cblcv";
        authors = [
          "Tony Arcieri <tony@iqlusion.io>"
        ];
        dependencies = [
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "zeroize/alloc" ];
          "bytes" = [ "dep:bytes" ];
          "default" = [ "alloc" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "security-framework" = rec {
        crateName = "security-framework";
        version = "3.2.0";
        edition = "2021";
        sha256 = "05mkrddi9i18h9p098d0iimqv1xxz0wd8mbgpbvh9jj67x0205r7";
        libName = "security_framework";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation 0.10.0";
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "security-framework-sys";
            packageId = "security-framework-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "OSX_10_12" = [ "security-framework-sys/OSX_10_12" ];
          "OSX_10_13" = [ "OSX_10_12" "security-framework-sys/OSX_10_13" "alpn" "session-tickets" ];
          "OSX_10_14" = [ "OSX_10_13" "security-framework-sys/OSX_10_14" ];
          "OSX_10_15" = [ "OSX_10_14" "security-framework-sys/OSX_10_15" ];
          "default" = [ "OSX_10_12" ];
          "log" = [ "dep:log" ];
          "sync-keychain" = [ "OSX_10_13" ];
        };
        resolvedDefaultFeatures = [ "OSX_10_12" "OSX_10_13" "OSX_10_14" "alpn" "default" "session-tickets" ];
      };
      "security-framework-sys" = rec {
        crateName = "security-framework-sys";
        version = "2.14.0";
        edition = "2021";
        sha256 = "0chwn01qrnvs59i5220bymd38iddy4krbnmfnhf4k451aqfj7ns9";
        libName = "security_framework_sys";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "OSX_10_10" = [ "OSX_10_9" ];
          "OSX_10_11" = [ "OSX_10_10" ];
          "OSX_10_12" = [ "OSX_10_11" ];
          "OSX_10_13" = [ "OSX_10_12" ];
          "OSX_10_14" = [ "OSX_10_13" ];
          "OSX_10_15" = [ "OSX_10_14" ];
          "default" = [ "OSX_10_12" ];
        };
        resolvedDefaultFeatures = [ "OSX_10_10" "OSX_10_11" "OSX_10_12" "OSX_10_13" "OSX_10_14" "OSX_10_9" "default" ];
      };
      "selection" = rec {
        crateName = "selection";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/committee-selection/selection; };
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "rand";
            packageId = "rand 0.9.1";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.9.0";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "quickcheck";
            packageId = "quickcheck";
          }
          {
            name = "quickcheck_macros";
            packageId = "quickcheck_macros";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "rand/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "semver 0.6.0" = rec {
        crateName = "semver";
        version = "0.6.0";
        edition = "2015";
        sha256 = "0drmjiwkq0znj33q9x9hw7ld8f28n9diyjs3jlh1l1v5kvn8ccbs";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "semver-parser";
            packageId = "semver-parser";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "semver 1.0.26" = rec {
        crateName = "semver";
        version = "1.0.26";
        edition = "2018";
        sha256 = "1l5q2vb8fjkby657kdyfpvv40x2i2xqq9bg57pxqakfj92fgmrjn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "semver-parser" = rec {
        crateName = "semver-parser";
        version = "0.7.0";
        edition = "2015";
        sha256 = "18vhypw6zgccnrlm5ps1pwa0khz7ry927iznpr88b87cagr1v2iq";
        libName = "semver_parser";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
        ];

      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.219";
        edition = "2018";
        sha256 = "1dl6nyxnsi82a197sd752128a4avm6mxnscywas1jq30srp2q3jz";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "derive" "rc" "serde_derive" "std" ];
      };
      "serde-value" = rec {
        crateName = "serde-value";
        version = "0.7.0";
        edition = "2018";
        sha256 = "0b18ngk7n4f9zmwsfdkhgsp31192smzyl5z143qmx1qi28sa78gk";
        libName = "serde_value";
        authors = [
          "arcnmx"
        ];
        dependencies = [
          {
            name = "ordered-float";
            packageId = "ordered-float";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "serde-wasm-bindgen" = rec {
        crateName = "serde-wasm-bindgen";
        version = "0.4.5";
        edition = "2018";
        sha256 = "1gr8hrr2zx9wqq02vh5lmsyhyaf0agvapf42glq1940drlqw1d73";
        libName = "serde_wasm_bindgen";
        authors = [
          "Ingvar Stepanyan <me@rreverser.com>"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];

      };
      "serde_bytes" = rec {
        crateName = "serde_bytes";
        version = "0.11.17";
        edition = "2018";
        sha256 = "15kds0mw19lvm8ydd1qbharh5rz96zir06yn2silqbfy3cigsdw4";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "std" = [ "serde/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.219";
        edition = "2015";
        sha256 = "001azhjmj7ya52pmfiw4ppxm16nd44y15j2pf5gkcwrcgz7pc0jv";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "derive" "parsing" "printing" "proc-macro" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_derive_internals" = rec {
        crateName = "serde_derive_internals";
        version = "0.29.1";
        edition = "2015";
        sha256 = "04g7macx819vbnxhi52cx0nhxi56xlhrybgwybyy7fb9m4h6mlhq";
        libPath = "lib.rs";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "derive" "parsing" "printing" ];
          }
        ];

      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.140";
        edition = "2021";
        sha256 = "0wwkp4vc20r87081ihj3vpyz5qf7wqkqipq17v99nv6wjrp8n1i0";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "indexmap" = [ "dep:indexmap" ];
          "preserve_order" = [ "indexmap" "std" ];
          "std" = [ "memchr/std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "arbitrary_precision" "default" "raw_value" "std" "unbounded_depth" ];
      };
      "serde_spanned" = rec {
        crateName = "serde_spanned";
        version = "0.6.8";
        edition = "2021";
        sha256 = "1q89g70azwi4ybilz5jb8prfpa575165lmrffd49vmcf76qpqq47";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "serde_test" = rec {
        crateName = "serde_test";
        version = "1.0.177";
        edition = "2021";
        sha256 = "1vgisk4dgwdmz4prc2iwq8lddrp4pbqdbljk0h3b7dnafgjix43z";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "rc" ];
          }
        ];

      };
      "serde_urlencoded" = rec {
        crateName = "serde_urlencoded";
        version = "0.7.1";
        edition = "2018";
        sha256 = "1zgklbdaysj3230xivihs30qi5vkhigg323a9m62k8jwf4a1qjfk";
        authors = [
          "Anthony Ramine <n.oxyde@gmail.com>"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "serde_with" = rec {
        crateName = "serde_with";
        version = "1.14.0";
        edition = "2018";
        sha256 = "1zqjlc9ypm8y0r9bcgdhh62zcdn2yzfxh31dsbn01gshkq35m2v7";
        authors = [
          "Jonas Bushart"
          "Marcin Kaźmierczak"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_with_macros";
            packageId = "serde_with_macros";
            optional = true;
          }
        ];
        features = {
          "base64" = [ "base64_crate" ];
          "base64_crate" = [ "dep:base64_crate" ];
          "chrono" = [ "chrono_crate" ];
          "chrono_crate" = [ "dep:chrono_crate" ];
          "default" = [ "macros" ];
          "doc-comment" = [ "dep:doc-comment" ];
          "guide" = [ "doc-comment" "macros" ];
          "hex" = [ "dep:hex" ];
          "indexmap" = [ "indexmap_crate" ];
          "indexmap_crate" = [ "dep:indexmap_crate" ];
          "json" = [ "serde_json" ];
          "macros" = [ "serde_with_macros" ];
          "serde_json" = [ "dep:serde_json" ];
          "serde_with_macros" = [ "dep:serde_with_macros" ];
          "time_0_3" = [ "dep:time_0_3" ];
        };
        resolvedDefaultFeatures = [ "default" "macros" "serde_with_macros" ];
      };
      "serde_with_macros" = rec {
        crateName = "serde_with_macros";
        version = "1.5.2";
        edition = "2018";
        sha256 = "10l0rsy0k61nvpn1brcfvzp8yfnvsqdgh6zdwp03qf85dzndd0p1";
        procMacro = true;
        authors = [
          "Jonas Bushart"
        ];
        dependencies = [
          {
            name = "darling";
            packageId = "darling";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "parsing" ];
          }
        ];

      };
      "serde_yaml" = rec {
        crateName = "serde_yaml";
        version = "0.9.34+deprecated";
        edition = "2021";
        sha256 = "0isba1fjyg3l6rxk156k600ilzr8fp7crv82rhal0rxz5qd1m2va";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.9.0";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "unsafe-libyaml";
            packageId = "unsafe-libyaml";
          }
        ];

      };
      "serdect" = rec {
        crateName = "serdect";
        version = "0.2.0";
        edition = "2021";
        sha256 = "0xw1b6acw6nd0jchzyxzr97f0s4shbcqh92iyjwln0cskshi8kx8";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base16ct";
            packageId = "base16ct";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "base16ct/alloc" "serde/alloc" ];
          "default" = [ "alloc" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "sha1" = rec {
        crateName = "sha1";
        version = "0.10.6";
        edition = "2018";
        sha256 = "1fnnxlfg08xhkmwf2ahv634as30l1i3xhlhkvxflmasi5nd85gz3";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86" == target."arch" or null) || ("x86_64" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha1-asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha1-asm" = [ "dep:sha1-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha2 0.10.9" = rec {
        crateName = "sha2";
        version = "0.10.9";
        edition = "2018";
        sha256 = "10xjj843v31ghsksd9sl9y12qfc48157j1xpb8v1ml39jy0psl57";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" ];
          "asm-aarch64" = [ "asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha2-asm" = [ "dep:sha2-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha2 0.9.9" = rec {
        crateName = "sha2";
        version = "0.9.9";
        edition = "2018";
        sha256 = "006q2f0ar26xcjxqz8zsncfgz86zqa5dkwlwv03rhx1rpzhs2n2d";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer 0.9.0";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug 0.3.1";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.9.0";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" ];
          "asm-aarch64" = [ "asm" ];
          "default" = [ "std" ];
          "sha2-asm" = [ "dep:sha2-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha3" = rec {
        crateName = "sha3";
        version = "0.10.8";
        edition = "2018";
        sha256 = "0q5s3qlwnk8d5j34jya98j1v2p3009wdmnqdza3yydwgi8kjv1vm";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
          {
            name = "keccak";
            packageId = "keccak";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "keccak/asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "sharded-slab" = rec {
        crateName = "sharded-slab";
        version = "0.1.7";
        edition = "2018";
        sha256 = "1xipjr4nqsgw34k7a2cgj9zaasl2ds6jwn89886kww93d32a637l";
        libName = "sharded_slab";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        features = {
          "loom" = [ "dep:loom" ];
        };
      };
      "shlex" = rec {
        crateName = "shlex";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0r1y6bv26c1scpxvhg2cabimrmwgbp4p3wy6syj9n0c4s3q2znhg";
        authors = [
          "comex <comexk@gmail.com>"
          "Fenhl <fenhl@fenhl.net>"
          "Adrian Taylor <adetaylor@chromium.org>"
          "Alex Touchet <alextouchet@outlook.com>"
          "Daniel Parks <dp+git@oxidized.org>"
          "Garrett Berg <googberg@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sidechain-block-search" = rec {
        crateName = "sidechain-block-search";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/sidechain/sidechain-block-search; };
        libName = "sidechain_block_search";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" "std" ];
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" "std" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" "std" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-sidechain";
            packageId = "sp-sidechain";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "hex-literal";
            packageId = "hex-literal 1.0.0";
          }
          {
            name = "proptest";
            packageId = "proptest";
          }
          {
            name = "sp-consensus-aura";
            packageId = "sp-consensus-aura";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-consensus-slots";
            packageId = "sp-consensus-slots";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];

      };
      "sidechain-domain" = rec {
        crateName = "sidechain-domain";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/sidechain/domain; };
        libName = "sidechain_domain";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "bech32";
            packageId = "bech32 0.11.0";
            usesDefaultFeatures = false;
          }
          {
            name = "blake2b_simd";
            packageId = "blake2b_simd";
            usesDefaultFeatures = false;
          }
          {
            name = "byte-string-derive";
            packageId = "byte-string-derive";
            usesDefaultFeatures = false;
          }
          {
            name = "derive-where";
            packageId = "derive-where";
            usesDefaultFeatures = false;
          }
          {
            name = "derive_more";
            packageId = "derive_more 2.0.1";
            usesDefaultFeatures = false;
            features = [ "from" "from_str" "into" ];
          }
          {
            name = "ed25519-zebra";
            packageId = "ed25519-zebra";
            optional = true;
          }
          {
            name = "figment";
            packageId = "figment";
            optional = true;
            features = [ "env" "test" ];
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "k256";
            packageId = "k256";
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
            usesDefaultFeatures = false;
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "plutus";
            packageId = "plutus";
            usesDefaultFeatures = false;
          }
          {
            name = "plutus-datum-derive";
            packageId = "plutus-datum-derive";
            usesDefaultFeatures = false;
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "secp256k1";
            packageId = "secp256k1 0.30.0";
            usesDefaultFeatures = false;
            features = [ "hashes" "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-crypto-hashing";
            packageId = "sp-crypto-hashing";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-std";
            packageId = "sp-std";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "hex-literal";
            packageId = "hex-literal 1.0.0";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "ed25519-zebra" = [ "dep:ed25519-zebra" ];
          "figment" = [ "dep:figment" ];
          "serde" = [ "dep:serde" "scale-info/serde" "sp-core/serde" ];
          "std" = [ "serde/std" "sp-core/std" "parity-scale-codec/std" "scale-info/std" "num-bigint/std" "figment" "thiserror" "bech32/std" "sp-io/std" "secp256k1/std" "secp256k1/global-context" "ed25519-zebra" "ed25519-zebra/std" ];
          "thiserror" = [ "dep:thiserror" ];
        };
        resolvedDefaultFeatures = [ "default" "ed25519-zebra" "figment" "serde" "std" "thiserror" ];
      };
      "sidechain-mc-hash" = rec {
        crateName = "sidechain-mc-hash";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/sidechain/sidechain-mc-hash; };
        libName = "sidechain_mc_hash";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "derive-new";
            packageId = "derive-new";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus";
            packageId = "sp-consensus";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-slots";
            packageId = "sp-consensus-slots";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-partner-chains-consensus-aura";
            packageId = "sp-partner-chains-consensus-aura";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-timestamp";
            packageId = "sp-timestamp";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "derive-new";
            packageId = "derive-new";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" ];
          }
        ];
        features = {
          "derive-new" = [ "dep:derive-new" ];
          "mock" = [ "derive-new" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "derive-new" "mock" "serde" ];
      };
      "sidechain-slots" = rec {
        crateName = "sidechain-slots";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/sidechain/sidechain-slots; };
        libName = "sidechain_slots";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "envy";
            packageId = "envy";
            optional = true;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-slots";
            packageId = "sp-consensus-slots";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "proptest";
            packageId = "proptest";
          }
        ];
        features = {
          "default" = [ "std" ];
          "envy" = [ "dep:envy" ];
          "serde" = [ "dep:serde" "scale-info/serde" "sp-core/serde" ];
          "sp-blockchain" = [ "dep:sp-blockchain" ];
          "std" = [ "sidechain-domain/std" "scale-info/std" "sp-api/std" "sp-blockchain" "sp-core/std" "sp-consensus-slots/std" "envy" ];
        };
        resolvedDefaultFeatures = [ "default" "envy" "serde" "sp-blockchain" "std" ];
      };
      "signal-hook" = rec {
        crateName = "signal-hook";
        version = "0.3.18";
        edition = "2018";
        sha256 = "1qnnbq4g2vixfmlv28i1whkr0hikrf1bsc4xjy2aasj2yina30fq";
        libName = "signal_hook";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Thomas Himmelstoss <thimm@posteo.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
          }
        ];
        features = {
          "cc" = [ "dep:cc" ];
          "default" = [ "channel" "iterator" ];
          "extended-siginfo" = [ "channel" "iterator" "extended-siginfo-raw" ];
          "extended-siginfo-raw" = [ "cc" ];
          "iterator" = [ "channel" ];
        };
        resolvedDefaultFeatures = [ "channel" "default" "iterator" ];
      };
      "signal-hook-mio" = rec {
        crateName = "signal-hook-mio";
        version = "0.2.4";
        edition = "2018";
        sha256 = "1k8pl9aafiadr4czsg8zal9b4jdk6kq5985p90i19jc5sh31mnrl";
        libName = "signal_hook_mio";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Thomas Himmelstoss <thimm@posteo.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "mio";
            packageId = "mio 0.8.11";
            rename = "mio-0_8";
            optional = true;
            features = [ "net" "os-ext" ];
          }
          {
            name = "signal-hook";
            packageId = "signal-hook";
          }
        ];
        features = {
          "mio-0_6" = [ "dep:mio-0_6" ];
          "mio-0_7" = [ "dep:mio-0_7" ];
          "mio-0_8" = [ "dep:mio-0_8" ];
          "mio-1_0" = [ "dep:mio-1_0" ];
          "mio-uds" = [ "dep:mio-uds" ];
          "support-v0_6" = [ "mio-0_6" "mio-uds" ];
          "support-v0_7" = [ "mio-0_7" ];
          "support-v0_8" = [ "mio-0_8" ];
          "support-v1_0" = [ "mio-1_0" ];
        };
        resolvedDefaultFeatures = [ "mio-0_8" "support-v0_8" ];
      };
      "signal-hook-registry" = rec {
        crateName = "signal-hook-registry";
        version = "1.4.5";
        edition = "2015";
        sha256 = "042lkqrpnlrgvrrcirgigxyp1zk70d8v0fsr5w7a18k3bw2vh0wj";
        libName = "signal_hook_registry";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Masaki Hara <ackie.h.gmai@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "signature" = rec {
        crateName = "signature";
        version = "2.2.0";
        edition = "2021";
        sha256 = "1pi9hd5vqfr3q3k49k37z06p7gs5si0in32qia4mmr1dancr6m3p";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "derive" = [ "dep:derive" ];
          "digest" = [ "dep:digest" ];
          "rand_core" = [ "dep:rand_core" ];
          "std" = [ "alloc" "rand_core?/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "digest" "rand_core" "std" ];
      };
      "simba" = rec {
        crateName = "simba";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1yp0dfi2wgw0xkihfpav65hr52zym8bsw59ck2blf46d06jqd8xk";
        authors = [
          "sebcrozet <developer@crozet.re>"
        ];
        dependencies = [
          {
            name = "approx";
            packageId = "approx";
            usesDefaultFeatures = false;
          }
          {
            name = "num-complex";
            packageId = "num-complex";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "wide";
            packageId = "wide";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "cordic" = [ "dep:cordic" ];
          "decimal" = [ "dep:decimal" ];
          "default" = [ "std" ];
          "fixed" = [ "dep:fixed" ];
          "libm" = [ "num-traits/libm" ];
          "libm_force" = [ "dep:libm_force" ];
          "partial_fixed_point_support" = [ "fixed" "cordic" ];
          "portable_simd" = [ "std" ];
          "rand" = [ "dep:rand" ];
          "rkyv" = [ "dep:rkyv" ];
          "rkyv-serialize" = [ "rkyv" ];
          "serde" = [ "dep:serde" ];
          "serde_serialize" = [ "serde" "fixed/serde" ];
          "std" = [ "wide/std" ];
          "wide" = [ "dep:wide" ];
        };
        resolvedDefaultFeatures = [ "std" "wide" ];
      };
      "simple-dns" = rec {
        crateName = "simple-dns";
        version = "0.9.3";
        edition = "2021";
        sha256 = "0sm8r6x1azi4m7ga7zc19wihm0jy07l4667az8hkgbz7wp853s6y";
        libName = "simple_dns";
        authors = [
          "Ilson Roberto Balliego Junior <ilson.balliego@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
          }
        ];

      };
      "simple-mermaid" = rec {
        crateName = "simple-mermaid";
        version = "0.1.1";
        edition = "2021";
        sha256 = "061wrz7jr6fdw8ni5v52qywksf2gsi8syad98qfjn50fsx1is2k2";
        libName = "simple_mermaid";

      };
      "siphasher" = rec {
        crateName = "siphasher";
        version = "0.3.11";
        edition = "2018";
        sha256 = "03axamhmwsrmh0psdw3gf7c0zc4fyl5yjxfifz9qfka6yhkqid9q";
        authors = [
          "Frank Denis <github@pureftpd.org>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "serde_no_std" = [ "serde/alloc" ];
          "serde_std" = [ "std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.9";
        edition = "2018";
        sha256 = "0rxvsgir0qw5lkycrqgb1cxsvxzjv9bmx73bk5y42svnzfba94lg";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "slice-group-by" = rec {
        crateName = "slice-group-by";
        version = "0.3.1";
        edition = "2018";
        sha256 = "19vbyyxqvc25fv2dmhlxijlk5sa9j34yb6hyydb9vf89kh36fqc2";
        libName = "slice_group_by";
        authors = [
          "Kerollmops <renault.cle@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "1.15.0";
        edition = "2018";
        sha256 = "1sgfw8z729nlxk8k13dhs0a762wnaxmlx70a7xlf3wz989bjh5w9";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bincode" = [ "dep:bincode" ];
          "const_new" = [ "const_generics" ];
          "drain_keep_rest" = [ "drain_filter" ];
          "impl_bincode" = [ "bincode" "unty" ];
          "malloc_size_of" = [ "dep:malloc_size_of" ];
          "serde" = [ "dep:serde" ];
          "unty" = [ "dep:unty" ];
        };
        resolvedDefaultFeatures = [ "const_generics" "const_new" "serde" "union" ];
      };
      "snap" = rec {
        crateName = "snap";
        version = "1.1.1";
        edition = "2018";
        sha256 = "0fxw80m831l76a5zxcwmz2aq7mcwc1pp345pnljl4cv1kbxnfsqv";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];

      };
      "snow" = rec {
        crateName = "snow";
        version = "0.9.6";
        edition = "2018";
        sha256 = "119g3wk6pw27h7yj3dn3nim6f2fiqjny23w6mfw17rv8w2z4h2c5";
        authors = [
          "Jake McGinty <me@jakebot.org>"
          "trevp"
        ];
        dependencies = [
          {
            name = "aes-gcm";
            packageId = "aes-gcm";
            optional = true;
          }
          {
            name = "blake2";
            packageId = "blake2 0.10.6";
            optional = true;
          }
          {
            name = "chacha20poly1305";
            packageId = "chacha20poly1305";
            optional = true;
          }
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            optional = true;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            features = [ "std" "getrandom" ];
          }
          {
            name = "ring";
            packageId = "ring 0.17.14";
            optional = true;
            features = [ "std" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            optional = true;
          }
          {
            name = "subtle";
            packageId = "subtle 2.6.1";
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "aes-gcm" = [ "dep:aes-gcm" ];
          "blake2" = [ "dep:blake2" ];
          "byteorder" = [ "dep:byteorder" ];
          "chacha20poly1305" = [ "dep:chacha20poly1305" ];
          "curve25519-dalek" = [ "dep:curve25519-dalek" ];
          "default" = [ "default-resolver" ];
          "default-resolver" = [ "aes-gcm" "chacha20poly1305" "blake2" "sha2" "curve25519-dalek" ];
          "libsodium-accelerated" = [ "libsodium-resolver" "default-resolver" ];
          "libsodium-resolver" = [ "sodiumoxide" "byteorder" ];
          "nightly" = [ "blake2/simd_opt" "subtle/nightly" ];
          "pqclean_kyber1024" = [ "pqcrypto-kyber" "pqcrypto-traits" "hfs" "default-resolver" ];
          "pqcrypto-kyber" = [ "dep:pqcrypto-kyber" ];
          "pqcrypto-traits" = [ "dep:pqcrypto-traits" ];
          "ring" = [ "dep:ring" ];
          "ring-accelerated" = [ "ring-resolver" "default-resolver" ];
          "ring-resolver" = [ "ring" ];
          "sha2" = [ "dep:sha2" ];
          "sodiumoxide" = [ "dep:sodiumoxide" ];
          "xchachapoly" = [ "chacha20poly1305" "default-resolver" ];
        };
        resolvedDefaultFeatures = [ "aes-gcm" "blake2" "chacha20poly1305" "curve25519-dalek" "default-resolver" "ring" "ring-resolver" "sha2" ];
      };
      "socket2" = rec {
        crateName = "socket2";
        version = "0.5.9";
        edition = "2021";
        sha256 = "1vzds1wwwi0a51fn10r98j7cx3ir4shvhykpbk7md2h5h1ydapsg";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_System_IO" "Win32_System_Threading" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "all" ];
      };
      "soketto" = rec {
        crateName = "soketto";
        version = "0.8.1";
        edition = "2021";
        sha256 = "088phi0892rx9xjfakgvzlhgsls7zgvpspcgc24cnq6i57q9v19f";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Jason Ozias <jason.g.ozias@gmail.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
            features = [ "bilock" "std" "unstable" ];
          }
          {
            name = "http";
            packageId = "http 1.3.1";
            optional = true;
          }
          {
            name = "httparse";
            packageId = "httparse";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "std" "std_rng" ];
          }
          {
            name = "sha1";
            packageId = "sha1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "deflate" = [ "flate2" ];
          "flate2" = [ "dep:flate2" ];
          "http" = [ "dep:http" ];
        };
        resolvedDefaultFeatures = [ "default" "http" ];
      };
      "sp-api" = rec {
        crateName = "sp-api";
        version = "36.0.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_api";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "docify";
            packageId = "docify";
          }
          {
            name = "hash-db";
            packageId = "hash-db";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sp-api-proc-macro";
            packageId = "sp-api-proc-macro";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-externalities";
            packageId = "sp-externalities";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-metadata-ir";
            packageId = "sp-metadata-ir";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime-interface";
            packageId = "sp-runtime-interface";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-state-machine";
            packageId = "sp-state-machine";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-trie";
            packageId = "sp-trie";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-version";
            packageId = "sp-version";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "disable-logging" = [ "log/max_level_off" ];
          "frame-metadata" = [ "sp-metadata-ir" ];
          "hash-db" = [ "dep:hash-db" ];
          "no-metadata-docs" = [ "sp-api-proc-macro/no-metadata-docs" ];
          "sp-externalities" = [ "dep:sp-externalities" ];
          "sp-metadata-ir" = [ "dep:sp-metadata-ir" ];
          "sp-state-machine" = [ "dep:sp-state-machine" ];
          "sp-trie" = [ "dep:sp-trie" ];
          "std" = [ "codec/std" "hash-db" "log/std" "scale-info/std" "sp-api-proc-macro/std" "sp-core/std" "sp-externalities" "sp-externalities?/std" "sp-metadata-ir?/std" "sp-runtime-interface/std" "sp-runtime/std" "sp-state-machine/std" "sp-trie/std" "sp-version/std" "thiserror" ];
          "thiserror" = [ "dep:thiserror" ];
        };
        resolvedDefaultFeatures = [ "default" "frame-metadata" "hash-db" "sp-externalities" "sp-metadata-ir" "sp-state-machine" "sp-trie" "std" "thiserror" ];
      };
      "sp-api-proc-macro" = rec {
        crateName = "sp-api-proc-macro";
        version = "22.0.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        procMacro = true;
        libName = "sp_api_proc_macro";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "Inflector";
            packageId = "Inflector";
          }
          {
            name = "blake2";
            packageId = "blake2 0.10.6";
            usesDefaultFeatures = false;
          }
          {
            name = "expander";
            packageId = "expander";
          }
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.3.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" "fold" "full" "visit" "visit-mut" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "blake2/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "sp-application-crypto" = rec {
        crateName = "sp-application-crypto";
        version = "40.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_application_crypto";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bandersnatch-experimental" = [ "sp-core/bandersnatch-experimental" "sp-io/bandersnatch-experimental" ];
          "bls-experimental" = [ "sp-core/bls-experimental" "sp-io/bls-experimental" ];
          "default" = [ "std" ];
          "full_crypto" = [ "sp-core/full_crypto" "sp-io/disable_oom" "sp-io/disable_panic_handler" ];
          "serde" = [ "dep:serde" "scale-info/serde" "sp-core/serde" ];
          "std" = [ "codec/std" "full_crypto" "scale-info/std" "serde/std" "sp-core/std" "sp-io/std" ];
        };
        resolvedDefaultFeatures = [ "default" "full_crypto" "serde" "std" ];
      };
      "sp-arithmetic" = rec {
        crateName = "sp-arithmetic";
        version = "26.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_arithmetic";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "docify";
            packageId = "docify";
          }
          {
            name = "integer-sqrt";
            packageId = "integer-sqrt";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" "scale-info/serde" ];
          "std" = [ "codec/std" "num-traits/std" "scale-info/std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "sp-block-builder" = rec {
        crateName = "sp-block-builder";
        version = "36.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_block_builder";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "sp-api/std" "sp-inherents/std" "sp-runtime/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sp-block-participation" = rec {
        crateName = "sp-block-participation";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/block-participation/primitives; };
        libName = "sp_block_participation";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-slots";
            packageId = "sp-consensus-slots";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "pretty_assertions";
            packageId = "pretty_assertions";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "parity-scale-codec/std" "sp-inherents/std" "sp-runtime/std" "sp-runtime/std" "sp-api/std" "log/std" "sp-consensus-slots/std" "sidechain-domain/std" "scale-info/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sp-block-producer-fees" = rec {
        crateName = "sp-block-producer-fees";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/block-producer-fees/primitives; };
        libName = "sp_block_producer_fees";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-std";
            packageId = "sp-std";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "parity-scale-codec/std" "sp-api/std" "sp-std/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sp-block-producer-metadata" = rec {
        crateName = "sp-block-producer-metadata";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/block-producer-metadata/primitives; };
        libName = "sp_block_producer_metadata";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "k256";
            packageId = "k256";
            usesDefaultFeatures = false;
            features = [ "sha256" ];
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "hex-literal";
            packageId = "hex-literal 1.0.0";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "sidechain-domain/std" "k256/std" "sp-api/std" "parity-scale-codec/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sp-block-production-log" = rec {
        crateName = "sp-block-production-log";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/block-production-log/primitives; };
        libName = "sp_block_production_log";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "sidechain-slots";
            packageId = "sidechain-slots";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "sp-core" = [ "dep:sp-core" ];
          "std" = [ "sp-core" "sp-core/std" "sp-runtime/std" "parity-scale-codec/std" "sp-core/std" "sp-inherents/std" "sp-runtime/std" "sp-api/std" "sidechain-slots/std" ];
        };
        resolvedDefaultFeatures = [ "default" "sp-core" "std" ];
      };
      "sp-blockchain" = rec {
        crateName = "sp-blockchain";
        version = "39.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_blockchain";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "schnellru";
            packageId = "schnellru";
          }
          {
            name = "sp-api";
            packageId = "sp-api";
          }
          {
            name = "sp-consensus";
            packageId = "sp-consensus";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-database";
            packageId = "sp-database";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "sp-state-machine";
            packageId = "sp-state-machine";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "sp-consensus" = rec {
        crateName = "sp-consensus";
        version = "0.42.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_consensus";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "futures";
            packageId = "futures";
            features = [ "thread-pool" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "sp-state-machine";
            packageId = "sp-state-machine";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        devDependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "sp-consensus-aura" = rec {
        crateName = "sp-consensus-aura";
        version = "0.42.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_consensus_aura";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-application-crypto";
            packageId = "sp-application-crypto";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-slots";
            packageId = "sp-consensus-slots";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-timestamp";
            packageId = "sp-timestamp";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "async-trait" = [ "dep:async-trait" ];
          "default" = [ "std" ];
          "serde" = [ "scale-info/serde" "sp-application-crypto/serde" "sp-consensus-slots/serde" "sp-runtime/serde" ];
          "std" = [ "async-trait" "codec/std" "scale-info/std" "sp-api/std" "sp-application-crypto/std" "sp-consensus-slots/std" "sp-inherents/std" "sp-runtime/std" "sp-timestamp/std" ];
        };
        resolvedDefaultFeatures = [ "async-trait" "default" "serde" "std" ];
      };
      "sp-consensus-babe" = rec {
        crateName = "sp-consensus-babe";
        version = "0.42.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_consensus_babe";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-application-crypto";
            packageId = "sp-application-crypto";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-slots";
            packageId = "sp-consensus-slots";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-timestamp";
            packageId = "sp-timestamp";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "async-trait" = [ "dep:async-trait" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-consensus-slots/serde" "sp-core/serde" "sp-runtime/serde" ];
          "sp-timestamp" = [ "dep:sp-timestamp" ];
          "std" = [ "async-trait" "codec/std" "scale-info/std" "serde/std" "sp-api/std" "sp-application-crypto/std" "sp-consensus-slots/std" "sp-core/std" "sp-inherents/std" "sp-runtime/std" "sp-timestamp/std" ];
        };
        resolvedDefaultFeatures = [ "async-trait" "serde" "sp-timestamp" "std" ];
      };
      "sp-consensus-beefy" = rec {
        crateName = "sp-consensus-beefy";
        version = "24.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_consensus_beefy";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-application-crypto";
            packageId = "sp-application-crypto";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-crypto-hashing";
            packageId = "sp-crypto-hashing";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-keystore";
            packageId = "sp-keystore";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-mmr-primitives";
            packageId = "sp-mmr-primitives";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-weights";
            packageId = "sp-weights";
            usesDefaultFeatures = false;
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "bls-experimental" = [ "sp-application-crypto/bls-experimental" "sp-core/bls-experimental" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-core/serde" "sp-runtime/serde" ];
          "std" = [ "codec/std" "scale-info/std" "serde/std" "sp-api/std" "sp-application-crypto/std" "sp-core/std" "sp-crypto-hashing/std" "sp-io/std" "sp-keystore/std" "sp-mmr-primitives/std" "sp-runtime/std" "sp-weights/std" "strum/std" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "sp-consensus-grandpa" = rec {
        crateName = "sp-consensus-grandpa";
        version = "23.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_consensus_grandpa";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "finality-grandpa";
            packageId = "finality-grandpa";
            usesDefaultFeatures = false;
            features = [ "derive-codec" ];
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-application-crypto";
            packageId = "sp-application-crypto";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-keystore";
            packageId = "sp-keystore";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-core/serde" "sp-runtime/serde" ];
          "sp-keystore" = [ "dep:sp-keystore" ];
          "std" = [ "codec/std" "finality-grandpa/std" "log/std" "scale-info/std" "serde/std" "sp-api/std" "sp-application-crypto/std" "sp-core/std" "sp-keystore/std" "sp-runtime/std" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "sp-keystore" "std" ];
      };
      "sp-consensus-slots" = rec {
        crateName = "sp-consensus-slots";
        version = "0.42.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_consensus_slots";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "sp-timestamp";
            packageId = "sp-timestamp";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" "scale-info/serde" ];
          "std" = [ "codec/std" "scale-info/std" "serde/std" "sp-timestamp/std" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "sp-core" = rec {
        crateName = "sp-core";
        version = "36.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_core";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "ark-vrf";
            packageId = "ark-vrf";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "bandersnatch" "ring" ];
          }
          {
            name = "array-bytes";
            packageId = "array-bytes";
          }
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "blake2";
            packageId = "blake2 0.10.6";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "bounded-collections";
            packageId = "bounded-collections";
            usesDefaultFeatures = false;
          }
          {
            name = "bs58";
            packageId = "bs58";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "dyn-clonable";
            packageId = "dyn-clonable";
            optional = true;
          }
          {
            name = "ed25519-zebra";
            packageId = "ed25519-zebra";
            usesDefaultFeatures = false;
          }
          {
            name = "futures";
            packageId = "futures";
            optional = true;
          }
          {
            name = "hash-db";
            packageId = "hash-db";
            usesDefaultFeatures = false;
          }
          {
            name = "hash256-std-hasher";
            packageId = "hash256-std-hasher";
            usesDefaultFeatures = false;
          }
          {
            name = "impl-serde";
            packageId = "impl-serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "itertools";
            packageId = "itertools 0.11.0";
            optional = true;
          }
          {
            name = "k256";
            packageId = "k256";
            usesDefaultFeatures = false;
            features = [ "alloc" "ecdsa" ];
          }
          {
            name = "libsecp256k1";
            packageId = "libsecp256k1";
            usesDefaultFeatures = false;
            features = [ "static-context" ];
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "merlin";
            packageId = "merlin";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-bip39";
            packageId = "parity-bip39";
            rename = "bip39";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
            optional = true;
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "primitive-types";
            packageId = "primitive-types";
            usesDefaultFeatures = false;
            features = [ "num-traits" "codec" "scale-info" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            features = [ "small_rng" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "schnorrkel";
            packageId = "schnorrkel";
            usesDefaultFeatures = false;
            features = [ "preaudit_deprecated" ];
          }
          {
            name = "secp256k1";
            packageId = "secp256k1 0.28.2";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "recovery" ];
          }
          {
            name = "secrecy";
            packageId = "secrecy";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "sp-crypto-hashing";
            packageId = "sp-crypto-hashing";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-debug-derive";
            packageId = "sp-debug-derive";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-externalities";
            packageId = "sp-externalities";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime-interface";
            packageId = "sp-runtime-interface";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-std";
            packageId = "sp-std";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-storage";
            packageId = "sp-storage";
            usesDefaultFeatures = false;
          }
          {
            name = "ss58-registry";
            packageId = "ss58-registry";
            usesDefaultFeatures = false;
          }
          {
            name = "substrate-bip39";
            packageId = "substrate-bip39";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
          }
          {
            name = "w3f-bls";
            packageId = "w3f-bls";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ark-vrf" = [ "dep:ark-vrf" ];
          "bandersnatch-experimental" = [ "ark-vrf" ];
          "blake2" = [ "dep:blake2" ];
          "bls-experimental" = [ "w3f-bls" ];
          "bs58" = [ "dep:bs58" ];
          "default" = [ "std" ];
          "dyn-clonable" = [ "dep:dyn-clonable" ];
          "full_crypto" = [ "blake2" "sp-runtime-interface/disable_target_static_assertions" ];
          "futures" = [ "dep:futures" ];
          "impl-serde" = [ "dep:impl-serde" ];
          "itertools" = [ "dep:itertools" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "rand" = [ "dep:rand" ];
          "secp256k1" = [ "dep:secp256k1" ];
          "serde" = [ "blake2" "bounded-collections/serde" "bs58/alloc" "dep:serde" "impl-serde" "k256/serde" "primitive-types/serde_no_std" "scale-info/serde" "sp-storage/serde" ];
          "sp-externalities" = [ "dep:sp-externalities" ];
          "std" = [ "ark-vrf?/std" "bip39/rand" "bip39/std" "blake2/std" "bounded-collections/std" "bs58/std" "codec/std" "dyn-clonable" "ed25519-zebra/std" "full_crypto" "futures" "futures/thread-pool" "hash-db/std" "hash256-std-hasher/std" "impl-serde/std" "itertools" "k256/std" "libsecp256k1/std" "log/std" "merlin/std" "parking_lot" "primitive-types/byteorder" "primitive-types/rustc-hex" "primitive-types/serde" "primitive-types/std" "rand" "scale-info/std" "schnorrkel/std" "secp256k1/global-context" "secp256k1/std" "serde/std" "sp-crypto-hashing/std" "sp-debug-derive/std" "sp-externalities/std" "sp-runtime-interface/std" "sp-std/std" "sp-storage/std" "ss58-registry/std" "substrate-bip39/std" "thiserror" "tracing" "w3f-bls?/std" "zeroize/alloc" "zeroize/std" ];
          "thiserror" = [ "dep:thiserror" ];
          "tracing" = [ "dep:tracing" ];
          "w3f-bls" = [ "dep:w3f-bls" ];
        };
        resolvedDefaultFeatures = [ "blake2" "bs58" "default" "dyn-clonable" "full_crypto" "futures" "impl-serde" "itertools" "parking_lot" "rand" "secp256k1" "serde" "sp-externalities" "std" "thiserror" "tracing" ];
      };
      "sp-crypto-hashing" = rec {
        crateName = "sp-crypto-hashing";
        version = "0.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_crypto_hashing";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "blake2b_simd";
            packageId = "blake2b_simd";
            usesDefaultFeatures = false;
          }
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            usesDefaultFeatures = false;
          }
          {
            name = "sha3";
            packageId = "sha3";
            usesDefaultFeatures = false;
          }
          {
            name = "twox-hash";
            packageId = "twox-hash";
            usesDefaultFeatures = false;
            features = [ "digest_0_10" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "blake2b_simd/std" "byteorder/std" "digest/std" "sha2/std" "sha3/std" "twox-hash/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sp-crypto-hashing-proc-macro" = rec {
        crateName = "sp-crypto-hashing-proc-macro";
        version = "0.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        procMacro = true;
        libName = "sp_crypto_hashing_proc_macro";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "sp-crypto-hashing";
            packageId = "sp-crypto-hashing";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "parsing" ];
          }
        ];

      };
      "sp-database" = rec {
        crateName = "sp-database";
        version = "10.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_database";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "kvdb";
            packageId = "kvdb";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
        ];

      };
      "sp-debug-derive" = rec {
        crateName = "sp-debug-derive";
        version = "14.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        procMacro = true;
        libName = "sp_debug_derive";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "force-debug" "std" ];
      };
      "sp-externalities" = rec {
        crateName = "sp-externalities";
        version = "0.30.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_externalities";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "environmental";
            packageId = "environmental";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-storage";
            packageId = "sp-storage";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "codec/std" "environmental/std" "sp-storage/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sp-genesis-builder" = rec {
        crateName = "sp-genesis-builder";
        version = "0.17.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_genesis_builder";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "bytes" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" "arbitrary_precision" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "codec/std" "scale-info/std" "serde_json/std" "sp-api/std" "sp-runtime/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sp-governed-map" = rec {
        crateName = "sp-governed-map";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/governed-map/primitives; };
        libName = "sp_governed_map";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "pretty_assertions";
            packageId = "pretty_assertions";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" ];
          }
        ];
        features = {
          "async-trait" = [ "dep:async-trait" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" "scale-info/serde" "sidechain-domain/serde" ];
          "std" = [ "async-trait" "log/std" "scale-info/std" "serde" "sidechain-domain/std" "sp-api/std" "sp-inherents/std" "sp-runtime/std" "thiserror" ];
          "thiserror" = [ "dep:thiserror" ];
        };
        resolvedDefaultFeatures = [ "async-trait" "default" "mock" "serde" "std" "thiserror" ];
      };
      "sp-inherents" = rec {
        crateName = "sp-inherents";
        version = "36.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_inherents";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "impl-trait-for-tuples";
            packageId = "impl-trait-for-tuples";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
            optional = true;
          }
        ];
        features = {
          "async-trait" = [ "dep:async-trait" ];
          "default" = [ "std" ];
          "sp-runtime" = [ "dep:sp-runtime" ];
          "std" = [ "async-trait" "codec/std" "scale-info/std" "sp-runtime/std" "thiserror" ];
          "thiserror" = [ "dep:thiserror" ];
        };
        resolvedDefaultFeatures = [ "async-trait" "default" "sp-runtime" "std" "thiserror" ];
      };
      "sp-io" = rec {
        crateName = "sp-io";
        version = "40.0.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_io";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "docify";
            packageId = "docify";
          }
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "libsecp256k1";
            packageId = "libsecp256k1";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "bytes" ];
          }
          {
            name = "polkavm-derive";
            packageId = "polkavm-derive";
            target = { target, features }: ((("riscv32" == target."arch" or null) || ("riscv64" == target."arch" or null)) && (target."substrate_runtime" or false));
          }
          {
            name = "secp256k1";
            packageId = "secp256k1 0.28.2";
            optional = true;
            features = [ "global-context" "recovery" ];
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-crypto-hashing";
            packageId = "sp-crypto-hashing";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-externalities";
            packageId = "sp-externalities";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-keystore";
            packageId = "sp-keystore";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime-interface";
            packageId = "sp-runtime-interface";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-state-machine";
            packageId = "sp-state-machine";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-tracing";
            packageId = "sp-tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-trie";
            packageId = "sp-trie";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
        features = {
          "bandersnatch-experimental" = [ "sp-core/bandersnatch-experimental" "sp-keystore/bandersnatch-experimental" ];
          "bls-experimental" = [ "sp-keystore/bls-experimental" ];
          "default" = [ "std" ];
          "ed25519-dalek" = [ "dep:ed25519-dalek" ];
          "libsecp256k1" = [ "dep:libsecp256k1" ];
          "log" = [ "dep:log" ];
          "secp256k1" = [ "dep:secp256k1" ];
          "sp-keystore" = [ "dep:sp-keystore" ];
          "sp-state-machine" = [ "dep:sp-state-machine" ];
          "sp-trie" = [ "dep:sp-trie" ];
          "std" = [ "bytes/std" "codec/std" "ed25519-dalek" "ed25519-dalek?/std" "libsecp256k1" "log/std" "secp256k1" "sp-core/std" "sp-crypto-hashing/std" "sp-externalities/std" "sp-keystore/std" "sp-runtime-interface/std" "sp-state-machine/std" "sp-tracing/std" "sp-trie/std" "tracing-core/std" "tracing/std" ];
          "with-tracing" = [ "sp-tracing/with-tracing" ];
        };
        resolvedDefaultFeatures = [ "default" "disable_oom" "disable_panic_handler" "ed25519-dalek" "libsecp256k1" "log" "secp256k1" "sp-keystore" "sp-state-machine" "sp-trie" "std" ];
      };
      "sp-keyring" = rec {
        crateName = "sp-keyring";
        version = "41.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_keyring";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "bandersnatch-experimental" = [ "sp-core/bandersnatch-experimental" ];
          "default" = [ "std" ];
          "std" = [ "sp-core/std" "sp-runtime/std" "strum/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sp-keystore" = rec {
        crateName = "sp-keystore";
        version = "0.42.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_keystore";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-externalities";
            packageId = "sp-externalities";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bandersnatch-experimental" = [ "sp-core/bandersnatch-experimental" ];
          "bls-experimental" = [ "sp-core/bls-experimental" ];
          "default" = [ "std" ];
          "std" = [ "codec/std" "dep:parking_lot" "sp-core/std" "sp-externalities/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sp-maybe-compressed-blob" = rec {
        crateName = "sp-maybe-compressed-blob";
        version = "11.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_maybe_compressed_blob";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "zstd";
            packageId = "zstd 0.12.4";
            usesDefaultFeatures = false;
          }
        ];

      };
      "sp-metadata-ir" = rec {
        crateName = "sp-metadata-ir";
        version = "0.10.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_metadata_ir";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "frame-metadata";
            packageId = "frame-metadata";
            usesDefaultFeatures = false;
            features = [ "current" "unstable" ];
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "codec/std" "frame-metadata/std" "scale-info/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "sp-mixnet" = rec {
        crateName = "sp-mixnet";
        version = "0.14.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_mixnet";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-application-crypto";
            packageId = "sp-application-crypto";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "codec/std" "scale-info/std" "sp-api/std" "sp-application-crypto/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sp-mmr-primitives" = rec {
        crateName = "sp-mmr-primitives";
        version = "36.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_mmr_primitives";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
          }
          {
            name = "polkadot-ckb-merkle-mountain-range";
            packageId = "polkadot-ckb-merkle-mountain-range";
            rename = "mmr-lib";
            usesDefaultFeatures = false;
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-debug-derive";
            packageId = "sp-debug-derive";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" "scale-info/serde" "sp-core/serde" "sp-runtime/serde" ];
          "std" = [ "codec/std" "dep:thiserror" "log/std" "mmr-lib/std" "scale-info/std" "serde/std" "sp-api/std" "sp-core/std" "sp-debug-derive/std" "sp-runtime/std" ];
        };
        resolvedDefaultFeatures = [ "serde" "std" ];
      };
      "sp-native-token-management" = rec {
        crateName = "sp-native-token-management";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/native-token-management/primitives; };
        libName = "sp_native_token_management";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "derive-new";
            packageId = "derive-new";
          }
          {
            name = "envy";
            packageId = "envy";
            optional = true;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-version";
            packageId = "sp-version";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" ];
          }
        ];
        features = {
          "async-trait" = [ "dep:async-trait" ];
          "default" = [ "std" ];
          "envy" = [ "dep:envy" ];
          "serde" = [ "dep:serde" "scale-info/serde" "sidechain-domain/serde" ];
          "sp-version" = [ "dep:sp-version" ];
          "std" = [ "async-trait" "parity-scale-codec/std" "scale-info/std" "sidechain-domain/std" "sp-api/std" "sp-inherents/std" "sp-runtime/std" "thiserror" "envy" "sp-version" "sp-version/std" "serde" ];
          "thiserror" = [ "dep:thiserror" ];
        };
        resolvedDefaultFeatures = [ "async-trait" "default" "envy" "mock" "serde" "sp-version" "std" "thiserror" ];
      };
      "sp-offchain" = rec {
        crateName = "sp-offchain";
        version = "36.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_offchain";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "sp-api/std" "sp-core/std" "sp-runtime/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sp-panic-handler" = rec {
        crateName = "sp-panic-handler";
        version = "13.0.2";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_panic_handler";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
          }
          {
            name = "regex";
            packageId = "regex";
          }
        ];

      };
      "sp-partner-chains-consensus-aura" = rec {
        crateName = "sp-partner-chains-consensus-aura";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./substrate-extensions/aura/primitives; };
        libName = "sp_partner_chains_consensus_aura";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
            features = [ "thread-pool" ];
          }
          {
            name = "sp-consensus";
            packageId = "sp-consensus";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-slots";
            packageId = "sp-consensus-slots";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "sp-inherents" = [ "dep:sp-inherents" ];
          "sp-runtime" = [ "dep:sp-runtime" ];
          "std" = [ "sp-consensus-slots/std" "sp-runtime/std" "sp-inherents/std" ];
        };
        resolvedDefaultFeatures = [ "default" "sp-inherents" "sp-runtime" "std" ];
      };
      "sp-rpc" = rec {
        crateName = "sp-rpc";
        version = "34.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_rpc";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "rustc-hash";
            packageId = "rustc-hash 1.1.0";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
        ];

      };
      "sp-runtime" = rec {
        crateName = "sp-runtime";
        version = "41.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_runtime";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "binary-merkle-tree";
            packageId = "binary-merkle-tree";
            usesDefaultFeatures = false;
          }
          {
            name = "docify";
            packageId = "docify";
          }
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
          {
            name = "hash256-std-hasher";
            packageId = "hash256-std-hasher";
            usesDefaultFeatures = false;
          }
          {
            name = "impl-trait-for-tuples";
            packageId = "impl-trait-for-tuples";
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "simple-mermaid";
            packageId = "simple-mermaid";
            optional = true;
          }
          {
            name = "sp-application-crypto";
            packageId = "sp-application-crypto";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-arithmetic";
            packageId = "sp-arithmetic";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-std";
            packageId = "sp-std";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-trie";
            packageId = "sp-trie";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-weights";
            packageId = "sp-weights";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "log" ];
          }
          {
            name = "tuplex";
            packageId = "tuplex";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];
        features = {
          "default" = [ "std" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde" ];
          "simple-mermaid" = [ "dep:simple-mermaid" ];
          "std" = [ "binary-merkle-tree/std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "num-traits/std" "rand" "scale-info/std" "serde/std" "simple-mermaid" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-trie/std" "sp-weights/std" "tracing/std" "tuplex/std" ];
        };
        resolvedDefaultFeatures = [ "default" "rand" "runtime-benchmarks" "serde" "simple-mermaid" "std" "try-runtime" ];
      };
      "sp-runtime-interface" = rec {
        crateName = "sp-runtime-interface";
        version = "29.0.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_runtime_interface";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "impl-trait-for-tuples";
            packageId = "impl-trait-for-tuples";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "bytes" ];
          }
          {
            name = "polkavm-derive";
            packageId = "polkavm-derive";
            target = { target, features }: ((("riscv32" == target."arch" or null) || ("riscv64" == target."arch" or null)) && (target."substrate_runtime" or false));
          }
          {
            name = "primitive-types";
            packageId = "primitive-types";
            usesDefaultFeatures = false;
            features = [ "num-traits" ];
          }
          {
            name = "sp-externalities";
            packageId = "sp-externalities";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime-interface-proc-macro";
            packageId = "sp-runtime-interface-proc-macro";
          }
          {
            name = "sp-std";
            packageId = "sp-std";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-storage";
            packageId = "sp-storage";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-tracing";
            packageId = "sp-tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-wasm-interface";
            packageId = "sp-wasm-interface";
            usesDefaultFeatures = false;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "bytes/std" "codec/std" "primitive-types/std" "sp-externalities/std" "sp-std/std" "sp-storage/std" "sp-tracing/std" "sp-wasm-interface/std" ];
        };
        resolvedDefaultFeatures = [ "default" "disable_target_static_assertions" "std" ];
      };
      "sp-runtime-interface-proc-macro" = rec {
        crateName = "sp-runtime-interface-proc-macro";
        version = "18.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        procMacro = true;
        libName = "sp_runtime_interface_proc_macro";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "Inflector";
            packageId = "Inflector";
          }
          {
            name = "expander";
            packageId = "expander";
          }
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.3.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" "fold" "full" "visit" ];
          }
        ];

      };
      "sp-session" = rec {
        crateName = "sp-session";
        version = "38.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_session";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-keystore";
            packageId = "sp-keystore";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-staking";
            packageId = "sp-staking";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "sp-keystore" = [ "dep:sp-keystore" ];
          "sp-runtime" = [ "dep:sp-runtime" ];
          "std" = [ "codec/std" "scale-info/std" "sp-api/std" "sp-core/std" "sp-keystore/std" "sp-runtime/std" "sp-staking/std" ];
        };
        resolvedDefaultFeatures = [ "default" "sp-keystore" "sp-runtime" "std" ];
      };
      "sp-session-validator-management" = rec {
        crateName = "sp-session-validator-management";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/committee-selection/primitives; };
        libName = "sp_session_validator_management";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "envy";
            packageId = "envy";
            optional = true;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-std";
            packageId = "sp-std";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "envy" = [ "dep:envy" ];
          "serde" = [ "dep:serde" "scale-info/serde" "sidechain-domain/serde" ];
          "std" = [ "parity-scale-codec/std" "sp-api/std" "sp-core/std" "sp-inherents/std" "sp-std/std" "sp-runtime/std" "sidechain-domain/std" "sidechain-domain/serde" "thiserror" "envy" "serde" ];
          "thiserror" = [ "dep:thiserror" ];
        };
        resolvedDefaultFeatures = [ "default" "envy" "serde" "std" "thiserror" ];
      };
      "sp-session-validator-management-query" = rec {
        crateName = "sp-session-validator-management-query";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/committee-selection/query; };
        libName = "sp_session_validator_management_query";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "authority-selection-inherents";
            packageId = "authority-selection-inherents";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "derive-new";
            packageId = "derive-new";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "plutus";
            packageId = "plutus";
            usesDefaultFeatures = false;
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "sidechain-block-search";
            packageId = "sidechain-block-search";
            usesDefaultFeatures = false;
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-session-validator-management";
            packageId = "sp-session-validator-management";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "sp-sidechain";
            packageId = "sp-sidechain";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "authority-selection-inherents";
            packageId = "authority-selection-inherents";
            usesDefaultFeatures = false;
            features = [ "mock" ];
          }
          {
            name = "hex-literal";
            packageId = "hex-literal 1.0.0";
          }
          {
            name = "minicbor";
            packageId = "minicbor";
            features = [ "alloc" ];
          }
          {
            name = "plutus-datum-derive";
            packageId = "plutus-datum-derive";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-std";
            packageId = "sp-std";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" ];
          }
        ];

      };
      "sp-sidechain" = rec {
        crateName = "sp-sidechain";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/sidechain/primitives; };
        libName = "sp_sidechain";
        authors = [
          "IOG"
        ];
        dependencies = [
          {
            name = "envy";
            packageId = "envy";
            optional = true;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "parity-scale-codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "sidechain-domain";
            packageId = "sidechain-domain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "envy" = [ "dep:envy" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "envy" "sp-api/std" "frame-support/std" "parity-scale-codec/std" "scale-info/std" "sidechain-domain/std" "sp-api/std" "sp-runtime/std" "serde" ];
        };
        resolvedDefaultFeatures = [ "default" "envy" "serde" "std" ];
      };
      "sp-staking" = rec {
        crateName = "sp-staking";
        version = "38.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_staking";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "impl-trait-for-tuples";
            packageId = "impl-trait-for-tuples";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "runtime-benchmarks" = [ "sp-runtime/runtime-benchmarks" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "codec/std" "scale-info/std" "serde/std" "sp-core/std" "sp-runtime/std" ];
        };
        resolvedDefaultFeatures = [ "runtime-benchmarks" "serde" "std" ];
      };
      "sp-state-machine" = rec {
        crateName = "sp-state-machine";
        version = "0.45.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_state_machine";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "hash-db";
            packageId = "hash-db";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-externalities";
            packageId = "sp-externalities";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-panic-handler";
            packageId = "sp-panic-handler";
            optional = true;
          }
          {
            name = "sp-trie";
            packageId = "sp-trie";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
          }
          {
            name = "trie-db";
            packageId = "trie-db";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "fuzzing" = [ "arbitrary" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "rand" = [ "dep:rand" ];
          "sp-panic-handler" = [ "dep:sp-panic-handler" ];
          "std" = [ "codec/std" "hash-db/std" "log/std" "parking_lot" "rand" "sp-core/std" "sp-externalities/std" "sp-panic-handler" "sp-trie/std" "thiserror" "tracing" "trie-db/std" ];
          "thiserror" = [ "dep:thiserror" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "default" "parking_lot" "rand" "sp-panic-handler" "std" "thiserror" "tracing" ];
      };
      "sp-statement-store" = rec {
        crateName = "sp-statement-store";
        version = "20.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_statement_store";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "aes-gcm";
            packageId = "aes-gcm";
            optional = true;
          }
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            optional = true;
          }
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
            optional = true;
          }
          {
            name = "hkdf";
            packageId = "hkdf";
            optional = true;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            features = [ "small_rng" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            optional = true;
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-application-crypto";
            packageId = "sp-application-crypto";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-crypto-hashing";
            packageId = "sp-crypto-hashing";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-externalities";
            packageId = "sp-externalities";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime-interface";
            packageId = "sp-runtime-interface";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
            optional = true;
          }
          {
            name = "x25519-dalek";
            packageId = "x25519-dalek";
            optional = true;
            features = [ "static_secrets" ];
          }
        ];
        features = {
          "aes-gcm" = [ "dep:aes-gcm" ];
          "curve25519-dalek" = [ "dep:curve25519-dalek" ];
          "default" = [ "std" ];
          "ed25519-dalek" = [ "dep:ed25519-dalek" ];
          "hkdf" = [ "dep:hkdf" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "scale-info/serde" "sp-application-crypto/serde" "sp-core/serde" "sp-runtime/serde" ];
          "sha2" = [ "dep:sha2" ];
          "std" = [ "aes-gcm" "aes-gcm?/std" "codec/std" "curve25519-dalek" "ed25519-dalek" "hkdf" "hkdf?/std" "rand" "scale-info/std" "sha2" "sp-api/std" "sp-application-crypto/std" "sp-core/std" "sp-crypto-hashing/std" "sp-externalities/std" "sp-runtime-interface/std" "sp-runtime/std" "thiserror" "x25519-dalek" ];
          "thiserror" = [ "dep:thiserror" ];
          "x25519-dalek" = [ "dep:x25519-dalek" ];
        };
        resolvedDefaultFeatures = [ "aes-gcm" "curve25519-dalek" "default" "ed25519-dalek" "hkdf" "rand" "sha2" "std" "thiserror" "x25519-dalek" ];
      };
      "sp-std" = rec {
        crateName = "sp-std";
        version = "14.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_std";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "sp-storage" = rec {
        crateName = "sp-storage";
        version = "22.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_storage";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "impl-serde";
            packageId = "impl-serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "ref-cast";
            packageId = "ref-cast";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "sp-debug-derive";
            packageId = "sp-debug-derive";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "impl-serde" = [ "dep:impl-serde" ];
          "serde" = [ "dep:serde" "impl-serde" ];
          "std" = [ "codec/std" "impl-serde/std" "serde/std" "sp-debug-derive/std" ];
        };
        resolvedDefaultFeatures = [ "default" "impl-serde" "serde" "std" ];
      };
      "sp-timestamp" = rec {
        crateName = "sp-timestamp";
        version = "36.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_timestamp";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
            optional = true;
          }
        ];
        features = {
          "async-trait" = [ "dep:async-trait" ];
          "default" = [ "std" ];
          "std" = [ "async-trait" "codec/std" "sp-inherents/std" "sp-runtime/std" "thiserror" ];
          "thiserror" = [ "dep:thiserror" ];
        };
        resolvedDefaultFeatures = [ "async-trait" "default" "std" "thiserror" ];
      };
      "sp-tracing" = rec {
        crateName = "sp-tracing";
        version = "17.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_tracing";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            optional = true;
            features = [ "env-filter" "time" "tracing-log" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "regex" = [ "dep:regex" ];
          "std" = [ "codec/std" "tracing-core/std" "tracing-subscriber" "tracing/std" "with-tracing" ];
          "test-utils" = [ "regex" "regex/std" "std" ];
          "tracing-subscriber" = [ "dep:tracing-subscriber" ];
          "with-tracing" = [ "codec/derive" "codec/full" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "tracing-subscriber" "with-tracing" ];
      };
      "sp-transaction-pool" = rec {
        crateName = "sp-transaction-pool";
        version = "36.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_transaction_pool";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "sp-api/std" "sp-runtime/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sp-transaction-storage-proof" = rec {
        crateName = "sp-transaction-storage-proof";
        version = "36.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_transaction_storage_proof";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-trie";
            packageId = "sp-trie";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "async-trait" = [ "dep:async-trait" ];
          "default" = [ "std" ];
          "sp-core" = [ "dep:sp-core" ];
          "sp-trie" = [ "dep:sp-trie" ];
          "std" = [ "async-trait" "codec/std" "scale-info/std" "sp-core/std" "sp-inherents/std" "sp-runtime/std" "sp-trie/std" ];
        };
        resolvedDefaultFeatures = [ "async-trait" "default" "sp-core" "sp-trie" "std" ];
      };
      "sp-trie" = rec {
        crateName = "sp-trie";
        version = "39.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_trie";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            optional = true;
          }
          {
            name = "hash-db";
            packageId = "hash-db";
            usesDefaultFeatures = false;
          }
          {
            name = "memory-db";
            packageId = "memory-db";
            usesDefaultFeatures = false;
          }
          {
            name = "nohash-hasher";
            packageId = "nohash-hasher";
            optional = true;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "schnellru";
            packageId = "schnellru";
            optional = true;
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-externalities";
            packageId = "sp-externalities";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
          }
          {
            name = "trie-db";
            packageId = "trie-db";
            usesDefaultFeatures = false;
          }
          {
            name = "trie-root";
            packageId = "trie-root";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "default" = [ "std" ];
          "nohash-hasher" = [ "dep:nohash-hasher" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "rand" = [ "dep:rand" ];
          "schnellru" = [ "dep:schnellru" ];
          "std" = [ "ahash" "codec/std" "hash-db/std" "memory-db/std" "nohash-hasher" "parking_lot" "rand" "scale-info/std" "schnellru" "sp-core/std" "sp-externalities/std" "thiserror" "tracing" "trie-db/std" "trie-root/std" ];
          "thiserror" = [ "dep:thiserror" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "ahash" "default" "nohash-hasher" "parking_lot" "rand" "schnellru" "std" "thiserror" "tracing" ];
      };
      "sp-version" = rec {
        crateName = "sp-version";
        version = "39.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_version";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "impl-serde";
            packageId = "impl-serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "parity-wasm";
            packageId = "parity-wasm";
            optional = true;
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "sp-crypto-hashing-proc-macro";
            packageId = "sp-crypto-hashing-proc-macro";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-std";
            packageId = "sp-std";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-version-proc-macro";
            packageId = "sp-version-proc-macro";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "impl-serde" = [ "dep:impl-serde" ];
          "parity-wasm" = [ "dep:parity-wasm" ];
          "serde" = [ "dep:serde" "impl-serde" "sp-runtime/serde" ];
          "std" = [ "codec/std" "impl-serde/std" "parity-wasm" "scale-info/std" "serde/std" "sp-runtime/std" "sp-std/std" "thiserror" ];
          "thiserror" = [ "dep:thiserror" ];
        };
        resolvedDefaultFeatures = [ "default" "impl-serde" "parity-wasm" "serde" "std" "thiserror" ];
      };
      "sp-version-proc-macro" = rec {
        crateName = "sp-version-proc-macro";
        version = "15.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        procMacro = true;
        libName = "sp_version_proc_macro";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            features = [ "derive" ];
          }
          {
            name = "proc-macro-warning";
            packageId = "proc-macro-warning";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" "fold" "full" "visit" ];
          }
        ];

      };
      "sp-wasm-interface" = rec {
        crateName = "sp-wasm-interface";
        version = "21.0.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_wasm_interface";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "impl-trait-for-tuples";
            packageId = "impl-trait-for-tuples";
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "wasmtime";
            packageId = "wasmtime";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "anyhow" = [ "dep:anyhow" ];
          "default" = [ "std" ];
          "log" = [ "dep:log" ];
          "std" = [ "anyhow?/std" "codec/std" "log/std" ];
          "wasmtime" = [ "anyhow" "dep:wasmtime" ];
        };
        resolvedDefaultFeatures = [ "anyhow" "default" "log" "std" "wasmtime" ];
      };
      "sp-weights" = rec {
        crateName = "sp-weights";
        version = "31.1.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "sp_weights";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "bounded-collections";
            packageId = "bounded-collections";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "sp-arithmetic";
            packageId = "sp-arithmetic";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-debug-derive";
            packageId = "sp-debug-derive";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "full-metadata-docs" = [ "scale-info/docs" ];
          "json-schema" = [ "dep:schemars" ];
          "serde" = [ "bounded-collections/serde" "dep:serde" "scale-info/serde" "sp-arithmetic/serde" ];
          "std" = [ "bounded-collections/std" "codec/std" "scale-info/std" "serde/std" "sp-arithmetic/std" "sp-debug-derive/std" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "spin 0.5.2" = rec {
        crateName = "spin";
        version = "0.5.2";
        edition = "2015";
        sha256 = "0b84m6dbzrwf2kxylnw82d3dr8w06av7rfkr8s85fb5f43rwyqvf";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "John Ericson <git@JohnEricson.me>"
        ];

      };
      "spin 0.9.8" = rec {
        crateName = "spin";
        version = "0.9.8";
        edition = "2015";
        sha256 = "0rvam5r0p3a6qhc18scqpvpgb3ckzyqxpgdfyjnghh8ja7byi039";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "John Ericson <git@JohnEricson.me>"
          "Joshua Barretto <joshua.s.barretto@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
            rename = "lock_api_crate";
            optional = true;
          }
        ];
        features = {
          "barrier" = [ "mutex" ];
          "default" = [ "lock_api" "mutex" "spin_mutex" "rwlock" "once" "lazy" "barrier" ];
          "fair_mutex" = [ "mutex" ];
          "lazy" = [ "once" ];
          "lock_api" = [ "lock_api_crate" ];
          "lock_api_crate" = [ "dep:lock_api_crate" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "portable_atomic" = [ "portable-atomic" ];
          "spin_mutex" = [ "mutex" ];
          "ticket_mutex" = [ "mutex" ];
          "use_ticket_mutex" = [ "mutex" "ticket_mutex" ];
        };
        resolvedDefaultFeatures = [ "barrier" "default" "lazy" "lock_api" "lock_api_crate" "mutex" "once" "rwlock" "spin_mutex" ];
      };
      "spinning_top" = rec {
        crateName = "spinning_top";
        version = "0.3.0";
        edition = "2018";
        sha256 = "001kjbiz1gg111rsqxc4pq9a1izx7wshkk38f69h1dbgf4fjsvfr";
        authors = [
          "Philipp Oppermann <dev@phil-opp.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
        ];
        features = {
          "arc_lock" = [ "lock_api/arc_lock" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
        };
      };
      "spki" = rec {
        crateName = "spki";
        version = "0.7.3";
        edition = "2021";
        sha256 = "17fj8k5fmx4w9mp27l970clrh5qa7r5sjdvbsln987xhb34dc7nr";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base64ct";
            packageId = "base64ct";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "der";
            packageId = "der";
            features = [ "oid" ];
          }
        ];
        features = {
          "alloc" = [ "base64ct?/alloc" "der/alloc" ];
          "arbitrary" = [ "std" "dep:arbitrary" "der/arbitrary" ];
          "base64" = [ "dep:base64ct" ];
          "fingerprint" = [ "sha2" ];
          "pem" = [ "alloc" "der/pem" ];
          "sha2" = [ "dep:sha2" ];
          "std" = [ "der/std" "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "pem" "std" ];
      };
      "sqlx" = rec {
        crateName = "sqlx";
        version = "0.8.5";
        edition = "2021";
        sha256 = "13kk79hk190kblngg0n8gv2qnal86yinijrvznf6djnsh19aihzk";
        authors = [
          "Ryan Leckey <leckey.ryan@gmail.com>"
          "Austin Bonander <austin.bonander@gmail.com>"
          "Chloe Ross <orangesnowfox@gmail.com>"
          "Daniel Akhterov <akhterovd@gmail.com>"
        ];
        dependencies = [
          {
            name = "sqlx-core";
            packageId = "sqlx-core";
            features = [ "offline" "migrate" ];
          }
          {
            name = "sqlx-macros";
            packageId = "sqlx-macros";
            optional = true;
          }
          {
            name = "sqlx-mysql";
            packageId = "sqlx-mysql";
            optional = true;
          }
          {
            name = "sqlx-postgres";
            packageId = "sqlx-postgres";
            optional = true;
          }
          {
            name = "sqlx-sqlite";
            packageId = "sqlx-sqlite";
            optional = true;
          }
        ];
        features = {
          "_unstable-all-types" = [ "bigdecimal" "rust_decimal" "json" "time" "chrono" "ipnet" "ipnetwork" "mac_address" "uuid" "bit-vec" "bstr" ];
          "all-databases" = [ "mysql" "sqlite" "postgres" "any" ];
          "any" = [ "sqlx-core/any" "sqlx-mysql?/any" "sqlx-postgres?/any" "sqlx-sqlite?/any" ];
          "bigdecimal" = [ "sqlx-core/bigdecimal" "sqlx-macros?/bigdecimal" "sqlx-mysql?/bigdecimal" "sqlx-postgres?/bigdecimal" ];
          "bit-vec" = [ "sqlx-core/bit-vec" "sqlx-macros?/bit-vec" "sqlx-postgres?/bit-vec" ];
          "bstr" = [ "sqlx-core/bstr" ];
          "chrono" = [ "sqlx-core/chrono" "sqlx-macros?/chrono" "sqlx-mysql?/chrono" "sqlx-postgres?/chrono" "sqlx-sqlite?/chrono" ];
          "default" = [ "any" "macros" "migrate" "json" ];
          "derive" = [ "sqlx-macros/derive" ];
          "ipnet" = [ "sqlx-core/ipnet" "sqlx-macros?/ipnet" "sqlx-postgres?/ipnet" ];
          "ipnetwork" = [ "sqlx-core/ipnetwork" "sqlx-macros?/ipnetwork" "sqlx-postgres?/ipnetwork" ];
          "json" = [ "sqlx-core/json" "sqlx-macros?/json" "sqlx-mysql?/json" "sqlx-postgres?/json" "sqlx-sqlite?/json" ];
          "mac_address" = [ "sqlx-core/mac_address" "sqlx-macros?/mac_address" "sqlx-postgres?/mac_address" ];
          "macros" = [ "derive" "sqlx-macros/macros" ];
          "migrate" = [ "sqlx-core/migrate" "sqlx-macros?/migrate" "sqlx-mysql?/migrate" "sqlx-postgres?/migrate" "sqlx-sqlite?/migrate" ];
          "mysql" = [ "sqlx-mysql" "sqlx-macros?/mysql" ];
          "postgres" = [ "sqlx-postgres" "sqlx-macros?/postgres" ];
          "regexp" = [ "sqlx-sqlite?/regexp" ];
          "runtime-async-std" = [ "_rt-async-std" "sqlx-core/_rt-async-std" "sqlx-macros?/_rt-async-std" ];
          "runtime-async-std-native-tls" = [ "runtime-async-std" "tls-native-tls" ];
          "runtime-async-std-rustls" = [ "runtime-async-std" "tls-rustls-ring" ];
          "runtime-tokio" = [ "_rt-tokio" "sqlx-core/_rt-tokio" "sqlx-macros?/_rt-tokio" ];
          "runtime-tokio-native-tls" = [ "runtime-tokio" "tls-native-tls" ];
          "runtime-tokio-rustls" = [ "runtime-tokio" "tls-rustls-ring" ];
          "rust_decimal" = [ "sqlx-core/rust_decimal" "sqlx-macros?/rust_decimal" "sqlx-mysql?/rust_decimal" "sqlx-postgres?/rust_decimal" ];
          "sqlite" = [ "_sqlite" "sqlx-sqlite/bundled" "sqlx-macros?/sqlite" ];
          "sqlite-preupdate-hook" = [ "sqlx-sqlite/preupdate-hook" ];
          "sqlite-unbundled" = [ "_sqlite" "sqlx-sqlite/unbundled" "sqlx-macros?/sqlite-unbundled" ];
          "sqlx-macros" = [ "dep:sqlx-macros" ];
          "sqlx-mysql" = [ "dep:sqlx-mysql" ];
          "sqlx-postgres" = [ "dep:sqlx-postgres" ];
          "sqlx-sqlite" = [ "dep:sqlx-sqlite" ];
          "time" = [ "sqlx-core/time" "sqlx-macros?/time" "sqlx-mysql?/time" "sqlx-postgres?/time" "sqlx-sqlite?/time" ];
          "tls-native-tls" = [ "sqlx-core/_tls-native-tls" "sqlx-macros?/_tls-native-tls" ];
          "tls-rustls" = [ "tls-rustls-ring" ];
          "tls-rustls-aws-lc-rs" = [ "sqlx-core/_tls-rustls-aws-lc-rs" "sqlx-macros?/_tls-rustls-aws-lc-rs" ];
          "tls-rustls-ring" = [ "tls-rustls-ring-webpki" ];
          "tls-rustls-ring-native-roots" = [ "sqlx-core/_tls-rustls-ring-native-roots" "sqlx-macros?/_tls-rustls-ring-native-roots" ];
          "tls-rustls-ring-webpki" = [ "sqlx-core/_tls-rustls-ring-webpki" "sqlx-macros?/_tls-rustls-ring-webpki" ];
          "uuid" = [ "sqlx-core/uuid" "sqlx-macros?/uuid" "sqlx-mysql?/uuid" "sqlx-postgres?/uuid" "sqlx-sqlite?/uuid" ];
        };
        resolvedDefaultFeatures = [ "_rt-tokio" "bigdecimal" "chrono" "derive" "macros" "migrate" "postgres" "runtime-tokio" "runtime-tokio-rustls" "sqlx-macros" "sqlx-postgres" "tls-rustls-ring" "tls-rustls-ring-webpki" ];
      };
      "sqlx-core" = rec {
        crateName = "sqlx-core";
        version = "0.8.5";
        edition = "2021";
        sha256 = "1hs8l9d376d6ikqidxh27ag00yg8a1azf4wh8z6mh2m3rsiz4hzp";
        libName = "sqlx_core";
        authors = [
          "Ryan Leckey <leckey.ryan@gmail.com>"
          "Austin Bonander <austin.bonander@gmail.com>"
          "Chloe Ross <orangesnowfox@gmail.com>"
          "Daniel Akhterov <akhterovd@gmail.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "bigdecimal";
            packageId = "bigdecimal";
            optional = true;
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "chrono";
            packageId = "chrono";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "clock" ];
          }
          {
            name = "crc";
            packageId = "crc";
            optional = true;
          }
          {
            name = "crossbeam-queue";
            packageId = "crossbeam-queue";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "event-listener";
            packageId = "event-listener 5.4.0";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-intrusive";
            packageId = "futures-intrusive";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" "sink" "io" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.3";
          }
          {
            name = "hashlink";
            packageId = "hashlink 0.10.0";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.9.0";
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "tls12" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            features = [ "raw_value" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "time" "net" "sync" "fs" "io-util" "rt" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            optional = true;
            features = [ "fs" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            features = [ "log" ];
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.26.11";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt" ];
          }
        ];
        features = {
          "_rt-async-std" = [ "async-std" "async-io" ];
          "_rt-tokio" = [ "tokio" "tokio-stream" ];
          "_tls-native-tls" = [ "native-tls" ];
          "_tls-rustls" = [ "rustls" ];
          "_tls-rustls-aws-lc-rs" = [ "_tls-rustls" "rustls/aws-lc-rs" "webpki-roots" ];
          "_tls-rustls-ring-native-roots" = [ "_tls-rustls" "rustls/ring" "rustls-native-certs" ];
          "_tls-rustls-ring-webpki" = [ "_tls-rustls" "rustls/ring" "webpki-roots" ];
          "async-io" = [ "dep:async-io" ];
          "async-std" = [ "dep:async-std" ];
          "bigdecimal" = [ "dep:bigdecimal" ];
          "bit-vec" = [ "dep:bit-vec" ];
          "bstr" = [ "dep:bstr" ];
          "chrono" = [ "dep:chrono" ];
          "crc" = [ "dep:crc" ];
          "ipnet" = [ "dep:ipnet" ];
          "ipnetwork" = [ "dep:ipnetwork" ];
          "json" = [ "serde" "serde_json" ];
          "mac_address" = [ "dep:mac_address" ];
          "migrate" = [ "sha2" "crc" ];
          "native-tls" = [ "dep:native-tls" ];
          "offline" = [ "serde" "either/serde" ];
          "regex" = [ "dep:regex" ];
          "rust_decimal" = [ "dep:rust_decimal" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "sha2" = [ "dep:sha2" ];
          "time" = [ "dep:time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-stream" = [ "dep:tokio-stream" ];
          "uuid" = [ "dep:uuid" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "_rt-tokio" "_tls-rustls" "_tls-rustls-ring-webpki" "any" "bigdecimal" "chrono" "crc" "default" "json" "migrate" "offline" "rustls" "serde" "serde_json" "sha2" "tokio" "tokio-stream" "webpki-roots" ];
      };
      "sqlx-macros" = rec {
        crateName = "sqlx-macros";
        version = "0.8.5";
        edition = "2021";
        sha256 = "1kkx85l8gzdz8qa1lykx4g5vv0x029y38lj2dnak9671zph00hkz";
        procMacro = true;
        libName = "sqlx_macros";
        authors = [
          "Ryan Leckey <leckey.ryan@gmail.com>"
          "Austin Bonander <austin.bonander@gmail.com>"
          "Chloe Ross <orangesnowfox@gmail.com>"
          "Daniel Akhterov <akhterovd@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "sqlx-core";
            packageId = "sqlx-core";
            features = [ "any" ];
          }
          {
            name = "sqlx-macros-core";
            packageId = "sqlx-macros-core";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "parsing" "proc-macro" ];
          }
        ];
        features = {
          "_rt-async-std" = [ "sqlx-macros-core/_rt-async-std" ];
          "_rt-tokio" = [ "sqlx-macros-core/_rt-tokio" ];
          "_tls-native-tls" = [ "sqlx-macros-core/_tls-native-tls" ];
          "_tls-rustls-aws-lc-rs" = [ "sqlx-macros-core/_tls-rustls-aws-lc-rs" ];
          "_tls-rustls-ring-native-roots" = [ "sqlx-macros-core/_tls-rustls-ring-native-roots" ];
          "_tls-rustls-ring-webpki" = [ "sqlx-macros-core/_tls-rustls-ring-webpki" ];
          "bigdecimal" = [ "sqlx-macros-core/bigdecimal" ];
          "bit-vec" = [ "sqlx-macros-core/bit-vec" ];
          "chrono" = [ "sqlx-macros-core/chrono" ];
          "derive" = [ "sqlx-macros-core/derive" ];
          "ipnet" = [ "sqlx-macros-core/ipnet" ];
          "ipnetwork" = [ "sqlx-macros-core/ipnetwork" ];
          "json" = [ "sqlx-macros-core/json" ];
          "mac_address" = [ "sqlx-macros-core/mac_address" ];
          "macros" = [ "sqlx-macros-core/macros" ];
          "migrate" = [ "sqlx-macros-core/migrate" ];
          "mysql" = [ "sqlx-macros-core/mysql" ];
          "postgres" = [ "sqlx-macros-core/postgres" ];
          "rust_decimal" = [ "sqlx-macros-core/rust_decimal" ];
          "sqlite" = [ "sqlx-macros-core/sqlite" ];
          "sqlite-unbundled" = [ "sqlx-macros-core/sqlite-unbundled" ];
          "time" = [ "sqlx-macros-core/time" ];
          "uuid" = [ "sqlx-macros-core/uuid" ];
        };
        resolvedDefaultFeatures = [ "_rt-tokio" "_tls-rustls-ring-webpki" "bigdecimal" "chrono" "default" "derive" "macros" "migrate" "postgres" ];
      };
      "sqlx-macros-core" = rec {
        crateName = "sqlx-macros-core";
        version = "0.8.5";
        edition = "2021";
        sha256 = "1dq07l4sg9ffds0akqnvh97z8dspn3p6p6qjlzn1pqxdkjiflb48";
        libName = "sqlx_macros_core";
        authors = [
          "Ryan Leckey <leckey.ryan@gmail.com>"
          "Austin Bonander <austin.bonander@gmail.com>"
          "Chloe Ross <orangesnowfox@gmail.com>"
          "Daniel Akhterov <akhterovd@gmail.com>"
        ];
        dependencies = [
          {
            name = "dotenvy";
            packageId = "dotenvy";
            usesDefaultFeatures = false;
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "sqlx-core";
            packageId = "sqlx-core";
            features = [ "offline" ];
          }
          {
            name = "sqlx-mysql";
            packageId = "sqlx-mysql";
            optional = true;
            features = [ "offline" "migrate" ];
          }
          {
            name = "sqlx-postgres";
            packageId = "sqlx-postgres";
            optional = true;
            features = [ "offline" "migrate" ];
          }
          {
            name = "sqlx-sqlite";
            packageId = "sqlx-sqlite";
            optional = true;
            features = [ "offline" "migrate" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "full" "derive" "parsing" "printing" "clone-impls" ];
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "time" "net" "sync" "fs" "io-util" "rt" ];
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        features = {
          "_rt-async-std" = [ "async-std" "sqlx-core/_rt-async-std" ];
          "_rt-tokio" = [ "tokio" "sqlx-core/_rt-tokio" ];
          "_tls-native-tls" = [ "sqlx-core/_tls-native-tls" ];
          "_tls-rustls-aws-lc-rs" = [ "sqlx-core/_tls-rustls-aws-lc-rs" ];
          "_tls-rustls-ring-native-roots" = [ "sqlx-core/_tls-rustls-ring-native-roots" ];
          "_tls-rustls-ring-webpki" = [ "sqlx-core/_tls-rustls-ring-webpki" ];
          "async-std" = [ "dep:async-std" ];
          "bigdecimal" = [ "sqlx-core/bigdecimal" "sqlx-mysql?/bigdecimal" "sqlx-postgres?/bigdecimal" ];
          "bit-vec" = [ "sqlx-core/bit-vec" "sqlx-postgres?/bit-vec" ];
          "chrono" = [ "sqlx-core/chrono" "sqlx-mysql?/chrono" "sqlx-postgres?/chrono" "sqlx-sqlite?/chrono" ];
          "ipnet" = [ "sqlx-core/ipnet" "sqlx-postgres?/ipnet" ];
          "ipnetwork" = [ "sqlx-core/ipnetwork" "sqlx-postgres?/ipnetwork" ];
          "json" = [ "sqlx-core/json" "sqlx-mysql?/json" "sqlx-postgres?/json" "sqlx-sqlite?/json" ];
          "mac_address" = [ "sqlx-core/mac_address" "sqlx-postgres?/mac_address" ];
          "migrate" = [ "sqlx-core/migrate" ];
          "mysql" = [ "sqlx-mysql" ];
          "postgres" = [ "sqlx-postgres" ];
          "rust_decimal" = [ "sqlx-core/rust_decimal" "sqlx-mysql?/rust_decimal" "sqlx-postgres?/rust_decimal" ];
          "sqlite" = [ "_sqlite" "sqlx-sqlite/bundled" ];
          "sqlite-unbundled" = [ "_sqlite" "sqlx-sqlite/unbundled" ];
          "sqlx-mysql" = [ "dep:sqlx-mysql" ];
          "sqlx-postgres" = [ "dep:sqlx-postgres" ];
          "sqlx-sqlite" = [ "dep:sqlx-sqlite" ];
          "time" = [ "sqlx-core/time" "sqlx-mysql?/time" "sqlx-postgres?/time" "sqlx-sqlite?/time" ];
          "tokio" = [ "dep:tokio" ];
          "uuid" = [ "sqlx-core/uuid" "sqlx-mysql?/uuid" "sqlx-postgres?/uuid" "sqlx-sqlite?/uuid" ];
        };
        resolvedDefaultFeatures = [ "_rt-tokio" "_tls-rustls-ring-webpki" "bigdecimal" "chrono" "default" "derive" "macros" "migrate" "postgres" "sqlx-postgres" "tokio" ];
      };
      "sqlx-mysql" = rec {
        crateName = "sqlx-mysql";
        version = "0.8.5";
        edition = "2021";
        sha256 = "19xpn5aqha55jcjr9d8s123m0m1560sdzhjhsz1875k2gamd7z8a";
        libName = "sqlx_mysql";
        authors = [
          "Ryan Leckey <leckey.ryan@gmail.com>"
          "Austin Bonander <austin.bonander@gmail.com>"
          "Chloe Ross <orangesnowfox@gmail.com>"
          "Daniel Akhterov <akhterovd@gmail.com>"
        ];
        dependencies = [
          {
            name = "atoi";
            packageId = "atoi";
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "bigdecimal";
            packageId = "bigdecimal";
            optional = true;
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "chrono";
            packageId = "chrono";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "clock" ];
          }
          {
            name = "crc";
            packageId = "crc";
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "dotenvy";
            packageId = "dotenvy";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = [ "sink" "alloc" "std" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" "sink" "io" ];
          }
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
            usesDefaultFeatures = false;
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "hkdf";
            packageId = "hkdf";
          }
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
            usesDefaultFeatures = false;
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "md-5";
            packageId = "md-5";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "std" "std_rng" ];
          }
          {
            name = "rsa";
            packageId = "rsa";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "sha1";
            packageId = "sha1";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "sqlx-core";
            packageId = "sqlx-core";
          }
          {
            name = "stringprep";
            packageId = "stringprep";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tracing";
            packageId = "tracing";
            features = [ "log" ];
          }
          {
            name = "whoami";
            packageId = "whoami";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "any" = [ "sqlx-core/any" ];
          "bigdecimal" = [ "dep:bigdecimal" "sqlx-core/bigdecimal" ];
          "chrono" = [ "dep:chrono" "sqlx-core/chrono" ];
          "json" = [ "sqlx-core/json" "serde" ];
          "migrate" = [ "sqlx-core/migrate" ];
          "offline" = [ "sqlx-core/offline" "serde/derive" ];
          "rust_decimal" = [ "dep:rust_decimal" "rust_decimal/maths" "sqlx-core/rust_decimal" ];
          "serde" = [ "dep:serde" ];
          "time" = [ "dep:time" "sqlx-core/time" ];
          "uuid" = [ "dep:uuid" "sqlx-core/uuid" ];
        };
        resolvedDefaultFeatures = [ "bigdecimal" "chrono" "migrate" "offline" "serde" ];
      };
      "sqlx-postgres" = rec {
        crateName = "sqlx-postgres";
        version = "0.8.5";
        edition = "2021";
        sha256 = "1rpby59mxqcvyb0az7bxwxizp03nrpcfk9a7ydg63qmmpghxpgm0";
        libName = "sqlx_postgres";
        authors = [
          "Ryan Leckey <leckey.ryan@gmail.com>"
          "Austin Bonander <austin.bonander@gmail.com>"
          "Chloe Ross <orangesnowfox@gmail.com>"
          "Daniel Akhterov <akhterovd@gmail.com>"
        ];
        dependencies = [
          {
            name = "atoi";
            packageId = "atoi";
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "bigdecimal";
            packageId = "bigdecimal";
            optional = true;
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
            usesDefaultFeatures = false;
          }
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "chrono";
            packageId = "chrono";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "clock" ];
          }
          {
            name = "crc";
            packageId = "crc";
          }
          {
            name = "dotenvy";
            packageId = "dotenvy";
            usesDefaultFeatures = false;
          }
          {
            name = "etcetera";
            packageId = "etcetera";
            target = { target, features }: ("windows" == target."os" or null);
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = [ "sink" "alloc" "std" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" "sink" "io" ];
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "hkdf";
            packageId = "hkdf";
          }
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
            usesDefaultFeatures = false;
            features = [ "reset" ];
          }
          {
            name = "home";
            packageId = "home";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "md-5";
            packageId = "md-5";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "std" "std_rng" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "raw_value" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = [ "serde" ];
          }
          {
            name = "sqlx-core";
            packageId = "sqlx-core";
            features = [ "json" ];
          }
          {
            name = "stringprep";
            packageId = "stringprep";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tracing";
            packageId = "tracing";
            features = [ "log" ];
          }
          {
            name = "whoami";
            packageId = "whoami";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "any" = [ "sqlx-core/any" ];
          "bigdecimal" = [ "dep:bigdecimal" "dep:num-bigint" "sqlx-core/bigdecimal" ];
          "bit-vec" = [ "dep:bit-vec" "sqlx-core/bit-vec" ];
          "chrono" = [ "dep:chrono" "sqlx-core/chrono" ];
          "ipnet" = [ "dep:ipnet" "sqlx-core/ipnet" ];
          "ipnetwork" = [ "dep:ipnetwork" "sqlx-core/ipnetwork" ];
          "json" = [ "sqlx-core/json" ];
          "mac_address" = [ "dep:mac_address" "sqlx-core/mac_address" ];
          "migrate" = [ "sqlx-core/migrate" ];
          "offline" = [ "sqlx-core/offline" ];
          "rust_decimal" = [ "dep:rust_decimal" "rust_decimal/maths" "sqlx-core/rust_decimal" ];
          "time" = [ "dep:time" "sqlx-core/time" ];
          "uuid" = [ "dep:uuid" "sqlx-core/uuid" ];
        };
        resolvedDefaultFeatures = [ "bigdecimal" "chrono" "migrate" "offline" ];
      };
      "sqlx-sqlite" = rec {
        crateName = "sqlx-sqlite";
        version = "0.8.5";
        edition = "2021";
        sha256 = "1g55g6lsfi2nh2gl0vlyl8pdqhmig5v384kbl23yps10lplq6q62";
        libName = "sqlx_sqlite";
        authors = [
          "Ryan Leckey <leckey.ryan@gmail.com>"
          "Austin Bonander <austin.bonander@gmail.com>"
          "Chloe Ross <orangesnowfox@gmail.com>"
          "Daniel Akhterov <akhterovd@gmail.com>"
        ];
        dependencies = [
          {
            name = "atoi";
            packageId = "atoi";
          }
          {
            name = "chrono";
            packageId = "chrono";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "clock" ];
          }
          {
            name = "flume";
            packageId = "flume";
            usesDefaultFeatures = false;
            features = [ "async" ];
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = [ "sink" "alloc" "std" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
          }
          {
            name = "futures-intrusive";
            packageId = "futures-intrusive";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" "sink" ];
          }
          {
            name = "libsqlite3-sys";
            packageId = "libsqlite3-sys";
            usesDefaultFeatures = false;
            features = [ "pkg-config" "vcpkg" "unlock_notify" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
          {
            name = "sqlx-core";
            packageId = "sqlx-core";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tracing";
            packageId = "tracing";
            features = [ "log" ];
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        features = {
          "any" = [ "sqlx-core/any" ];
          "bundled" = [ "libsqlite3-sys/bundled" ];
          "chrono" = [ "dep:chrono" "sqlx-core/chrono" ];
          "json" = [ "sqlx-core/json" "serde" ];
          "migrate" = [ "sqlx-core/migrate" ];
          "offline" = [ "sqlx-core/offline" "serde" ];
          "preupdate-hook" = [ "libsqlite3-sys/preupdate_hook" ];
          "regexp" = [ "dep:regex" ];
          "serde" = [ "dep:serde" ];
          "time" = [ "dep:time" "sqlx-core/time" ];
          "unbundled" = [ "libsqlite3-sys/buildtime_bindgen" ];
          "uuid" = [ "dep:uuid" "sqlx-core/uuid" ];
        };
        resolvedDefaultFeatures = [ "chrono" "migrate" "offline" "serde" ];
      };
      "ss58-registry" = rec {
        crateName = "ss58-registry";
        version = "1.51.0";
        edition = "2021";
        sha256 = "1f4lnkwnsxp74ag9679l0ri0dv2j1fprb0vj3inq2mcfk49ryh0r";
        libName = "ss58_registry";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "num-format";
            packageId = "num-format";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "Inflector";
            packageId = "Inflector";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "std" "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = [ "std" ];
          "num-format" = [ "dep:num-format" ];
          "std" = [ "num-format" ];
        };
        resolvedDefaultFeatures = [ "num-format" "std" ];
      };
      "stable_deref_trait" = rec {
        crateName = "stable_deref_trait";
        version = "1.2.0";
        edition = "2015";
        sha256 = "1lxjr8q2n534b2lhkxd6l6wcddzjvnksi58zv11f9y0jjmr15wd8";
        authors = [
          "Robert Grosse <n210241048576@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "static_assertions" = rec {
        crateName = "static_assertions";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0gsl6xmw10gvn3zs1rv99laj5ig7ylffnh71f9l34js4nr4r7sx2";
        authors = [
          "Nikolai Vazquez"
        ];
        features = {
        };
      };
      "static_init" = rec {
        crateName = "static_init";
        version = "1.0.3";
        edition = "2021";
        sha256 = "1xn1z47q6gp74pbcd86p6w3m16k5ywl17v5qqdpw3hcqirbiqala";
        authors = [
          "Olivier Kannengieser <okannen@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("linux" == target."os" or null);
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.11.2";
            optional = true;
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.11.2";
            target = { target, features }: (!(("linux" == target."os" or null) || ("android" == target."os" or null)));
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core 0.8.6";
            optional = true;
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core 0.8.6";
            target = { target, features }: (!(("linux" == target."os" or null) || ("android" == target."os" or null)));
          }
          {
            name = "static_init_macro";
            packageId = "static_init_macro";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "minwindef" "winnt" "winbase" "synchapi" ];
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases 0.1.1";
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.11.2";
          }
        ];
        features = {
          "bench_nightly" = [ "criterion/real_blackbox" ];
          "debug_order" = [ "static_init_macro/debug_order" "parking_lot" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "parking_lot_core" = [ "dep:parking_lot_core" ];
          "test_pthread_support" = [ "thread_local" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "static_init_macro" = rec {
        crateName = "static_init_macro";
        version = "1.0.4";
        edition = "2021";
        sha256 = "0vyxdq5lnwbag6ljdwgv7k94r50f99v46czqz39wd7kkvn6wi28k";
        procMacro = true;
        authors = [
          "Olivier Kannengieser <okannen@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases 0.1.1";
          }
        ];
        features = {
        };
      };
      "stringprep" = rec {
        crateName = "stringprep";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1cb3jis4h2b767csk272zw92lc6jzfzvh8d6m1cd86yqjb9z6kbv";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-bidi";
            packageId = "unicode-bidi";
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
          }
          {
            name = "unicode-properties";
            packageId = "unicode-properties";
          }
        ];

      };
      "strsim 0.10.0" = rec {
        crateName = "strsim";
        version = "0.10.0";
        edition = "2015";
        sha256 = "08s69r4rcrahwnickvi0kq49z524ci50capybln83mg6b473qivk";
        authors = [
          "Danny Guo <danny@dannyguo.com>"
        ];

      };
      "strsim 0.11.1" = rec {
        crateName = "strsim";
        version = "0.11.1";
        edition = "2015";
        sha256 = "0kzvqlw8hxqb7y598w1s0hxlnmi84sg5vsipp3yg5na5d1rvba3x";
        authors = [
          "Danny Guo <danny@dannyguo.com>"
          "maxbachmann <oss@maxbachmann.de>"
        ];

      };
      "strum 0.24.1" = rec {
        crateName = "strum";
        version = "0.24.1";
        edition = "2018";
        sha256 = "0gz6cjhlps5idwasznklxdh2zsas6mxf99vr0n27j876q12n0gh6";
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "strum_macros" ];
          "phf" = [ "dep:phf" ];
          "strum_macros" = [ "dep:strum_macros" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "strum 0.26.3" = rec {
        crateName = "strum";
        version = "0.26.3";
        edition = "2018";
        sha256 = "01lgl6jvrf4j28v5kmx9bp480ygf1nhvac8b4p7rcj9hxw50zv4g";
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros 0.26.4";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros 0.26.4";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "strum_macros" ];
          "phf" = [ "dep:phf" ];
          "strum_macros" = [ "dep:strum_macros" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "std" "strum_macros" ];
      };
      "strum_macros 0.24.3" = rec {
        crateName = "strum_macros";
        version = "0.24.3";
        edition = "2018";
        sha256 = "0naxz2y38kwq5wgirmia64vvf6qhwy8j367rw966n62gsbh5nf0y";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.4.1";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "parsing" "extra-traits" ];
          }
        ];

      };
      "strum_macros 0.26.4" = rec {
        crateName = "strum_macros";
        version = "0.26.4";
        edition = "2018";
        sha256 = "1gl1wmq24b8md527cpyd5bw9rkbqldd7k1h38kf5ajd2ln2ywssc";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "parsing" "extra-traits" ];
          }
        ];

      };
      "substrate-bip39" = rec {
        crateName = "substrate-bip39";
        version = "0.6.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "substrate_bip39";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2";
            usesDefaultFeatures = false;
          }
          {
            name = "schnorrkel";
            packageId = "schnorrkel";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "hmac/std" "pbkdf2/std" "schnorrkel/std" "sha2/std" "zeroize/alloc" "zeroize/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "substrate-build-script-utils" = rec {
        crateName = "substrate-build-script-utils";
        version = "11.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "substrate_build_script_utils";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];

      };
      "substrate-frame-rpc-system" = rec {
        crateName = "substrate-frame-rpc-system";
        version = "43.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "substrate_frame_rpc_system";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "docify";
            packageId = "docify";
          }
          {
            name = "frame-system-rpc-runtime-api";
            packageId = "frame-system-rpc-runtime-api";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "jsonrpsee";
            packageId = "jsonrpsee";
            features = [ "client-core" "macros" "server-core" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
          }
          {
            name = "sc-rpc-api";
            packageId = "sc-rpc-api";
          }
          {
            name = "sc-transaction-pool-api";
            packageId = "sc-transaction-pool-api";
          }
          {
            name = "sp-api";
            packageId = "sp-api";
          }
          {
            name = "sp-block-builder";
            packageId = "sp-block-builder";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
        ];

      };
      "substrate-prometheus-endpoint" = rec {
        crateName = "substrate-prometheus-endpoint";
        version = "0.17.2";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "substrate_prometheus_endpoint";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "http-body-util";
            packageId = "http-body-util";
            usesDefaultFeatures = false;
          }
          {
            name = "hyper";
            packageId = "hyper 1.6.0";
            usesDefaultFeatures = false;
            features = [ "http1" "server" ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            usesDefaultFeatures = false;
            features = [ "server-auto" "server-graceful" "tokio" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "prometheus";
            packageId = "prometheus";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "parking_lot" ];
          }
        ];
        devDependencies = [
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [ "client-legacy" "tokio" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "rt-multi-thread" ];
          }
        ];

      };
      "substrate-test-client" = rec {
        crateName = "substrate-test-client";
        version = "2.0.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "substrate_test_client";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "array-bytes";
            packageId = "array-bytes";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-client-db";
            packageId = "sc-client-db";
            usesDefaultFeatures = false;
            features = [ "test-helpers" ];
          }
          {
            name = "sc-consensus";
            packageId = "sc-consensus";
          }
          {
            name = "sc-executor";
            packageId = "sc-executor";
          }
          {
            name = "sc-service";
            packageId = "sc-service";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-consensus";
            packageId = "sp-consensus";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-keyring";
            packageId = "sp-keyring";
          }
          {
            name = "sp-keystore";
            packageId = "sp-keystore";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
        ];

      };
      "substrate-test-runtime" = rec {
        crateName = "substrate-test-runtime";
        version = "2.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "substrate_test_runtime";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "array-bytes";
            packageId = "array-bytes";
            optional = true;
          }
          {
            name = "frame-executive";
            packageId = "frame-executive";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-metadata-hash-extension";
            packageId = "frame-metadata-hash-extension";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-support";
            packageId = "frame-support";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system";
            packageId = "frame-system";
            usesDefaultFeatures = false;
          }
          {
            name = "frame-system-rpc-runtime-api";
            packageId = "frame-system-rpc-runtime-api";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-babe";
            packageId = "pallet-babe";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-balances";
            packageId = "pallet-balances";
            usesDefaultFeatures = false;
          }
          {
            name = "pallet-timestamp";
            packageId = "pallet-timestamp";
            usesDefaultFeatures = false;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sc-service";
            packageId = "sc-service";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "sp-api";
            packageId = "sp-api";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-application-crypto";
            packageId = "sp-application-crypto";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-block-builder";
            packageId = "sp-block-builder";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-consensus-aura";
            packageId = "sp-consensus-aura";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-consensus-babe";
            packageId = "sp-consensus-babe";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-consensus-grandpa";
            packageId = "sp-consensus-grandpa";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-crypto-hashing";
            packageId = "sp-crypto-hashing";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-externalities";
            packageId = "sp-externalities";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-genesis-builder";
            packageId = "sp-genesis-builder";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-inherents";
            packageId = "sp-inherents";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-keyring";
            packageId = "sp-keyring";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-offchain";
            packageId = "sp-offchain";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "sp-session";
            packageId = "sp-session";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-state-machine";
            packageId = "sp-state-machine";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-transaction-pool";
            packageId = "sp-transaction-pool";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-trie";
            packageId = "sp-trie";
            usesDefaultFeatures = false;
          }
          {
            name = "sp-version";
            packageId = "sp-version";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "trie-db";
            packageId = "trie-db";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "substrate-wasm-builder";
            packageId = "substrate-wasm-builder";
            optional = true;
            features = [ "metadata-hash" ];
          }
        ];
        devDependencies = [
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "array-bytes" = [ "dep:array-bytes" ];
          "default" = [ "std" ];
          "disable-logging" = [ "sp-api/disable-logging" ];
          "sc-service" = [ "dep:sc-service" ];
          "std" = [ "array-bytes" "codec/std" "frame-executive/std" "frame-metadata-hash-extension/std" "frame-support/std" "frame-system-rpc-runtime-api/std" "frame-system/std" "log/std" "pallet-babe/std" "pallet-balances/std" "pallet-timestamp/std" "sc-service" "scale-info/std" "serde/std" "serde_json/std" "sp-api/std" "sp-application-crypto/std" "sp-block-builder/std" "sp-consensus-aura/std" "sp-consensus-babe/std" "sp-consensus-grandpa/std" "sp-core/std" "sp-crypto-hashing/std" "sp-externalities/std" "sp-genesis-builder/std" "sp-inherents/std" "sp-io/std" "sp-keyring/std" "sp-offchain/std" "sp-runtime/std" "sp-session/std" "sp-state-machine/std" "sp-transaction-pool/std" "sp-trie/std" "sp-version/std" "substrate-wasm-builder" "tracing/std" "trie-db/std" ];
          "substrate-wasm-builder" = [ "dep:substrate-wasm-builder" ];
        };
        resolvedDefaultFeatures = [ "array-bytes" "default" "sc-service" "std" "substrate-wasm-builder" ];
      };
      "substrate-test-runtime-client" = rec {
        crateName = "substrate-test-runtime-client";
        version = "2.0.0";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "substrate_test_runtime_client";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "sc-block-builder";
            packageId = "sc-block-builder";
          }
          {
            name = "sc-client-api";
            packageId = "sc-client-api";
          }
          {
            name = "sc-consensus";
            packageId = "sc-consensus";
          }
          {
            name = "sp-api";
            packageId = "sp-api";
          }
          {
            name = "sp-blockchain";
            packageId = "sp-blockchain";
          }
          {
            name = "sp-consensus";
            packageId = "sp-consensus";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
          }
          {
            name = "sp-runtime";
            packageId = "sp-runtime";
          }
          {
            name = "substrate-test-client";
            packageId = "substrate-test-client";
          }
          {
            name = "substrate-test-runtime";
            packageId = "substrate-test-runtime";
          }
        ];

      };
      "substrate-wasm-builder" = rec {
        crateName = "substrate-wasm-builder";
        version = "26.0.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/paritytech/polkadot-sdk.git";
          rev = "f4dba53bfac614b054735aa725d2b0c44efda414";
          sha256 = "1lkhnglpg7gzjrwm94z4qxb3h56j7a0bs6fkqphrs6qf2dchmpb2";
        };
        libName = "substrate_wasm_builder";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "array-bytes";
            packageId = "array-bytes";
            optional = true;
          }
          {
            name = "build-helper";
            packageId = "build-helper";
          }
          {
            name = "cargo_metadata";
            packageId = "cargo_metadata";
          }
          {
            name = "console";
            packageId = "console";
          }
          {
            name = "filetime";
            packageId = "filetime";
          }
          {
            name = "frame-metadata";
            packageId = "frame-metadata";
            optional = true;
            features = [ "current" "unstable" ];
          }
          {
            name = "jobserver";
            packageId = "jobserver";
          }
          {
            name = "merkleized-metadata";
            packageId = "merkleized-metadata";
            optional = true;
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            optional = true;
          }
          {
            name = "parity-wasm";
            packageId = "parity-wasm";
          }
          {
            name = "polkavm-linker";
            packageId = "polkavm-linker";
          }
          {
            name = "sc-executor";
            packageId = "sc-executor";
            optional = true;
          }
          {
            name = "shlex";
            packageId = "shlex";
          }
          {
            name = "sp-core";
            packageId = "sp-core";
            optional = true;
          }
          {
            name = "sp-io";
            packageId = "sp-io";
            optional = true;
          }
          {
            name = "sp-maybe-compressed-blob";
            packageId = "sp-maybe-compressed-blob";
          }
          {
            name = "sp-tracing";
            packageId = "sp-tracing";
            optional = true;
          }
          {
            name = "sp-version";
            packageId = "sp-version";
            optional = true;
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
            features = [ "derive" ];
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "toml";
            packageId = "toml 0.8.22";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
          {
            name = "wasm-opt";
            packageId = "wasm-opt";
          }
        ];
        features = {
          "array-bytes" = [ "dep:array-bytes" ];
          "codec" = [ "dep:codec" ];
          "frame-metadata" = [ "dep:frame-metadata" ];
          "merkleized-metadata" = [ "dep:merkleized-metadata" ];
          "metadata-hash" = [ "array-bytes" "codec" "frame-metadata" "merkleized-metadata" "sc-executor" "sp-core" "sp-io" "sp-tracing" "sp-version" ];
          "sc-executor" = [ "dep:sc-executor" ];
          "sp-core" = [ "dep:sp-core" ];
          "sp-io" = [ "dep:sp-io" ];
          "sp-tracing" = [ "dep:sp-tracing" ];
          "sp-version" = [ "dep:sp-version" ];
        };
        resolvedDefaultFeatures = [ "array-bytes" "codec" "frame-metadata" "merkleized-metadata" "metadata-hash" "sc-executor" "sp-core" "sp-io" "sp-tracing" "sp-version" ];
      };
      "subtle 1.0.0" = rec {
        crateName = "subtle";
        version = "1.0.0";
        edition = "2015";
        sha256 = "1vm80mxbwfj334izwm8x8l65v1xl9hr0kwrg36r1rq565fkaarrd";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        features = {
          "default" = [ "std" "i128" ];
        };
      };
      "subtle 2.6.1" = rec {
        crateName = "subtle";
        version = "2.6.1";
        edition = "2018";
        sha256 = "14ijxaymghbl1p0wql9cib5zlwiina7kall6w7g89csprkgbvhhk";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        features = {
          "default" = [ "std" "i128" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "syn 1.0.109" = rec {
        crateName = "syn";
        version = "1.0.109";
        edition = "2018";
        sha256 = "0ds2if4600bd59wsv7jjgfkayfzy3hnazs394kz6zdkmna8l3dkj";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
          "quote" = [ "dep:quote" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" "quote" "visit" ];
      };
      "syn 2.0.101" = rec {
        crateName = "syn";
        version = "2.0.101";
        edition = "2021";
        sha256 = "1brwsh7fn3bnbj50d2lpwy9akimzb3lghz0ai89j8fhvjkybgqlc";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "dep:quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote?/proc-macro" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "fold" "full" "parsing" "printing" "proc-macro" "visit" "visit-mut" ];
      };
      "synstructure 0.12.6" = rec {
        crateName = "synstructure";
        version = "0.12.6";
        edition = "2018";
        sha256 = "03r1lydbf3japnlpc4wka7y90pmz1i0danaj3f9a7b431akdlszk";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            usesDefaultFeatures = false;
            features = [ "derive" "parsing" "printing" "clone-impls" "visit" "extra-traits" ];
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "syn/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "synstructure 0.13.2" = rec {
        crateName = "synstructure";
        version = "0.13.2";
        edition = "2018";
        sha256 = "1lh9lx3r3jb18f8sbj29am5hm9jymvbwh6jb1izsnnxgvgrp12kj";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "derive" "parsing" "printing" "clone-impls" "visit" "extra-traits" ];
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "syn/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "system-configuration" = rec {
        crateName = "system-configuration";
        version = "0.6.1";
        edition = "2021";
        sha256 = "0sxslml567zm0v8g732314vd2gk9sd3k4xj22xk6p64xir29v1rw";
        libName = "system_configuration";
        authors = [
          "Mullvad VPN"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation 0.9.4";
          }
          {
            name = "system-configuration-sys";
            packageId = "system-configuration-sys";
          }
        ];

      };
      "system-configuration-sys" = rec {
        crateName = "system-configuration-sys";
        version = "0.6.0";
        edition = "2021";
        sha256 = "1i5sqrmgy58l4704hibjbl36hclddglh73fb3wx95jnmrq81n7cf";
        libName = "system_configuration_sys";
        authors = [
          "Mullvad VPN"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "tap" = rec {
        crateName = "tap";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0sc3gl4nldqpvyhqi3bbd0l9k7fngrcl4zs47n314nqqk4bpx4sm";
        authors = [
          "Elliott Linder <elliott.darfink@gmail.com>"
          "myrrlyn <self@myrrlyn.dev>"
        ];

      };
      "target-lexicon" = rec {
        crateName = "target-lexicon";
        version = "0.12.16";
        edition = "2018";
        sha256 = "1cg3bnx1gdkdr5hac1hzxy64fhw4g7dqkd0n3dxy5lfngpr1mi31";
        libName = "target_lexicon";
        authors = [
          "Dan Gohman <sunfish@mozilla.com>"
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde_support" = [ "serde" "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "tempfile" = rec {
        crateName = "tempfile";
        version = "3.20.0";
        edition = "2021";
        sha256 = "18fnp7mjckd9c9ldlb2zhp1hd4467y2hpvx9l50j97rlhlwlx9p8";
        authors = [
          "Steven Allen <steven@stebalien.com>"
          "The Rust Project Developers"
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Jason White <me@jasonwhite.io>"
        ];
        dependencies = [
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) || (target."windows" or false) || ("wasi" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustix";
            packageId = "rustix 1.0.7";
            target = { target, features }: ((target."unix" or false) || ("wasi" == target."os" or null));
            features = [ "fs" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Storage_FileSystem" "Win32_Foundation" ];
          }
        ];
        features = {
          "default" = [ "getrandom" ];
          "getrandom" = [ "dep:getrandom" ];
        };
        resolvedDefaultFeatures = [ "default" "getrandom" ];
      };
      "termcolor" = rec {
        crateName = "termcolor";
        version = "1.4.1";
        edition = "2018";
        sha256 = "0mappjh3fj3p2nmrg4y7qv94rchwi9mzmgmfflr8p2awdj7lyy86";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "terminal_size" = rec {
        crateName = "terminal_size";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1vdm5xhzn7sqcsr762vmnavkhid3hs8w8qjyh9iwrr1990f4iij5";
        authors = [
          "Andrew Chin <achin@eminence32.net>"
        ];
        dependencies = [
          {
            name = "rustix";
            packageId = "rustix 1.0.7";
            target = { target, features }: (target."unix" or false);
            features = [ "termios" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Console" ];
          }
        ];

      };
      "termtree" = rec {
        crateName = "termtree";
        version = "0.5.1";
        edition = "2021";
        sha256 = "10s610ax6nb70yi7xfmwcb6d3wi9sj5isd0m63gy2pizr2zgwl4g";

      };
      "testcontainers" = rec {
        crateName = "testcontainers";
        version = "0.15.0";
        edition = "2021";
        sha256 = "007cij3l1bjr3giabivymzwnlfm47xn737wqmrdsy8gmswqjjggq";
        authors = [
          "CoBloX developers <team@coblox.tech>"
        ];
        dependencies = [
          {
            name = "bollard-stubs";
            packageId = "bollard-stubs";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
        ];
        features = {
          "async-trait" = [ "dep:async-trait" ];
          "bollard" = [ "dep:bollard" ];
          "conquer-once" = [ "dep:conquer-once" ];
          "experimental" = [ "async-trait" "bollard" "tokio" ];
          "signal-hook" = [ "dep:signal-hook" ];
          "tokio" = [ "dep:tokio" ];
          "watchdog" = [ "signal-hook" "conquer-once" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "testcontainers-modules" = rec {
        crateName = "testcontainers-modules";
        version = "0.1.4";
        edition = "2021";
        sha256 = "1kdnifdx2bznf85i79w9mgsdz1gl59dnpbza314fa0vqfp1hbi27";
        libName = "testcontainers_modules";
        dependencies = [
          {
            name = "testcontainers";
            packageId = "testcontainers";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" "postgres" ];
      };
      "thiserror 1.0.69" = rec {
        crateName = "thiserror";
        version = "1.0.69";
        edition = "2021";
        sha256 = "0lizjay08agcr5hs9yfzzj6axs53a2rgx070a1dsi3jpkcrzbamn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl 1.0.69";
          }
        ];

      };
      "thiserror 2.0.12" = rec {
        crateName = "thiserror";
        version = "2.0.12";
        edition = "2021";
        sha256 = "024791nsc0np63g2pq30cjf9acj38z3jwx9apvvi8qsqmqnqlysn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl 2.0.12";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "thiserror-impl 1.0.69" = rec {
        crateName = "thiserror-impl";
        version = "1.0.69";
        edition = "2021";
        sha256 = "1h84fmn2nai41cxbhk6pqf46bxqq1b344v8yz089w1chzi76rvjg";
        procMacro = true;
        libName = "thiserror_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "thiserror-impl 2.0.12" = rec {
        crateName = "thiserror-impl";
        version = "2.0.12";
        edition = "2021";
        sha256 = "07bsn7shydaidvyyrm7jz29vp78vrxr9cr9044rfmn078lmz8z3z";
        procMacro = true;
        libName = "thiserror_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "thread-id" = rec {
        crateName = "thread-id";
        version = "4.2.2";
        edition = "2015";
        sha256 = "1sn0dkvi4kvxm9g50gs8yzw4p7655pyzgb1l3mzdn06ipmdz5s6g";
        libName = "thread_id";
        authors = [
          "Ruud van Asseldonk <dev@veniogames.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "processthreadsapi" ];
          }
        ];

      };
      "thread_local" = rec {
        crateName = "thread_local";
        version = "1.1.8";
        edition = "2021";
        sha256 = "173i5lyjh011gsimk21np9jn8al18rxsrkjli20a7b8ks2xgk7lb";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
        };
      };
      "threadpool" = rec {
        crateName = "threadpool";
        version = "1.8.1";
        edition = "2015";
        sha256 = "1amgfyzvynbm8pacniivzq9r0fh3chhs7kijic81j76l6c5ycl6h";
        authors = [
          "The Rust Project Developers"
          "Corey Farwell <coreyf@rwell.org>"
          "Stefan Schindler <dns2utf8@estada.ch>"
        ];
        dependencies = [
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
        ];

      };
      "tikv-jemalloc-sys" = rec {
        crateName = "tikv-jemalloc-sys";
        version = "0.5.4+5.3.0-patched";
        edition = "2018";
        links = "jemalloc";
        sha256 = "1lc5vm1p9dqdvd3mn3264zddnd7z6i95ch3y69prnjgxp0y480ll";
        libName = "tikv_jemalloc_sys";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Gonzalo Brito Gadeschi <gonzalobg88@gmail.com>"
          "The TiKV Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "background_threads" = [ "background_threads_runtime_support" ];
          "default" = [ "background_threads_runtime_support" ];
        };
        resolvedDefaultFeatures = [ "background_threads_runtime_support" "default" "unprefixed_malloc_on_supported_platforms" ];
      };
      "time" = rec {
        crateName = "time";
        version = "0.3.41";
        edition = "2021";
        sha256 = "0h0cpiyya8cjlrh00d2r72bmgg4lsdcncs76qpwy0rn2kghijxla";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];
        dependencies = [
          {
            name = "deranged";
            packageId = "deranged";
            usesDefaultFeatures = false;
            features = [ "powerfmt" ];
          }
          {
            name = "itoa";
            packageId = "itoa";
            optional = true;
          }
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "powerfmt";
            packageId = "powerfmt";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "time-core";
            packageId = "time-core";
          }
          {
            name = "time-macros";
            packageId = "time-macros";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "time-macros";
            packageId = "time-macros";
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" ];
          "default" = [ "std" ];
          "formatting" = [ "dep:itoa" "std" "time-macros?/formatting" ];
          "large-dates" = [ "time-macros?/large-dates" ];
          "local-offset" = [ "std" "dep:libc" "dep:num_threads" ];
          "macros" = [ "dep:time-macros" ];
          "parsing" = [ "time-macros?/parsing" ];
          "quickcheck" = [ "dep:quickcheck" "alloc" "deranged/quickcheck" ];
          "rand" = [ "dep:rand" "deranged/rand" ];
          "serde" = [ "dep:serde" "time-macros?/serde" "deranged/serde" ];
          "serde-human-readable" = [ "serde" "formatting" "parsing" ];
          "serde-well-known" = [ "serde" "formatting" "parsing" ];
          "std" = [ "alloc" "deranged/std" ];
          "wasm-bindgen" = [ "dep:js-sys" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "formatting" "macros" "parsing" "serde" "std" ];
      };
      "time-core" = rec {
        crateName = "time-core";
        version = "0.1.4";
        edition = "2021";
        sha256 = "0z5h9fknvdvbs2k2s1chpi3ab3jvgkfhdnqwrvixjngm263s7sf9";
        libName = "time_core";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];

      };
      "time-macros" = rec {
        crateName = "time-macros";
        version = "0.2.22";
        edition = "2021";
        sha256 = "0jcaxpw220han2bzbrdlpqhy1s5k9i8ri3lw6n5zv4zcja9p69im";
        procMacro = true;
        libName = "time_macros";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];
        dependencies = [
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "time-core";
            packageId = "time-core";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "formatting" "parsing" "serde" ];
      };
      "time-source" = rec {
        crateName = "time-source";
        version = "1.7.0";
        edition = "2024";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./toolkit/utils/time-source; };
        libName = "time_source";
        authors = [
          "IOG"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" "mock" ];
      };
      "tiny-keccak" = rec {
        crateName = "tiny-keccak";
        version = "2.0.2";
        edition = "2018";
        sha256 = "0dq2x0hjffmixgyf6xv9wgsbcxkd65ld0wrfqmagji8a829kg79c";
        libName = "tiny_keccak";
        authors = [
          "debris <marek.kotewicz@gmail.com>"
        ];
        dependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
          }
        ];
        features = {
          "fips202" = [ "keccak" "shake" "sha3" ];
          "kmac" = [ "cshake" ];
          "parallel_hash" = [ "cshake" ];
          "sp800" = [ "cshake" "kmac" "tuple_hash" ];
          "tuple_hash" = [ "cshake" ];
        };
        resolvedDefaultFeatures = [ "default" "shake" ];
      };
      "tinystr" = rec {
        crateName = "tinystr";
        version = "0.8.1";
        edition = "2021";
        sha256 = "12sc6h3hnn6x78iycm5v6wrs2xhxph0ydm43yyn7gdfw8l8nsksx";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "zerovec?/alloc" ];
          "databake" = [ "dep:databake" ];
          "default" = [ "alloc" ];
          "serde" = [ "dep:serde" ];
          "zerovec" = [ "dep:zerovec" ];
        };
        resolvedDefaultFeatures = [ "alloc" "zerovec" ];
      };
      "tinyvec" = rec {
        crateName = "tinyvec";
        version = "1.9.0";
        edition = "2018";
        sha256 = "0w9w8qcifns9lzvlbfwa01y0skhr542anwa3rpn28rg82wgndcq9";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec_macros";
            packageId = "tinyvec_macros";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "tinyvec_macros" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "borsh" = [ "dep:borsh" ];
          "generic-array" = [ "dep:generic-array" ];
          "latest_stable_rust" = [ "rustc_1_61" ];
          "real_blackbox" = [ "criterion/real_blackbox" ];
          "rustc_1_55" = [ "rustc_1_40" ];
          "rustc_1_57" = [ "rustc_1_55" ];
          "rustc_1_61" = [ "rustc_1_57" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "tinyvec_macros" = [ "dep:tinyvec_macros" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "grab_spare_slice" "std" "tinyvec_macros" ];
      };
      "tinyvec_macros" = rec {
        crateName = "tinyvec_macros";
        version = "0.1.1";
        edition = "2018";
        sha256 = "081gag86208sc3y6sdkshgw3vysm5d34p431dzw0bshz66ncng0z";
        authors = [
          "Soveu <marx.tomasz@gmail.com>"
        ];

      };
      "tokio" = rec {
        crateName = "tokio";
        version = "1.45.0";
        edition = "2021";
        sha256 = "0rg1i83awynp1xnhz4y1klmi1jq787pa8wgy4gxy1vgr9rlwl4r5";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            target = { target, features }: (target."tokio_taskdump" or false);
          }
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "mio";
            packageId = "mio 1.0.3";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
            features = [ "all" ];
          }
          {
            name = "tokio-macros";
            packageId = "tokio-macros";
            optional = true;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {target, features}: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            target = {target, features}: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = {target, features}: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Security_Authorization" ];
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "full" = [ "fs" "io-util" "io-std" "macros" "net" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "sync" "time" ];
          "io-util" = [ "bytes" ];
          "libc" = [ "dep:libc" ];
          "macros" = [ "tokio-macros" ];
          "mio" = [ "dep:mio" ];
          "net" = [ "libc" "mio/os-poll" "mio/os-ext" "mio/net" "socket2" "windows-sys/Win32_Foundation" "windows-sys/Win32_Security" "windows-sys/Win32_Storage_FileSystem" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_System_SystemServices" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "process" = [ "bytes" "libc" "mio/os-poll" "mio/os-ext" "mio/net" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Threading" "windows-sys/Win32_System_WindowsProgramming" ];
          "rt-multi-thread" = [ "rt" ];
          "signal" = [ "libc" "mio/os-poll" "mio/net" "mio/os-ext" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Console" ];
          "signal-hook-registry" = [ "dep:signal-hook-registry" ];
          "socket2" = [ "dep:socket2" ];
          "test-util" = [ "rt" "sync" "time" ];
          "tokio-macros" = [ "dep:tokio-macros" ];
          "tracing" = [ "dep:tracing" ];
          "windows-sys" = [ "dep:windows-sys" ];
        };
        resolvedDefaultFeatures = [ "bytes" "default" "fs" "full" "io-std" "io-util" "libc" "macros" "mio" "net" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "signal-hook-registry" "socket2" "sync" "test-util" "time" "tokio-macros" "windows-sys" ];
      };
      "tokio-macros" = rec {
        crateName = "tokio-macros";
        version = "2.5.0";
        edition = "2021";
        sha256 = "1f6az2xbvqp7am417b78d1za8axbvjvxnmkakz9vr8s52czx81kf";
        procMacro = true;
        libName = "tokio_macros";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "tokio-retry" = rec {
        crateName = "tokio-retry";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0kr1hnm5dmb9gfkby88yg2xj8g6x4i4gipva0c8ca3xyxhvfnmvz";
        libName = "tokio_retry";
        authors = [
          "Sam Rijs <srijs@airpost.net>"
        ];
        dependencies = [
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "time" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];

      };
      "tokio-rustls" = rec {
        crateName = "tokio-rustls";
        version = "0.26.2";
        edition = "2021";
        sha256 = "16wf007q3584j46wc4s0zc4szj6280g23hka6x6bgs50l4v7nwlf";
        libName = "tokio_rustls";
        dependencies = [
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "aws-lc-rs" = [ "aws_lc_rs" ];
          "aws_lc_rs" = [ "rustls/aws_lc_rs" ];
          "default" = [ "logging" "tls12" "aws_lc_rs" ];
          "fips" = [ "rustls/fips" ];
          "logging" = [ "rustls/logging" ];
          "ring" = [ "rustls/ring" ];
          "tls12" = [ "rustls/tls12" ];
        };
        resolvedDefaultFeatures = [ "logging" "ring" "tls12" ];
      };
      "tokio-stream" = rec {
        crateName = "tokio-stream";
        version = "0.1.17";
        edition = "2021";
        sha256 = "0ix0770hfp4x5rh5bl7vsnr3d4iz4ms43i522xw70xaap9xqv9gc";
        libName = "tokio_stream";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" "test-util" ];
          }
        ];
        features = {
          "default" = [ "time" ];
          "fs" = [ "tokio/fs" ];
          "full" = [ "time" "net" "io-util" "fs" "sync" "signal" ];
          "io-util" = [ "tokio/io-util" ];
          "net" = [ "tokio/net" ];
          "signal" = [ "tokio/signal" ];
          "sync" = [ "tokio/sync" "tokio-util" ];
          "time" = [ "tokio/time" ];
          "tokio-util" = [ "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "default" "fs" "sync" "time" "tokio-util" ];
      };
      "tokio-test" = rec {
        crateName = "tokio-test";
        version = "0.4.4";
        edition = "2021";
        sha256 = "1xzri2m3dg8nzdyznm77nymvil9cyh1gfdfrbnska51iqfmvls14";
        libName = "tokio_test";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "async-stream";
            packageId = "async-stream";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt" "sync" "time" "test-util" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];

      };
      "tokio-tungstenite" = rec {
        crateName = "tokio-tungstenite";
        version = "0.26.2";
        edition = "2018";
        sha256 = "117hwxfwmpxazxks076w5i73xj7cgv5iqs7x2rnbzln60zvaz7bs";
        libName = "tokio_tungstenite";
        authors = [
          "Daniel Abramov <dabramov@snapview.de>"
          "Alexey Galakhov <agalakhov@snapview.de>"
        ];
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "sink" "std" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-native-certs";
            packageId = "rustls-native-certs";
            optional = true;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "io-util" ];
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tungstenite";
            packageId = "tungstenite";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "io-std" "macros" "net" "rt-multi-thread" "time" ];
          }
        ];
        features = {
          "__rustls-tls" = [ "rustls" "rustls-pki-types" "tokio-rustls" "stream" "tungstenite/__rustls-tls" "handshake" ];
          "connect" = [ "stream" "tokio/net" "handshake" ];
          "default" = [ "connect" "handshake" ];
          "handshake" = [ "tungstenite/handshake" ];
          "native-tls" = [ "native-tls-crate" "tokio-native-tls" "stream" "tungstenite/native-tls" "handshake" ];
          "native-tls-crate" = [ "dep:native-tls-crate" ];
          "native-tls-vendored" = [ "native-tls" "native-tls-crate/vendored" "tungstenite/native-tls-vendored" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-pki-types" = [ "dep:rustls-pki-types" ];
          "rustls-tls-native-roots" = [ "__rustls-tls" "rustls-native-certs" ];
          "rustls-tls-webpki-roots" = [ "__rustls-tls" "webpki-roots" ];
          "tokio-native-tls" = [ "dep:tokio-native-tls" ];
          "tokio-rustls" = [ "dep:tokio-rustls" ];
          "url" = [ "tungstenite/url" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "__rustls-tls" "connect" "default" "handshake" "rustls" "rustls-native-certs" "rustls-pki-types" "rustls-tls-native-roots" "stream" "tokio-rustls" "url" ];
      };
      "tokio-util" = rec {
        crateName = "tokio-util";
        version = "0.7.15";
        edition = "2021";
        sha256 = "1pypd9lm1fdnpw0779pqvc16qqrxjy63dgfm20ajhpbdmnlkk9b6";
        libName = "tokio_util";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "__docs_rs" = [ "futures-util" ];
          "compat" = [ "futures-io" ];
          "full" = [ "codec" "compat" "io-util" "time" "net" "rt" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-util" = [ "dep:futures-util" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "io-util" = [ "io" "tokio/rt" "tokio/io-util" ];
          "net" = [ "tokio/net" ];
          "rt" = [ "tokio/rt" "tokio/sync" "futures-util" "hashbrown" ];
          "slab" = [ "dep:slab" ];
          "time" = [ "tokio/time" "slab" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "codec" "compat" "default" "futures-io" "io" ];
      };
      "toml 0.5.11" = rec {
        crateName = "toml";
        version = "0.5.11";
        edition = "2018";
        sha256 = "0d2266nx8b3n22c7k24x4428z6di8n83a9n466jm7a2hipfz1xzl";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "indexmap" = [ "dep:indexmap" ];
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "toml 0.8.22" = rec {
        crateName = "toml";
        version = "0.8.22";
        edition = "2021";
        sha256 = "1bjsrmi9w88v4sik8bd6chp0d7bnb9dzzmxyb5xd3i083yfk5bh5";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
            features = [ "serde" ];
          }
          {
            name = "toml_edit";
            packageId = "toml_edit";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "parse" "display" ];
          "display" = [ "dep:toml_edit" "toml_edit?/display" ];
          "indexmap" = [ "dep:indexmap" ];
          "parse" = [ "dep:toml_edit" "toml_edit?/parse" ];
          "preserve_order" = [ "indexmap" ];
          "unbounded" = [ "toml_edit?/unbounded" ];
        };
        resolvedDefaultFeatures = [ "default" "display" "parse" ];
      };
      "toml_datetime" = rec {
        crateName = "toml_datetime";
        version = "0.6.9";
        edition = "2021";
        sha256 = "18q9ix4isxw2n4mij3v6x0pb4jw1hbxbc5wbprlbq91yjrddp99x";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "toml_edit" = rec {
        crateName = "toml_edit";
        version = "0.22.26";
        edition = "2021";
        sha256 = "0zhk135y6rn6jxik7knia3xblpc545fw6b4xcpkv7idj7n3nh01i";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.9.0";
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "toml_write";
            packageId = "toml_write";
            optional = true;
          }
          {
            name = "winnow";
            packageId = "winnow";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "parse" "display" ];
          "display" = [ "dep:toml_write" ];
          "parse" = [ "dep:winnow" ];
          "perf" = [ "dep:kstring" ];
          "serde" = [ "dep:serde" "toml_datetime/serde" "dep:serde_spanned" ];
        };
        resolvedDefaultFeatures = [ "display" "parse" "serde" ];
      };
      "toml_write" = rec {
        crateName = "toml_write";
        version = "0.1.1";
        edition = "2021";
        sha256 = "0xhhyipq7vivp8pfmjkhma4zn9cs5fyybggwwxz9mqnqw7gl5fdz";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "tower" = rec {
        crateName = "tower";
        version = "0.4.13";
        edition = "2018";
        sha256 = "073wncyqav4sak1p755hf6vl66njgfc1z1g1di9rxx3cvvh9pymq";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "pin-project";
            packageId = "pin-project";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "__common" = [ "futures-core" "pin-project-lite" ];
          "balance" = [ "discover" "load" "ready-cache" "make" "rand" "slab" ];
          "buffer" = [ "__common" "tokio/sync" "tokio/rt" "tokio-util" "tracing" ];
          "default" = [ "log" ];
          "discover" = [ "__common" ];
          "filter" = [ "__common" "futures-util" ];
          "full" = [ "balance" "buffer" "discover" "filter" "hedge" "limit" "load" "load-shed" "make" "ready-cache" "reconnect" "retry" "spawn-ready" "steer" "timeout" "util" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-util" = [ "dep:futures-util" ];
          "hdrhistogram" = [ "dep:hdrhistogram" ];
          "hedge" = [ "util" "filter" "futures-util" "hdrhistogram" "tokio/time" "tracing" ];
          "indexmap" = [ "dep:indexmap" ];
          "limit" = [ "__common" "tokio/time" "tokio/sync" "tokio-util" "tracing" ];
          "load" = [ "__common" "tokio/time" "tracing" ];
          "load-shed" = [ "__common" ];
          "log" = [ "tracing/log" ];
          "make" = [ "futures-util" "pin-project-lite" "tokio/io-std" ];
          "pin-project" = [ "dep:pin-project" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "rand" = [ "dep:rand" ];
          "ready-cache" = [ "futures-core" "futures-util" "indexmap" "tokio/sync" "tracing" "pin-project-lite" ];
          "reconnect" = [ "make" "tokio/io-std" "tracing" ];
          "retry" = [ "__common" "tokio/time" ];
          "slab" = [ "dep:slab" ];
          "spawn-ready" = [ "__common" "futures-util" "tokio/sync" "tokio/rt" "util" "tracing" ];
          "timeout" = [ "pin-project-lite" "tokio/time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-stream" = [ "dep:tokio-stream" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "tracing" = [ "dep:tracing" ];
          "util" = [ "__common" "futures-util" "pin-project" ];
        };
        resolvedDefaultFeatures = [ "__common" "default" "futures-core" "futures-util" "log" "pin-project" "pin-project-lite" "tracing" "util" ];
      };
      "tower-http" = rec {
        crateName = "tower-http";
        version = "0.5.2";
        edition = "2018";
        sha256 = "1xakj3x0anp55gjqibiwvzma5iz0w9pcjsr7qk97sx4qm4sd970y";
        libName = "tower_http";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.1";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
        ];
        features = {
          "async-compression" = [ "dep:async-compression" ];
          "auth" = [ "base64" "validate-request" ];
          "base64" = [ "dep:base64" ];
          "catch-panic" = [ "tracing" "futures-util/std" ];
          "compression-br" = [ "async-compression/brotli" "futures-core" "tokio-util" "tokio" ];
          "compression-deflate" = [ "async-compression/zlib" "futures-core" "tokio-util" "tokio" ];
          "compression-full" = [ "compression-br" "compression-deflate" "compression-gzip" "compression-zstd" ];
          "compression-gzip" = [ "async-compression/gzip" "futures-core" "tokio-util" "tokio" ];
          "compression-zstd" = [ "async-compression/zstd" "futures-core" "tokio-util" "tokio" ];
          "decompression-br" = [ "async-compression/brotli" "futures-core" "tokio-util" "tokio" ];
          "decompression-deflate" = [ "async-compression/zlib" "futures-core" "tokio-util" "tokio" ];
          "decompression-full" = [ "decompression-br" "decompression-deflate" "decompression-gzip" "decompression-zstd" ];
          "decompression-gzip" = [ "async-compression/gzip" "futures-core" "tokio-util" "tokio" ];
          "decompression-zstd" = [ "async-compression/zstd" "futures-core" "tokio-util" "tokio" ];
          "follow-redirect" = [ "futures-util" "iri-string" "tower/util" ];
          "fs" = [ "futures-util" "tokio/fs" "tokio-util/io" "tokio/io-util" "dep:http-range-header" "mime_guess" "mime" "percent-encoding" "httpdate" "set-status" "futures-util/alloc" "tracing" ];
          "full" = [ "add-extension" "auth" "catch-panic" "compression-full" "cors" "decompression-full" "follow-redirect" "fs" "limit" "map-request-body" "map-response-body" "metrics" "normalize-path" "propagate-header" "redirect" "request-id" "sensitive-headers" "set-header" "set-status" "timeout" "trace" "util" "validate-request" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-util" = [ "dep:futures-util" ];
          "httpdate" = [ "dep:httpdate" ];
          "iri-string" = [ "dep:iri-string" ];
          "metrics" = [ "tokio/time" ];
          "mime" = [ "dep:mime" ];
          "mime_guess" = [ "dep:mime_guess" ];
          "percent-encoding" = [ "dep:percent-encoding" ];
          "request-id" = [ "uuid" ];
          "timeout" = [ "tokio/time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "tower" = [ "dep:tower" ];
          "trace" = [ "tracing" ];
          "tracing" = [ "dep:tracing" ];
          "util" = [ "tower" ];
          "uuid" = [ "dep:uuid" ];
          "validate-request" = [ "mime" ];
        };
        resolvedDefaultFeatures = [ "cors" "default" ];
      };
      "tower-layer" = rec {
        crateName = "tower-layer";
        version = "0.3.3";
        edition = "2018";
        sha256 = "03kq92fdzxin51w8iqix06dcfgydyvx7yr6izjq0p626v9n2l70j";
        libName = "tower_layer";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];

      };
      "tower-service" = rec {
        crateName = "tower-service";
        version = "0.3.3";
        edition = "2018";
        sha256 = "1hzfkvkci33ra94xjx64vv3pp0sq346w06fpkcdwjcid7zhvdycd";
        libName = "tower_service";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];

      };
      "tracing" = rec {
        crateName = "tracing";
        version = "0.1.41";
        edition = "2018";
        sha256 = "1l5xrzyjfyayrwhvhldfnwdyligi1mpqm8mzbi2m1d6y6p2hlkkq";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tracing-attributes";
            packageId = "tracing-attributes";
            optional = true;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "attributes" = [ "tracing-attributes" ];
          "default" = [ "std" "attributes" ];
          "log" = [ "dep:log" ];
          "log-always" = [ "log" ];
          "std" = [ "tracing-core/std" ];
          "tracing-attributes" = [ "dep:tracing-attributes" ];
          "valuable" = [ "tracing-core/valuable" ];
        };
        resolvedDefaultFeatures = [ "attributes" "default" "log" "std" "tracing-attributes" ];
      };
      "tracing-attributes" = rec {
        crateName = "tracing-attributes";
        version = "0.1.28";
        edition = "2018";
        sha256 = "0v92l9cxs42rdm4m5hsa8z7ln1xsiw1zc2iil8c6k7lzq0jf2nir";
        procMacro = true;
        libName = "tracing_attributes";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <dbarsky@amazon.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "full" "parsing" "printing" "visit-mut" "clone-impls" "extra-traits" "proc-macro" ];
          }
        ];
        features = {
        };
      };
      "tracing-core" = rec {
        crateName = "tracing-core";
        version = "0.1.33";
        edition = "2018";
        sha256 = "170gc7cxyjx824r9kr17zc9gvzx89ypqfdzq259pr56gg5bwjwp6";
        libName = "tracing_core";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "valuable";
            packageId = "valuable";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."tracing_unstable" or false);
          }
        ];
        features = {
          "default" = [ "std" "valuable?/std" ];
          "once_cell" = [ "dep:once_cell" ];
          "std" = [ "once_cell" ];
          "valuable" = [ "dep:valuable" ];
        };
        resolvedDefaultFeatures = [ "default" "once_cell" "std" ];
      };
      "tracing-futures" = rec {
        crateName = "tracing-futures";
        version = "0.2.5";
        edition = "2018";
        sha256 = "1wimg0iwa2ldq7xv98lvivvf3q9ykfminig8r1bs0ig22np9bl4p";
        libName = "tracing_futures";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "pin-project";
            packageId = "pin-project";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std-future" "std" ];
          "futures" = [ "dep:futures" ];
          "futures-01" = [ "futures_01" "std" ];
          "futures-03" = [ "std-future" "futures" "futures-task" "std" ];
          "futures-task" = [ "dep:futures-task" ];
          "futures_01" = [ "dep:futures_01" ];
          "pin-project" = [ "dep:pin-project" ];
          "std" = [ "tracing/std" ];
          "std-future" = [ "pin-project" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-executor" = [ "dep:tokio-executor" ];
        };
        resolvedDefaultFeatures = [ "default" "pin-project" "std" "std-future" ];
      };
      "tracing-log" = rec {
        crateName = "tracing-log";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1hs77z026k730ij1a9dhahzrl0s073gfa2hm5p0fbl0b80gmz1gf";
        libName = "tracing_log";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "default" = [ "log-tracer" "std" ];
          "interest-cache" = [ "lru" "ahash" ];
          "lru" = [ "dep:lru" ];
          "std" = [ "log/std" ];
        };
        resolvedDefaultFeatures = [ "default" "log-tracer" "std" ];
      };
      "tracing-subscriber" = rec {
        crateName = "tracing-subscriber";
        version = "0.3.19";
        edition = "2018";
        sha256 = "0220rignck8072i89jjsh140vmh14ydwpdwnifyaf3xcnpn9s678";
        libName = "tracing_subscriber";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <me@davidbarsky.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "matchers";
            packageId = "matchers";
            optional = true;
          }
          {
            name = "nu-ansi-term";
            packageId = "nu-ansi-term";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "unicode-case" "unicode-perl" ];
          }
          {
            name = "sharded-slab";
            packageId = "sharded-slab";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
          }
          {
            name = "thread_local";
            packageId = "thread_local";
            optional = true;
          }
          {
            name = "time";
            packageId = "time";
            optional = true;
            features = [ "formatting" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "log-tracer" "std" ];
          }
        ];
        devDependencies = [
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "time";
            packageId = "time";
            features = [ "formatting" "macros" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
          }
        ];
        features = {
          "ansi" = [ "fmt" "nu-ansi-term" ];
          "chrono" = [ "dep:chrono" ];
          "default" = [ "smallvec" "fmt" "ansi" "tracing-log" "std" ];
          "env-filter" = [ "matchers" "regex" "once_cell" "tracing" "std" "thread_local" ];
          "fmt" = [ "registry" "std" ];
          "json" = [ "tracing-serde" "serde" "serde_json" ];
          "local-time" = [ "time/local-offset" ];
          "matchers" = [ "dep:matchers" ];
          "nu-ansi-term" = [ "dep:nu-ansi-term" ];
          "once_cell" = [ "dep:once_cell" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "regex" = [ "dep:regex" ];
          "registry" = [ "sharded-slab" "thread_local" "std" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "sharded-slab" = [ "dep:sharded-slab" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "alloc" "tracing-core/std" ];
          "thread_local" = [ "dep:thread_local" ];
          "time" = [ "dep:time" ];
          "tracing" = [ "dep:tracing" ];
          "tracing-log" = [ "dep:tracing-log" ];
          "tracing-serde" = [ "dep:tracing-serde" ];
          "valuable" = [ "tracing-core/valuable" "valuable_crate" "valuable-serde" "tracing-serde/valuable" ];
          "valuable-serde" = [ "dep:valuable-serde" ];
          "valuable_crate" = [ "dep:valuable_crate" ];
        };
        resolvedDefaultFeatures = [ "alloc" "ansi" "default" "env-filter" "fmt" "matchers" "nu-ansi-term" "once_cell" "parking_lot" "regex" "registry" "sharded-slab" "smallvec" "std" "thread_local" "time" "tracing" "tracing-log" ];
      };
      "trie-db" = rec {
        crateName = "trie-db";
        version = "0.30.0";
        edition = "2018";
        sha256 = "19p7j7v1bahm7byl6hs7w2dg4z52a3lzwsgkgln01dx68nmp01kc";
        libName = "trie_db";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "hash-db";
            packageId = "hash-db";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rustc-hex";
            packageId = "rustc-hex";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = [ "union" "const_new" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "rustc-hex" = [ "dep:rustc-hex" ];
          "std" = [ "hash-db/std" "rustc-hex" ];
        };
        resolvedDefaultFeatures = [ "rustc-hex" "std" ];
      };
      "trie-root" = rec {
        crateName = "trie-root";
        version = "0.18.0";
        edition = "2018";
        sha256 = "02vcs14s98nbsh7y15v56zajs8xrdj8fs03r8vxgb65byl733vfl";
        libName = "trie_root";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "hash-db";
            packageId = "hash-db";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "hash-db/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "try-lock" = rec {
        crateName = "try-lock";
        version = "0.2.5";
        edition = "2015";
        sha256 = "0jqijrrvm1pyq34zn1jmy2vihd4jcrjlvsh4alkjahhssjnsn8g4";
        libName = "try_lock";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];

      };
      "tt-call" = rec {
        crateName = "tt-call";
        version = "1.0.9";
        edition = "2018";
        sha256 = "1pw1k05bc73gdqryvl7w928kj1jg5fxw8n2sxr76408rhpyrbwgl";
        libName = "tt_call";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "tungstenite" = rec {
        crateName = "tungstenite";
        version = "0.26.2";
        edition = "2021";
        sha256 = "04rwwcxx95m3avi46rmn0kmpb6nynqimnla3v2qwn3k8argcp4s7";
        authors = [
          "Alexey Galakhov"
          "Daniel Abramov"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 1.3.1";
            optional = true;
          }
          {
            name = "httparse";
            packageId = "httparse";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.9.1";
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            optional = true;
          }
          {
            name = "sha1";
            packageId = "sha1";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "url";
            packageId = "url";
            optional = true;
          }
          {
            name = "utf-8";
            packageId = "utf-8";
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.9.1";
          }
        ];
        features = {
          "__rustls-tls" = [ "rustls" "rustls-pki-types" ];
          "data-encoding" = [ "dep:data-encoding" ];
          "default" = [ "handshake" ];
          "handshake" = [ "data-encoding" "http" "httparse" "sha1" ];
          "http" = [ "dep:http" ];
          "httparse" = [ "dep:httparse" ];
          "native-tls" = [ "native-tls-crate" ];
          "native-tls-crate" = [ "dep:native-tls-crate" ];
          "native-tls-vendored" = [ "native-tls" "native-tls-crate/vendored" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-pki-types" = [ "dep:rustls-pki-types" ];
          "rustls-tls-native-roots" = [ "__rustls-tls" "rustls-native-certs" ];
          "rustls-tls-webpki-roots" = [ "__rustls-tls" "webpki-roots" ];
          "sha1" = [ "dep:sha1" ];
          "url" = [ "dep:url" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "__rustls-tls" "data-encoding" "handshake" "http" "httparse" "rustls" "rustls-pki-types" "sha1" "url" ];
      };
      "tuplex" = rec {
        crateName = "tuplex";
        version = "0.1.2";
        edition = "2021";
        sha256 = "1ah85a6id43v9ahnrf24yy839pkfcal4zlsmg7rxri2lahfwhsk7";
        authors = [
          "oooutlk <oooutlk@outlook.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "twox-hash" = rec {
        crateName = "twox-hash";
        version = "1.6.3";
        edition = "2018";
        crateBin = [];
        sha256 = "0xgn72j36a270l5ls1jk88n7bmq2dhlfkbhdh5554hbagjsydzlp";
        libName = "twox_hash";
        authors = [
          "Jake Goulding <jake.goulding@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            rename = "digest_0_10";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "digest" = [ "dep:digest" ];
          "digest_0_10" = [ "dep:digest_0_10" ];
          "digest_0_9" = [ "dep:digest_0_9" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" ];
          "serialize" = [ "serde" ];
          "std" = [ "rand" ];
        };
        resolvedDefaultFeatures = [ "digest_0_10" "rand" "std" ];
      };
      "typed-arena" = rec {
        crateName = "typed-arena";
        version = "2.0.2";
        edition = "2015";
        sha256 = "0shj0jpmglhgw2f1i4b33ycdzwd1z205pbs1rd5wx7ks2qhaxxka";
        libName = "typed_arena";
        authors = [
          "The typed-arena developers"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "typemap-ors" = rec {
        crateName = "typemap-ors";
        version = "1.0.0";
        edition = "2015";
        sha256 = "0rw8lbbh8aarfacyz133p0pqq1gj96fypk2c3s7x2bgh0yvj9356";
        libName = "typemap_ors";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
          "Anton Whalley anton@venshare.com"
        ];
        dependencies = [
          {
            name = "unsafe-any-ors";
            packageId = "unsafe-any-ors";
          }
        ];

      };
      "typenum" = rec {
        crateName = "typenum";
        version = "1.18.0";
        edition = "2018";
        sha256 = "0gwgz8n91pv40gabrr1lzji0b0hsmg0817njpy397bq7rvizzk0x";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
          "scale-info" = [ "dep:scale-info" ];
          "scale_info" = [ "scale-info/derive" ];
        };
      };
      "uint 0.10.0" = rec {
        crateName = "uint";
        version = "0.10.0";
        edition = "2021";
        sha256 = "0gmmdybnbrgq6s47ls62772h1avwzin106hngdr3ixxjk388i6ch";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "crunchy";
            packageId = "crunchy";
            usesDefaultFeatures = false;
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "std" = [ "byteorder/std" "crunchy/std" "hex/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "uint 0.9.5" = rec {
        crateName = "uint";
        version = "0.9.5";
        edition = "2021";
        sha256 = "0ljb2q0waadsr56w6j5wwchwibby8bbsf09wnv54zc2k5jx4pxkn";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "crunchy";
            packageId = "crunchy";
            usesDefaultFeatures = false;
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "std" = [ "byteorder/std" "crunchy/std" "hex/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "unarray" = rec {
        crateName = "unarray";
        version = "0.1.4";
        edition = "2018";
        sha256 = "154smf048k84prsdgh09nkm2n0w0336v84jd4zikyn6v6jrqbspa";

      };
      "uncased" = rec {
        crateName = "uncased";
        version = "0.9.10";
        edition = "2018";
        sha256 = "15q6r6g4fszr8c2lzg9z9k9g52h8g29h24awda3d72cyw37qzf71";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "serde" = [ "dep:serde" ];
          "with-serde" = [ "serde" ];
          "with-serde-alloc" = [ "serde" "serde/alloc" "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
      "unicode-bidi" = rec {
        crateName = "unicode-bidi";
        version = "0.3.18";
        edition = "2018";
        sha256 = "1xcxwbsqa24b8vfchhzyyzgj0l6bn51ib5v8j6krha0m77dva72w";
        libName = "unicode_bidi";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = [ "std" "hardcoded-data" ];
          "flame" = [ "dep:flame" ];
          "flame_it" = [ "flame" "flamer" ];
          "flamer" = [ "dep:flamer" ];
          "serde" = [ "dep:serde" ];
          "smallvec" = [ "dep:smallvec" ];
          "with_serde" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" "hardcoded-data" "std" ];
      };
      "unicode-ident" = rec {
        crateName = "unicode-ident";
        version = "1.0.18";
        edition = "2018";
        sha256 = "04k5r6sijkafzljykdq26mhjpmhdx4jwzvn1lh90g9ax9903jpss";
        libName = "unicode_ident";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "unicode-normalization" = rec {
        crateName = "unicode-normalization";
        version = "0.1.22";
        edition = "2018";
        sha256 = "08d95g7b1irc578b2iyhzv4xhsa4pfvwsqxcl9lbcpabzkq16msw";
        libName = "unicode_normalization";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "unicode-properties" = rec {
        crateName = "unicode-properties";
        version = "0.1.3";
        edition = "2021";
        sha256 = "1l3mbgzwz8g14xcs09p4ww3hjkjcf0i1ih13nsg72bhj8n5jl3z7";
        libName = "unicode_properties";
        authors = [
          "Charles Lew <crlf0710@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "default" = [ "general-category" "emoji" ];
        };
        resolvedDefaultFeatures = [ "default" "emoji" "general-category" ];
      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.12.0";
        edition = "2018";
        sha256 = "14qla2jfx74yyb9ds3d2mpwpa4l4lzb9z57c6d2ba511458z5k7n";
        libName = "unicode_segmentation";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
      };
      "unicode-width 0.1.14" = rec {
        crateName = "unicode-width";
        version = "0.1.14";
        edition = "2021";
        sha256 = "1bzn2zv0gp8xxbxbhifw778a7fc93pa6a1kj24jgg9msj07f7mkx";
        libName = "unicode_width";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "cjk" ];
          "rustc-dep-of-std" = [ "std" "core" "compiler_builtins" ];
          "std" = [ "dep:std" ];
        };
        resolvedDefaultFeatures = [ "cjk" "default" ];
      };
      "unicode-width 0.2.0" = rec {
        crateName = "unicode-width";
        version = "0.2.0";
        edition = "2021";
        sha256 = "1zd0r5vs52ifxn25rs06gxrgz8cmh4xpra922k0xlmrchib1kj0z";
        libName = "unicode_width";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "cjk" ];
          "rustc-dep-of-std" = [ "std" "core" "compiler_builtins" ];
          "std" = [ "dep:std" ];
        };
        resolvedDefaultFeatures = [ "cjk" "default" ];
      };
      "unicode-xid" = rec {
        crateName = "unicode-xid";
        version = "0.2.6";
        edition = "2015";
        sha256 = "0lzqaky89fq0bcrh6jj6bhlz37scfd8c7dsj5dq7y32if56c1hgb";
        libName = "unicode_xid";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "universal-hash" = rec {
        crateName = "universal-hash";
        version = "0.5.1";
        edition = "2021";
        sha256 = "1sh79x677zkncasa95wz05b36134822w6qxmi1ck05fwi33f47gw";
        libName = "universal_hash";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "subtle";
            packageId = "subtle 2.6.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "std" = [ "crypto-common/std" ];
        };
      };
      "unsafe-any-ors" = rec {
        crateName = "unsafe-any-ors";
        version = "1.0.0";
        edition = "2015";
        sha256 = "1bf0hxfhb3gh9hy8pw6l0jaqjprzn9w1vnfph2b2sdk50v9h78z0";
        libName = "unsafe_any_ors";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
          "anton whalley anton@venshare.com"
        ];
        dependencies = [
          {
            name = "destructure_traitobject";
            packageId = "destructure_traitobject";
          }
        ];

      };
      "unsafe-libyaml" = rec {
        crateName = "unsafe-libyaml";
        version = "0.2.11";
        edition = "2021";
        crateBin = [];
        sha256 = "0qdq69ffl3v5pzx9kzxbghzn0fzn266i1xn70y88maybz9csqfk7";
        libName = "unsafe_libyaml";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "unsigned-varint 0.7.2" = rec {
        crateName = "unsigned-varint";
        version = "0.7.2";
        edition = "2018";
        sha256 = "018iai89m508xasxxcdfxnnr80vk5ixgjszc9i817w7i95ysg2b8";
        libName = "unsigned_varint";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "asynchronous-codec";
            packageId = "asynchronous-codec 0.6.2";
            optional = true;
          }
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            features = [ "io" ];
          }
        ];
        features = {
          "asynchronous-codec" = [ "dep:asynchronous-codec" ];
          "asynchronous_codec" = [ "std" "bytes" "asynchronous-codec" ];
          "bytes" = [ "dep:bytes" ];
          "codec" = [ "std" "bytes" "tokio-util" ];
          "futures" = [ "std" "futures-io" "futures-util" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-util" = [ "dep:futures-util" ];
          "nom" = [ "dep:nom" ];
          "tokio-util" = [ "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "asynchronous-codec" "asynchronous_codec" "bytes" "futures" "futures-io" "futures-util" "std" ];
      };
      "unsigned-varint 0.8.0" = rec {
        crateName = "unsigned-varint";
        version = "0.8.0";
        edition = "2018";
        sha256 = "01lwzxp0hf5p966fjq0lyz2x4l44b52py1fbffp9clabn9cnj1pb";
        libName = "unsigned_varint";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            optional = true;
            features = [ "codec" ];
          }
        ];
        features = {
          "asynchronous-codec" = [ "dep:asynchronous-codec" ];
          "asynchronous_codec" = [ "std" "bytes" "asynchronous-codec" ];
          "bytes" = [ "dep:bytes" ];
          "codec" = [ "std" "bytes" "tokio-util" ];
          "futures" = [ "std" "futures-io" "futures-util" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-util" = [ "dep:futures-util" ];
          "nom" = [ "dep:nom" ];
          "tokio-util" = [ "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "bytes" "codec" "std" "tokio-util" ];
      };
      "untrusted 0.7.1" = rec {
        crateName = "untrusted";
        version = "0.7.1";
        edition = "2018";
        sha256 = "0jkbqaj9d3v5a91pp3wp9mffvng1nhycx6sh4qkdd9qyr62ccmm1";
        libPath = "src/untrusted.rs";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];

      };
      "untrusted 0.9.0" = rec {
        crateName = "untrusted";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1ha7ib98vkc538x0z60gfn0fc5whqdd85mb87dvisdcaifi6vjwf";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];

      };
      "uplc" = rec {
        crateName = "uplc";
        version = "1.1.17";
        edition = "2024";
        sha256 = "0y1195g41c5jkk53hwzb0z2pbhrc5c8wjb142yhw5iwaf72knh1v";
        authors = [
          "Lucas Rosa <x@rvcas.dev>"
          "Kasey White <kwhitemsg@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitvec";
            packageId = "bitvec";
          }
          {
            name = "blst";
            packageId = "blst";
          }
          {
            name = "cryptoxide";
            packageId = "cryptoxide";
          }
          {
            name = "hamming";
            packageId = "hamming";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "k256";
            packageId = "k256";
            target = { target, features }: (builtins.elem "wasm" target."family");
          }
          {
            name = "miette";
            packageId = "miette";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
          }
          {
            name = "num-integer";
            packageId = "num-integer";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "pallas-addresses";
            packageId = "pallas-addresses";
          }
          {
            name = "pallas-codec";
            packageId = "pallas-codec";
            features = [ "num-bigint" ];
          }
          {
            name = "pallas-crypto";
            packageId = "pallas-crypto";
          }
          {
            name = "pallas-primitives";
            packageId = "pallas-primitives";
          }
          {
            name = "pallas-traverse";
            packageId = "pallas-traverse";
          }
          {
            name = "peg";
            packageId = "peg";
          }
          {
            name = "pretty";
            packageId = "pretty";
          }
          {
            name = "secp256k1";
            packageId = "secp256k1 0.26.0";
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        devDependencies = [
          {
            name = "hex";
            packageId = "hex";
          }
        ];

      };
      "url" = rec {
        crateName = "url";
        version = "2.5.4";
        edition = "2018";
        sha256 = "0q6sgznyy2n4l5lm16zahkisvc9nip9aa5q1pps7656xra3bdy1j";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "idna";
            packageId = "idna";
            usesDefaultFeatures = false;
            features = [ "alloc" "compiled_data" ];
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "idna/std" "percent-encoding/std" "form_urlencoded/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "utf-8" = rec {
        crateName = "utf-8";
        version = "0.7.6";
        edition = "2015";
        sha256 = "1a9ns3fvgird0snjkd3wbdhwd3zdpc2h5gpyybrfr6ra5pkqxk09";
        libName = "utf8";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];

      };
      "utf8_iter" = rec {
        crateName = "utf8_iter";
        version = "1.0.4";
        edition = "2021";
        sha256 = "1gmna9flnj8dbyd8ba17zigrp9c4c3zclngf5lnb5yvz1ri41hdn";
        authors = [
          "Henri Sivonen <hsivonen@hsivonen.fi>"
        ];

      };
      "utf8parse" = rec {
        crateName = "utf8parse";
        version = "0.2.2";
        edition = "2018";
        sha256 = "088807qwjq46azicqwbhlmzwrbkz7l4hpw43sdkdyyk524vdxaq6";
        authors = [
          "Joe Wilm <joe@jwilm.com>"
          "Christian Duerr <contact@christianduerr.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "valuable" = rec {
        crateName = "valuable";
        version = "0.1.1";
        edition = "2021";
        sha256 = "0r9srp55v7g27s5bg7a2m095fzckrcdca5maih6dy9bay6fflwxs";
        features = {
          "default" = [ "std" ];
          "derive" = [ "valuable-derive" ];
          "std" = [ "alloc" ];
          "valuable-derive" = [ "dep:valuable-derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "vcpkg" = rec {
        crateName = "vcpkg";
        version = "0.2.15";
        edition = "2015";
        sha256 = "09i4nf5y8lig6xgj3f7fyrvzd3nlaw4znrihw8psidvv5yk4xkdc";
        authors = [
          "Jim McGrath <jimmc2@gmail.com>"
        ];

      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.9.5";
        edition = "2015";
        sha256 = "0nhhi4i5x89gm911azqbn7avs9mdacw2i3vcz3cnmz3mv4rqz4hb";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];

      };
      "void" = rec {
        crateName = "void";
        version = "1.0.2";
        edition = "2015";
        sha256 = "0zc8f0ksxvmhvgx4fdg0zyn6vdnbxd2xv9hfx4nhzg6kbs4f80ka";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "w3f-bls" = rec {
        crateName = "w3f-bls";
        version = "0.1.9";
        edition = "2018";
        sha256 = "0cjgnl5q9rvklsmz787yv5yif84w9qmf6hwy99jpf86incvvkgz6";
        libName = "w3f_bls";
        authors = [
          "Jack Grigg <str4d@i2pmail.org>"
          "Jeff Burdges <burdges@gnunet.org>"
          "Syed Hosseini <syed@riseup.net>"
        ];
        dependencies = [
          {
            name = "ark-bls12-377";
            packageId = "ark-bls12-377";
            usesDefaultFeatures = false;
            features = [ "curve" ];
          }
          {
            name = "ark-bls12-381";
            packageId = "ark-bls12-381 0.4.0";
            usesDefaultFeatures = false;
            features = [ "curve" ];
          }
          {
            name = "ark-ec";
            packageId = "ark-ec 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-ff";
            packageId = "ark-ff 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.4.2";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "ark-serialize-derive";
            packageId = "ark-serialize-derive 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "arrayref";
            packageId = "arrayref";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.3.1";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            usesDefaultFeatures = false;
          }
          {
            name = "sha3";
            packageId = "sha3";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "rand/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "w3f-pcs" = rec {
        crateName = "w3f-pcs";
        version = "0.0.2";
        edition = "2021";
        sha256 = "1q82pmqsqwhpk13wxpgskbi6ym1fk9kpy9ivmf997dhlr7asirzv";
        libName = "w3f_pcs";
        authors = [
          "Sergey Vasilyev <swasilyev@gmail.com>"
        ];
        dependencies = [
          {
            name = "ark-ec";
            packageId = "ark-ec 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-ff";
            packageId = "ark-ff 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-poly";
            packageId = "ark-poly 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.5.0";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "merlin";
            packageId = "merlin";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "asm" = [ "ark-ff/asm" ];
          "parallel" = [ "std" "rayon" "ark-std/parallel" "ark-ff/parallel" "ark-ec/parallel" "ark-poly/parallel" ];
          "print-trace" = [ "ark-std/print-trace" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-ec/std" "ark-poly/std" "ark-serialize/std" "merlin/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "w3f-plonk-common" = rec {
        crateName = "w3f-plonk-common";
        version = "0.0.2";
        edition = "2021";
        sha256 = "134c8i6zbzj3nzyvviqb3kp3d41h50ijwlcb21f8rq2g96g3ijhs";
        libName = "w3f_plonk_common";
        authors = [
          "Sergey Vasilyev <swasilyev@gmail.com>"
        ];
        dependencies = [
          {
            name = "ark-ec";
            packageId = "ark-ec 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-ff";
            packageId = "ark-ff 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-poly";
            packageId = "ark-poly 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.5.0";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "getrandom_or_panic";
            packageId = "getrandom_or_panic";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
          {
            name = "w3f-pcs";
            packageId = "w3f-pcs";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "asm" = [ "w3f-pcs/asm" ];
          "default" = [ "std" ];
          "parallel" = [ "std" "rayon" "ark-std/parallel" "ark-ff/parallel" "ark-ec/parallel" "ark-poly/parallel" "w3f-pcs/parallel" ];
          "print-trace" = [ "ark-std/print-trace" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-ec/std" "ark-poly/std" "ark-serialize/std" "w3f-pcs/std" "getrandom_or_panic/std" "rand_core/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "w3f-ring-proof" = rec {
        crateName = "w3f-ring-proof";
        version = "0.0.2";
        edition = "2021";
        sha256 = "1pkpqr4fmwdxb5cb3ls7h6n92ciq823jbgaxaw21bm9a81wr6qwa";
        libName = "w3f_ring_proof";
        authors = [
          "Sergey Vasilyev <swasilyev@gmail.com>"
        ];
        dependencies = [
          {
            name = "ark-ec";
            packageId = "ark-ec 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-ff";
            packageId = "ark-ff 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-poly";
            packageId = "ark-poly 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.5.0";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-transcript";
            packageId = "ark-transcript";
            usesDefaultFeatures = false;
          }
          {
            name = "w3f-pcs";
            packageId = "w3f-pcs";
            usesDefaultFeatures = false;
          }
          {
            name = "w3f-plonk-common";
            packageId = "w3f-plonk-common";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "asm" = [ "w3f-pcs/asm" ];
          "default" = [ "std" ];
          "parallel" = [ "std" "rayon" "ark-std/parallel" "ark-ff/parallel" "ark-ec/parallel" "ark-poly/parallel" "w3f-plonk-common/parallel" "w3f-pcs/parallel" ];
          "print-trace" = [ "ark-std/print-trace" "w3f-plonk-common/print-trace" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-ec/std" "ark-poly/std" "ark-serialize/std" "w3f-pcs/std" "w3f-plonk-common/std" ];
          "test-vectors" = [ "w3f-plonk-common/test-vectors" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "wait-timeout" = rec {
        crateName = "wait-timeout";
        version = "0.2.1";
        edition = "2015";
        crateBin = [];
        sha256 = "04azqv9mnfxgvnc8j2wp362xraybakh2dy1nj22gj51rdl93pb09";
        libName = "wait_timeout";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
        ];

      };
      "walkdir" = rec {
        crateName = "walkdir";
        version = "2.5.0";
        edition = "2018";
        sha256 = "0jsy7a710qv8gld5957ybrnc07gavppp963gs32xk4ag8130jy99";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "want" = rec {
        crateName = "want";
        version = "0.3.1";
        edition = "2018";
        sha256 = "03hbfrnvqqdchb5kgxyavb9jabwza0dmh2vw5kg0dq8rxl57d9xz";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "try-lock";
            packageId = "try-lock";
          }
        ];

      };
      "wasi 0.11.0+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.11.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "08z4hxwkpdpalxjps1ai9y7ihin26y9f476i53dv98v45gkqg3cw";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasi 0.14.2+wasi-0.2.4" = rec {
        crateName = "wasi";
        version = "0.14.2+wasi-0.2.4";
        edition = "2021";
        sha256 = "1cwcqjr3dgdq8j325awgk8a715h0hg0f7jqzsb077n4qm6jzk0wn";
        authors = [
          "The Cranelift Project Developers"
        ];
        dependencies = [
          {
            name = "wit-bindgen-rt";
            packageId = "wit-bindgen-rt";
            features = [ "bitflags" ];
          }
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
      };
      "wasite" = rec {
        crateName = "wasite";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0nw5h9nmcl4fyf4j5d4mfdjfgvwi1cakpi349wc4zrr59wxxinmq";

      };
      "wasm-bindgen" = rec {
        crateName = "wasm-bindgen";
        version = "0.2.92";
        edition = "2018";
        sha256 = "1a4mcw13nsk3fr8fxjzf9kk1wj88xkfsmnm0pjraw01ryqfm7qjb";
        libName = "wasm_bindgen";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "wasm-bindgen-macro";
            packageId = "wasm-bindgen-macro";
          }
        ];
        features = {
          "default" = [ "spans" "std" ];
          "enable-interning" = [ "std" ];
          "gg-alloc" = [ "wasm-bindgen-test/gg-alloc" ];
          "serde" = [ "dep:serde" ];
          "serde-serialize" = [ "serde" "serde_json" "std" ];
          "serde_json" = [ "dep:serde_json" ];
          "spans" = [ "wasm-bindgen-macro/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro/strict-macro" ];
          "xxx_debug_only_print_generated_code" = [ "wasm-bindgen-macro/xxx_debug_only_print_generated_code" ];
        };
        resolvedDefaultFeatures = [ "default" "spans" "std" ];
      };
      "wasm-bindgen-backend" = rec {
        crateName = "wasm-bindgen-backend";
        version = "0.2.92";
        edition = "2018";
        sha256 = "1nj7wxbi49f0rw9d44rjzms26xlw6r76b2mrggx8jfbdjrxphkb1";
        libName = "wasm_bindgen_backend";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-futures" = rec {
        crateName = "wasm-bindgen-futures";
        version = "0.4.42";
        edition = "2018";
        sha256 = "1h322zjvpjllcpj7dahfxjsv6inkr6y0baw7nkdwivr1c4v19g3n";
        libName = "wasm_bindgen_futures";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (builtins.elem "atomics" targetFeatures);
            features = [ "MessageEvent" "Worker" ];
          }
        ];
        features = {
          "futures-core" = [ "dep:futures-core" ];
          "futures-core-03-stream" = [ "futures-core" ];
        };
      };
      "wasm-bindgen-macro" = rec {
        crateName = "wasm-bindgen-macro";
        version = "0.2.92";
        edition = "2018";
        sha256 = "09npa1srjjabd6nfph5yc03jb26sycjlxhy0c2a1pdrpx4yq5y51";
        procMacro = true;
        libName = "wasm_bindgen_macro";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "wasm-bindgen-macro-support";
            packageId = "wasm-bindgen-macro-support";
          }
        ];
        features = {
          "spans" = [ "wasm-bindgen-macro-support/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro-support/strict-macro" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-macro-support" = rec {
        crateName = "wasm-bindgen-macro-support";
        version = "0.2.92";
        edition = "2018";
        sha256 = "1dqv2xs8zcyw4kjgzj84bknp2h76phmsb3n7j6hn396h4ssifkz9";
        libName = "wasm_bindgen_macro_support";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "visit" "full" ];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
          "spans" = [ "wasm-bindgen-backend/spans" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-shared" = rec {
        crateName = "wasm-bindgen-shared";
        version = "0.2.92";
        edition = "2018";
        links = "wasm_bindgen";
        sha256 = "15kyavsrna2cvy30kg03va257fraf9x00ny554vxngvpyaa0q6dg";
        libName = "wasm_bindgen_shared";
        authors = [
          "The wasm-bindgen Developers"
        ];

      };
      "wasm-instrument" = rec {
        crateName = "wasm-instrument";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1g0q34185fgdibfsnk4dqbc1z0303slf2nmabq4d2d4pgfryqira";
        libName = "wasm_instrument";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "parity-wasm";
            packageId = "parity-wasm";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "sign_ext" = [ "parity-wasm/sign_ext" ];
          "std" = [ "parity-wasm/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasm-opt" = rec {
        crateName = "wasm-opt";
        version = "0.116.1";
        edition = "2018";
        crateBin = [];
        sha256 = "1737bxj2qrphqm1cj5h4wn4vr855y2q6yfqjhvnzydam2d67mn1g";
        libName = "wasm_opt";
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "strum";
            packageId = "strum 0.24.1";
          }
          {
            name = "strum_macros";
            packageId = "strum_macros 0.24.3";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "wasm-opt-cxx-sys";
            packageId = "wasm-opt-cxx-sys";
          }
          {
            name = "wasm-opt-sys";
            packageId = "wasm-opt-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "dwarf" ];
          "dwarf" = [ "wasm-opt-sys/dwarf" ];
        };
        resolvedDefaultFeatures = [ "default" "dwarf" ];
      };
      "wasm-opt-cxx-sys" = rec {
        crateName = "wasm-opt-cxx-sys";
        version = "0.116.0";
        edition = "2018";
        sha256 = "0bpic9ki2gwzph6f3z36ybv26g40fkz7argczhc46wma0y1b4mwc";
        libName = "wasm_opt_cxx_sys";
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "cxx";
            packageId = "cxx";
          }
          {
            name = "wasm-opt-sys";
            packageId = "wasm-opt-sys";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "cxx-build";
            packageId = "cxx-build";
            features = [ "parallel" ];
          }
        ];

      };
      "wasm-opt-sys" = rec {
        crateName = "wasm-opt-sys";
        version = "0.116.0";
        edition = "2018";
        links = "binaryen";
        sha256 = "1glcp779agbymrvqyzdl3k90pa6vyafw53vivg5xls679mbcw74a";
        libName = "wasm_opt_sys";
        dependencies = [
          {
            name = "cxx";
            packageId = "cxx";
          }
        ];
        buildDependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "cc";
            packageId = "cc";
            features = [ "parallel" ];
          }
          {
            name = "cxx-build";
            packageId = "cxx-build";
          }
        ];
        features = {
          "default" = [ "dwarf" ];
        };
        resolvedDefaultFeatures = [ "dwarf" ];
      };
      "wasm-timer" = rec {
        crateName = "wasm-timer";
        version = "0.2.5";
        edition = "2018";
        sha256 = "0zsyijv3wgj9p4q47a4awla8j4kw33jd7da2fsd1wml0nh6wn3my";
        libName = "wasm_timer";
        authors = [
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.11.2";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
            features = [ "Performance" "Window" ];
          }
        ];

      };
      "wasmparser" = rec {
        crateName = "wasmparser";
        version = "0.102.0";
        edition = "2021";
        sha256 = "0jqh6p7w5kng9vz1k1bblwfx6l4fbnqr2sxgksmik0jrszils4s8";
        authors = [
          "Yury Delendik <ydelendik@mozilla.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];

      };
      "wasmtime" = rec {
        crateName = "wasmtime";
        version = "8.0.1";
        edition = "2021";
        sha256 = "1afxscpcar4c6l2kds6y0vf75532c9dvsfx9nyzvjg0msgmgs1zr";
        authors = [
          "The Wasmtime Project Developers"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "object";
            packageId = "object 0.30.4";
            usesDefaultFeatures = false;
            features = [ "read_core" "elf" "std" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "psm";
            packageId = "psm";
          }
          {
            name = "rayon";
            packageId = "rayon";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "target-lexicon";
            packageId = "target-lexicon";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "wasmparser";
            packageId = "wasmparser";
          }
          {
            name = "wasmtime-cache";
            packageId = "wasmtime-cache";
            optional = true;
          }
          {
            name = "wasmtime-cranelift";
            packageId = "wasmtime-cranelift";
            optional = true;
          }
          {
            name = "wasmtime-environ";
            packageId = "wasmtime-environ";
          }
          {
            name = "wasmtime-jit";
            packageId = "wasmtime-jit";
          }
          {
            name = "wasmtime-runtime";
            packageId = "wasmtime-runtime";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.45.0";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "Win32_System_Diagnostics_Debug" ];
          }
        ];
        features = {
          "all-arch" = [ "wasmtime-cranelift?/all-arch" ];
          "async" = [ "dep:wasmtime-fiber" "wasmtime-runtime/async" "dep:async-trait" "wasmtime-component-macro?/async" ];
          "cache" = [ "dep:wasmtime-cache" ];
          "component-model" = [ "wasmtime-environ/component-model" "wasmtime-cranelift?/component-model" "wasmtime-runtime/component-model" "dep:wasmtime-component-macro" "dep:wasmtime-component-util" "dep:encoding_rs" ];
          "cranelift" = [ "dep:wasmtime-cranelift" ];
          "default" = [ "async" "cache" "wat" "jitdump" "parallel-compilation" "cranelift" "pooling-allocator" "vtune" ];
          "incremental-cache" = [ "wasmtime-cranelift?/incremental-cache" ];
          "jitdump" = [ "wasmtime-jit/jitdump" ];
          "parallel-compilation" = [ "dep:rayon" ];
          "pooling-allocator" = [ "wasmtime-runtime/pooling-allocator" ];
          "posix-signals-on-macos" = [ "wasmtime-runtime/posix-signals-on-macos" ];
          "vtune" = [ "wasmtime-jit/vtune" ];
          "wat" = [ "dep:wat" ];
        };
        resolvedDefaultFeatures = [ "cache" "cranelift" "jitdump" "parallel-compilation" "pooling-allocator" ];
      };
      "wasmtime-asm-macros" = rec {
        crateName = "wasmtime-asm-macros";
        version = "8.0.1";
        edition = "2021";
        sha256 = "03c1gxczcrfld7x17b2r15xlnpwd82afk7gnvczgmm2cq6kxmffk";
        libName = "wasmtime_asm_macros";
        authors = [
          "The Wasmtime Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];

      };
      "wasmtime-cache" = rec {
        crateName = "wasmtime-cache";
        version = "8.0.1";
        edition = "2021";
        sha256 = "04qjszgmlf00y8snan43j2a98n1bpcs95imgwnbfhvv2d3x3fr68";
        libName = "wasmtime_cache";
        authors = [
          "The Wasmtime Project Developers"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "directories-next";
            packageId = "directories-next";
          }
          {
            name = "file-per-thread-logger";
            packageId = "file-per-thread-logger";
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "rustix";
            packageId = "rustix 0.36.17";
            target = { target, features }: (!("windows" == target."os" or null));
            features = [ "process" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "toml";
            packageId = "toml 0.5.11";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.45.0";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "Win32_System_Threading" ];
          }
          {
            name = "zstd";
            packageId = "zstd 0.11.2+zstd.1.5.2";
            usesDefaultFeatures = false;
          }
        ];

      };
      "wasmtime-cranelift" = rec {
        crateName = "wasmtime-cranelift";
        version = "8.0.1";
        edition = "2021";
        sha256 = "017fks32rvm97267pzdg45js9nrp7252kdi13c5p1jz8rkhgvkmi";
        libName = "wasmtime_cranelift";
        authors = [
          "The Wasmtime Project Developers"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "cranelift-codegen";
            packageId = "cranelift-codegen";
          }
          {
            name = "cranelift-entity";
            packageId = "cranelift-entity";
          }
          {
            name = "cranelift-frontend";
            packageId = "cranelift-frontend";
          }
          {
            name = "cranelift-native";
            packageId = "cranelift-native";
          }
          {
            name = "cranelift-wasm";
            packageId = "cranelift-wasm";
          }
          {
            name = "gimli";
            packageId = "gimli 0.27.3";
            usesDefaultFeatures = false;
            features = [ "read" "std" ];
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "object";
            packageId = "object 0.30.4";
            usesDefaultFeatures = false;
            features = [ "read_core" "elf" "std" "write" ];
          }
          {
            name = "target-lexicon";
            packageId = "target-lexicon";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "wasmparser";
            packageId = "wasmparser";
          }
          {
            name = "wasmtime-cranelift-shared";
            packageId = "wasmtime-cranelift-shared";
          }
          {
            name = "wasmtime-environ";
            packageId = "wasmtime-environ";
          }
        ];
        features = {
          "all-arch" = [ "cranelift-codegen/all-arch" ];
          "component-model" = [ "wasmtime-environ/component-model" ];
          "incremental-cache" = [ "cranelift-codegen/incremental-cache" ];
        };
      };
      "wasmtime-cranelift-shared" = rec {
        crateName = "wasmtime-cranelift-shared";
        version = "8.0.1";
        edition = "2021";
        sha256 = "12rgi2bz7cscr9v70zj5rrvddxm4y6a26i3qzjws3bpm5qw1w16d";
        libName = "wasmtime_cranelift_shared";
        authors = [
          "The Wasmtime Project Developers"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "cranelift-codegen";
            packageId = "cranelift-codegen";
          }
          {
            name = "cranelift-native";
            packageId = "cranelift-native";
          }
          {
            name = "gimli";
            packageId = "gimli 0.27.3";
            usesDefaultFeatures = false;
            features = [ "read" "std" ];
          }
          {
            name = "object";
            packageId = "object 0.30.4";
            usesDefaultFeatures = false;
            features = [ "read_core" "elf" "std" ];
          }
          {
            name = "target-lexicon";
            packageId = "target-lexicon";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "wasmtime-environ";
            packageId = "wasmtime-environ";
          }
        ];

      };
      "wasmtime-environ" = rec {
        crateName = "wasmtime-environ";
        version = "8.0.1";
        edition = "2021";
        sha256 = "0jf9amci40frqbs0a403xb99prjr6ffzhnr38lq455s1xs61k459";
        libName = "wasmtime_environ";
        authors = [
          "The Wasmtime Project Developers"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "cranelift-entity";
            packageId = "cranelift-entity";
          }
          {
            name = "gimli";
            packageId = "gimli 0.27.3";
            usesDefaultFeatures = false;
            features = [ "read" "std" "write" ];
          }
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
            features = [ "serde-1" ];
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "object";
            packageId = "object 0.30.4";
            usesDefaultFeatures = false;
            features = [ "read_core" "elf" "std" "write_core" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "target-lexicon";
            packageId = "target-lexicon";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "wasmparser";
            packageId = "wasmparser";
          }
          {
            name = "wasmtime-types";
            packageId = "wasmtime-types";
          }
        ];
        features = {
          "component-model" = [ "dep:wasm-encoder" "dep:wasmprinter" "dep:wasmtime-component-util" ];
        };
      };
      "wasmtime-jit" = rec {
        crateName = "wasmtime-jit";
        version = "8.0.1";
        edition = "2021";
        sha256 = "0i0jyfmrd14nq3ahdcmh6g82sxs5gghd60h0fndirjngabsqvr0d";
        libName = "wasmtime_jit";
        authors = [
          "The Wasmtime Project Developers"
        ];
        dependencies = [
          {
            name = "addr2line";
            packageId = "addr2line 0.19.0";
            usesDefaultFeatures = false;
          }
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpp_demangle";
            packageId = "cpp_demangle";
          }
          {
            name = "gimli";
            packageId = "gimli 0.27.3";
            usesDefaultFeatures = false;
            features = [ "read" "std" ];
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "object";
            packageId = "object 0.30.4";
            usesDefaultFeatures = false;
            features = [ "read_core" "elf" "std" ];
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "target-lexicon";
            packageId = "target-lexicon";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "wasmtime-environ";
            packageId = "wasmtime-environ";
          }
          {
            name = "wasmtime-jit-debug";
            packageId = "wasmtime-jit-debug";
            optional = true;
            features = [ "perf_jitdump" ];
          }
          {
            name = "wasmtime-jit-icache-coherence";
            packageId = "wasmtime-jit-icache-coherence";
          }
          {
            name = "wasmtime-runtime";
            packageId = "wasmtime-runtime";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.45.0";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "Win32_System_Diagnostics_Debug" ];
          }
        ];
        features = {
          "ittapi" = [ "dep:ittapi" ];
          "jitdump" = [ "wasmtime-jit-debug" ];
          "vtune" = [ "ittapi" ];
          "wasmtime-jit-debug" = [ "dep:wasmtime-jit-debug" ];
        };
        resolvedDefaultFeatures = [ "jitdump" "wasmtime-jit-debug" ];
      };
      "wasmtime-jit-debug" = rec {
        crateName = "wasmtime-jit-debug";
        version = "8.0.1";
        edition = "2021";
        sha256 = "0iiqp47a52jlmyxlnq5zsxvkmqclxn5861hx51v7v8hm9jw581bf";
        libName = "wasmtime_jit_debug";
        authors = [
          "The Wasmtime Project Developers"
        ];
        dependencies = [
          {
            name = "object";
            packageId = "object 0.30.4";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "read_core" "elf" "std" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "rustix";
            packageId = "rustix 0.36.17";
            optional = true;
            target = { target, features }: ("linux" == target."os" or null);
            features = [ "mm" "param" "time" ];
          }
        ];
        features = {
          "gdb_jit_int" = [ "once_cell" ];
          "object" = [ "dep:object" ];
          "once_cell" = [ "dep:once_cell" ];
          "perf_jitdump" = [ "rustix" "object" ];
          "rustix" = [ "dep:rustix" ];
        };
        resolvedDefaultFeatures = [ "gdb_jit_int" "object" "once_cell" "perf_jitdump" "rustix" ];
      };
      "wasmtime-jit-icache-coherence" = rec {
        crateName = "wasmtime-jit-icache-coherence";
        version = "8.0.1";
        edition = "2021";
        sha256 = "1g8v2bjcv9x4ysxi1hby2gr7hiff78vjgn1vnbpnfzrzn5wfkjmf";
        libName = "wasmtime_jit_icache_coherence";
        authors = [
          "The Wasmtime Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (("linux" == target."os" or null) || ("macos" == target."os" or null) || ("freebsd" == target."os" or null) || ("android" == target."os" or null));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.45.0";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "Win32_Foundation" "Win32_System_Threading" "Win32_System_Diagnostics_Debug" ];
          }
        ];
        features = {
        };
      };
      "wasmtime-runtime" = rec {
        crateName = "wasmtime-runtime";
        version = "8.0.1";
        edition = "2021";
        sha256 = "0hdl028328ia1bzpx0pazm4f799xh9fjbr82w9h6far34przd335";
        libName = "wasmtime_runtime";
        authors = [
          "The Wasmtime Project Developers"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "mach";
            packageId = "mach";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "memfd";
            packageId = "memfd";
          }
          {
            name = "memoffset";
            packageId = "memoffset";
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "small_rng" ];
          }
          {
            name = "rustix";
            packageId = "rustix 0.36.17";
            target = { target, features }: (target."unix" or false);
            features = [ "mm" ];
          }
          {
            name = "wasmtime-asm-macros";
            packageId = "wasmtime-asm-macros";
          }
          {
            name = "wasmtime-environ";
            packageId = "wasmtime-environ";
          }
          {
            name = "wasmtime-jit-debug";
            packageId = "wasmtime-jit-debug";
            features = [ "gdb_jit_int" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.45.0";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "Win32_Foundation" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_Diagnostics_Debug" "Win32_System_SystemInformation" "Win32_Storage_FileSystem" "Win32_Security" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "async" = [ "wasmtime-fiber" ];
          "component-model" = [ "wasmtime-environ/component-model" "dep:encoding_rs" ];
          "wasmtime-fiber" = [ "dep:wasmtime-fiber" ];
        };
        resolvedDefaultFeatures = [ "pooling-allocator" ];
      };
      "wasmtime-types" = rec {
        crateName = "wasmtime-types";
        version = "8.0.1";
        edition = "2021";
        sha256 = "0vzh2zp5k07fd9i2wjpzwdrfi49727fm8xphaxyqh48h5byzzxm4";
        libName = "wasmtime_types";
        authors = [
          "The Wasmtime Project Developers"
        ];
        dependencies = [
          {
            name = "cranelift-entity";
            packageId = "cranelift-entity";
            features = [ "enable-serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "wasmparser";
            packageId = "wasmparser";
          }
        ];

      };
      "web-sys" = rec {
        crateName = "web-sys";
        version = "0.3.69";
        edition = "2018";
        sha256 = "1vqkxk935xa8zcnsi4bd88sb267ly2i24xl1yiq26d1n32hskbvp";
        libName = "web_sys";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        features = {
          "AbortSignal" = [ "EventTarget" ];
          "AnalyserNode" = [ "AudioNode" "EventTarget" ];
          "Animation" = [ "EventTarget" ];
          "AnimationEvent" = [ "Event" ];
          "AnimationPlaybackEvent" = [ "Event" ];
          "Attr" = [ "EventTarget" "Node" ];
          "AudioBufferSourceNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "AudioContext" = [ "BaseAudioContext" "EventTarget" ];
          "AudioDestinationNode" = [ "AudioNode" "EventTarget" ];
          "AudioNode" = [ "EventTarget" ];
          "AudioProcessingEvent" = [ "Event" ];
          "AudioScheduledSourceNode" = [ "AudioNode" "EventTarget" ];
          "AudioStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "AudioTrackList" = [ "EventTarget" ];
          "AudioWorklet" = [ "Worklet" ];
          "AudioWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "AudioWorkletNode" = [ "AudioNode" "EventTarget" ];
          "AuthenticatorAssertionResponse" = [ "AuthenticatorResponse" ];
          "AuthenticatorAttestationResponse" = [ "AuthenticatorResponse" ];
          "BaseAudioContext" = [ "EventTarget" ];
          "BatteryManager" = [ "EventTarget" ];
          "BeforeUnloadEvent" = [ "Event" ];
          "BiquadFilterNode" = [ "AudioNode" "EventTarget" ];
          "BlobEvent" = [ "Event" ];
          "Bluetooth" = [ "EventTarget" ];
          "BluetoothAdvertisingEvent" = [ "Event" ];
          "BluetoothDevice" = [ "EventTarget" ];
          "BluetoothPermissionResult" = [ "EventTarget" "PermissionStatus" ];
          "BluetoothRemoteGattCharacteristic" = [ "EventTarget" ];
          "BluetoothRemoteGattService" = [ "EventTarget" ];
          "BroadcastChannel" = [ "EventTarget" ];
          "CanvasCaptureMediaStream" = [ "EventTarget" "MediaStream" ];
          "CanvasCaptureMediaStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "CdataSection" = [ "CharacterData" "EventTarget" "Node" "Text" ];
          "ChannelMergerNode" = [ "AudioNode" "EventTarget" ];
          "ChannelSplitterNode" = [ "AudioNode" "EventTarget" ];
          "CharacterData" = [ "EventTarget" "Node" ];
          "ChromeWorker" = [ "EventTarget" "Worker" ];
          "Clipboard" = [ "EventTarget" ];
          "ClipboardEvent" = [ "Event" ];
          "CloseEvent" = [ "Event" ];
          "Comment" = [ "CharacterData" "EventTarget" "Node" ];
          "CompositionEvent" = [ "Event" "UiEvent" ];
          "ConstantSourceNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "ConvolverNode" = [ "AudioNode" "EventTarget" ];
          "CssAnimation" = [ "Animation" "EventTarget" ];
          "CssConditionRule" = [ "CssGroupingRule" "CssRule" ];
          "CssCounterStyleRule" = [ "CssRule" ];
          "CssFontFaceRule" = [ "CssRule" ];
          "CssFontFeatureValuesRule" = [ "CssRule" ];
          "CssGroupingRule" = [ "CssRule" ];
          "CssImportRule" = [ "CssRule" ];
          "CssKeyframeRule" = [ "CssRule" ];
          "CssKeyframesRule" = [ "CssRule" ];
          "CssMediaRule" = [ "CssConditionRule" "CssGroupingRule" "CssRule" ];
          "CssNamespaceRule" = [ "CssRule" ];
          "CssPageRule" = [ "CssRule" ];
          "CssStyleRule" = [ "CssRule" ];
          "CssStyleSheet" = [ "StyleSheet" ];
          "CssSupportsRule" = [ "CssConditionRule" "CssGroupingRule" "CssRule" ];
          "CssTransition" = [ "Animation" "EventTarget" ];
          "CustomEvent" = [ "Event" ];
          "DedicatedWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "DelayNode" = [ "AudioNode" "EventTarget" ];
          "DeviceLightEvent" = [ "Event" ];
          "DeviceMotionEvent" = [ "Event" ];
          "DeviceOrientationEvent" = [ "Event" ];
          "DeviceProximityEvent" = [ "Event" ];
          "Document" = [ "EventTarget" "Node" ];
          "DocumentFragment" = [ "EventTarget" "Node" ];
          "DocumentTimeline" = [ "AnimationTimeline" ];
          "DocumentType" = [ "EventTarget" "Node" ];
          "DomMatrix" = [ "DomMatrixReadOnly" ];
          "DomPoint" = [ "DomPointReadOnly" ];
          "DomRect" = [ "DomRectReadOnly" ];
          "DomRequest" = [ "EventTarget" ];
          "DragEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "DynamicsCompressorNode" = [ "AudioNode" "EventTarget" ];
          "Element" = [ "EventTarget" "Node" ];
          "ErrorEvent" = [ "Event" ];
          "EventSource" = [ "EventTarget" ];
          "ExtendableEvent" = [ "Event" ];
          "ExtendableMessageEvent" = [ "Event" "ExtendableEvent" ];
          "FetchEvent" = [ "Event" "ExtendableEvent" ];
          "FetchObserver" = [ "EventTarget" ];
          "File" = [ "Blob" ];
          "FileReader" = [ "EventTarget" ];
          "FileSystemDirectoryEntry" = [ "FileSystemEntry" ];
          "FileSystemDirectoryHandle" = [ "FileSystemHandle" ];
          "FileSystemFileEntry" = [ "FileSystemEntry" ];
          "FileSystemFileHandle" = [ "FileSystemHandle" ];
          "FileSystemWritableFileStream" = [ "WritableStream" ];
          "FocusEvent" = [ "Event" "UiEvent" ];
          "FontFaceSet" = [ "EventTarget" ];
          "FontFaceSetLoadEvent" = [ "Event" ];
          "GainNode" = [ "AudioNode" "EventTarget" ];
          "GamepadAxisMoveEvent" = [ "Event" "GamepadEvent" ];
          "GamepadButtonEvent" = [ "Event" "GamepadEvent" ];
          "GamepadEvent" = [ "Event" ];
          "GpuDevice" = [ "EventTarget" ];
          "GpuInternalError" = [ "GpuError" ];
          "GpuOutOfMemoryError" = [ "GpuError" ];
          "GpuPipelineError" = [ "DomException" ];
          "GpuUncapturedErrorEvent" = [ "Event" ];
          "GpuValidationError" = [ "GpuError" ];
          "HashChangeEvent" = [ "Event" ];
          "Hid" = [ "EventTarget" ];
          "HidConnectionEvent" = [ "Event" ];
          "HidDevice" = [ "EventTarget" ];
          "HidInputReportEvent" = [ "Event" ];
          "HtmlAnchorElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlAreaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlAudioElement" = [ "Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node" ];
          "HtmlBaseElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlBodyElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlBrElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlButtonElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlCanvasElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDataElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDataListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDetailsElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDialogElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDirectoryElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDivElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDocument" = [ "Document" "EventTarget" "Node" ];
          "HtmlElement" = [ "Element" "EventTarget" "Node" ];
          "HtmlEmbedElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFieldSetElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFontElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFormControlsCollection" = [ "HtmlCollection" ];
          "HtmlFormElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFrameElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFrameSetElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHeadElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHeadingElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHrElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHtmlElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlIFrameElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlImageElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlInputElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLabelElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLegendElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLiElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLinkElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMapElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMediaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMenuElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMenuItemElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMetaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMeterElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlModElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlObjectElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptGroupElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptionsCollection" = [ "HtmlCollection" ];
          "HtmlOutputElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlParagraphElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlParamElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlPictureElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlPreElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlProgressElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlQuoteElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlScriptElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSelectElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSlotElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSourceElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSpanElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlStyleElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableCaptionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableCellElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableColElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableRowElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableSectionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTemplateElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTextAreaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTimeElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTitleElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTrackElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlUListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlUnknownElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlVideoElement" = [ "Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node" ];
          "IdbCursorWithValue" = [ "IdbCursor" ];
          "IdbDatabase" = [ "EventTarget" ];
          "IdbFileHandle" = [ "EventTarget" ];
          "IdbFileRequest" = [ "DomRequest" "EventTarget" ];
          "IdbLocaleAwareKeyRange" = [ "IdbKeyRange" ];
          "IdbMutableFile" = [ "EventTarget" ];
          "IdbOpenDbRequest" = [ "EventTarget" "IdbRequest" ];
          "IdbRequest" = [ "EventTarget" ];
          "IdbTransaction" = [ "EventTarget" ];
          "IdbVersionChangeEvent" = [ "Event" ];
          "IirFilterNode" = [ "AudioNode" "EventTarget" ];
          "ImageCaptureErrorEvent" = [ "Event" ];
          "ImageTrack" = [ "EventTarget" ];
          "InputEvent" = [ "Event" "UiEvent" ];
          "KeyboardEvent" = [ "Event" "UiEvent" ];
          "KeyframeEffect" = [ "AnimationEffect" ];
          "LocalMediaStream" = [ "EventTarget" "MediaStream" ];
          "MediaDevices" = [ "EventTarget" ];
          "MediaElementAudioSourceNode" = [ "AudioNode" "EventTarget" ];
          "MediaEncryptedEvent" = [ "Event" ];
          "MediaKeyError" = [ "Event" ];
          "MediaKeyMessageEvent" = [ "Event" ];
          "MediaKeySession" = [ "EventTarget" ];
          "MediaQueryList" = [ "EventTarget" ];
          "MediaQueryListEvent" = [ "Event" ];
          "MediaRecorder" = [ "EventTarget" ];
          "MediaRecorderErrorEvent" = [ "Event" ];
          "MediaSource" = [ "EventTarget" ];
          "MediaStream" = [ "EventTarget" ];
          "MediaStreamAudioDestinationNode" = [ "AudioNode" "EventTarget" ];
          "MediaStreamAudioSourceNode" = [ "AudioNode" "EventTarget" ];
          "MediaStreamEvent" = [ "Event" ];
          "MediaStreamTrack" = [ "EventTarget" ];
          "MediaStreamTrackEvent" = [ "Event" ];
          "MediaStreamTrackGenerator" = [ "EventTarget" "MediaStreamTrack" ];
          "MessageEvent" = [ "Event" ];
          "MessagePort" = [ "EventTarget" ];
          "MidiAccess" = [ "EventTarget" ];
          "MidiConnectionEvent" = [ "Event" ];
          "MidiInput" = [ "EventTarget" "MidiPort" ];
          "MidiMessageEvent" = [ "Event" ];
          "MidiOutput" = [ "EventTarget" "MidiPort" ];
          "MidiPort" = [ "EventTarget" ];
          "MouseEvent" = [ "Event" "UiEvent" ];
          "MouseScrollEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "MutationEvent" = [ "Event" ];
          "NetworkInformation" = [ "EventTarget" ];
          "Node" = [ "EventTarget" ];
          "Notification" = [ "EventTarget" ];
          "NotificationEvent" = [ "Event" "ExtendableEvent" ];
          "OfflineAudioCompletionEvent" = [ "Event" ];
          "OfflineAudioContext" = [ "BaseAudioContext" "EventTarget" ];
          "OfflineResourceList" = [ "EventTarget" ];
          "OffscreenCanvas" = [ "EventTarget" ];
          "OscillatorNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "PageTransitionEvent" = [ "Event" ];
          "PaintWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "PannerNode" = [ "AudioNode" "EventTarget" ];
          "PaymentMethodChangeEvent" = [ "Event" "PaymentRequestUpdateEvent" ];
          "PaymentRequestUpdateEvent" = [ "Event" ];
          "Performance" = [ "EventTarget" ];
          "PerformanceMark" = [ "PerformanceEntry" ];
          "PerformanceMeasure" = [ "PerformanceEntry" ];
          "PerformanceNavigationTiming" = [ "PerformanceEntry" "PerformanceResourceTiming" ];
          "PerformanceResourceTiming" = [ "PerformanceEntry" ];
          "PermissionStatus" = [ "EventTarget" ];
          "PointerEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "PopStateEvent" = [ "Event" ];
          "PopupBlockedEvent" = [ "Event" ];
          "PresentationAvailability" = [ "EventTarget" ];
          "PresentationConnection" = [ "EventTarget" ];
          "PresentationConnectionAvailableEvent" = [ "Event" ];
          "PresentationConnectionCloseEvent" = [ "Event" ];
          "PresentationConnectionList" = [ "EventTarget" ];
          "PresentationRequest" = [ "EventTarget" ];
          "ProcessingInstruction" = [ "CharacterData" "EventTarget" "Node" ];
          "ProgressEvent" = [ "Event" ];
          "PromiseRejectionEvent" = [ "Event" ];
          "PublicKeyCredential" = [ "Credential" ];
          "PushEvent" = [ "Event" "ExtendableEvent" ];
          "RadioNodeList" = [ "NodeList" ];
          "RtcDataChannel" = [ "EventTarget" ];
          "RtcDataChannelEvent" = [ "Event" ];
          "RtcPeerConnection" = [ "EventTarget" ];
          "RtcPeerConnectionIceErrorEvent" = [ "Event" ];
          "RtcPeerConnectionIceEvent" = [ "Event" ];
          "RtcTrackEvent" = [ "Event" ];
          "RtcdtmfSender" = [ "EventTarget" ];
          "RtcdtmfToneChangeEvent" = [ "Event" ];
          "Screen" = [ "EventTarget" ];
          "ScreenOrientation" = [ "EventTarget" ];
          "ScriptProcessorNode" = [ "AudioNode" "EventTarget" ];
          "ScrollAreaEvent" = [ "Event" "UiEvent" ];
          "SecurityPolicyViolationEvent" = [ "Event" ];
          "Serial" = [ "EventTarget" ];
          "SerialPort" = [ "EventTarget" ];
          "ServiceWorker" = [ "EventTarget" ];
          "ServiceWorkerContainer" = [ "EventTarget" ];
          "ServiceWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "ServiceWorkerRegistration" = [ "EventTarget" ];
          "ShadowRoot" = [ "DocumentFragment" "EventTarget" "Node" ];
          "SharedWorker" = [ "EventTarget" ];
          "SharedWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "SourceBuffer" = [ "EventTarget" ];
          "SourceBufferList" = [ "EventTarget" ];
          "SpeechRecognition" = [ "EventTarget" ];
          "SpeechRecognitionError" = [ "Event" ];
          "SpeechRecognitionEvent" = [ "Event" ];
          "SpeechSynthesis" = [ "EventTarget" ];
          "SpeechSynthesisErrorEvent" = [ "Event" "SpeechSynthesisEvent" ];
          "SpeechSynthesisEvent" = [ "Event" ];
          "SpeechSynthesisUtterance" = [ "EventTarget" ];
          "StereoPannerNode" = [ "AudioNode" "EventTarget" ];
          "StorageEvent" = [ "Event" ];
          "SubmitEvent" = [ "Event" ];
          "SvgAnimateElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimateMotionElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimateTransformElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimationElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgCircleElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgClipPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgComponentTransferFunctionElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgDefsElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgDescElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgElement" = [ "Element" "EventTarget" "Node" ];
          "SvgEllipseElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgFilterElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgForeignObjectElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgGeometryElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgGraphicsElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgImageElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgLineElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgLinearGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement" ];
          "SvgMarkerElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgMaskElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgMetadataElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgPathSegArcAbs" = [ "SvgPathSeg" ];
          "SvgPathSegArcRel" = [ "SvgPathSeg" ];
          "SvgPathSegClosePath" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalRel" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoRel" = [ "SvgPathSeg" ];
          "SvgPatternElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgPolygonElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgPolylineElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgRadialGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement" ];
          "SvgRectElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgScriptElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgSetElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgStopElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgStyleElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgSwitchElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgSymbolElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgTextContentElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgTextElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement" ];
          "SvgTextPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" ];
          "SvgTextPositioningElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" ];
          "SvgTitleElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgUseElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgViewElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgaElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgfeBlendElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeColorMatrixElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeComponentTransferElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeCompositeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeConvolveMatrixElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDiffuseLightingElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDisplacementMapElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDistantLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDropShadowElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeFloodElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeFuncAElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncBElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncGElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncRElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeGaussianBlurElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeImageElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMergeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMergeNodeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMorphologyElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeOffsetElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfePointLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeSpecularLightingElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeSpotLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeTileElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeTurbulenceElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvggElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgmPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgsvgElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgtSpanElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement" ];
          "TaskController" = [ "AbortController" ];
          "TaskPriorityChangeEvent" = [ "Event" ];
          "TaskSignal" = [ "AbortSignal" "EventTarget" ];
          "TcpServerSocket" = [ "EventTarget" ];
          "TcpServerSocketEvent" = [ "Event" ];
          "TcpSocket" = [ "EventTarget" ];
          "TcpSocketErrorEvent" = [ "Event" ];
          "TcpSocketEvent" = [ "Event" ];
          "Text" = [ "CharacterData" "EventTarget" "Node" ];
          "TextTrack" = [ "EventTarget" ];
          "TextTrackCue" = [ "EventTarget" ];
          "TextTrackList" = [ "EventTarget" ];
          "TimeEvent" = [ "Event" ];
          "TouchEvent" = [ "Event" "UiEvent" ];
          "TrackEvent" = [ "Event" ];
          "TransitionEvent" = [ "Event" ];
          "UiEvent" = [ "Event" ];
          "Usb" = [ "EventTarget" ];
          "UsbConnectionEvent" = [ "Event" ];
          "UsbPermissionResult" = [ "EventTarget" "PermissionStatus" ];
          "UserProximityEvent" = [ "Event" ];
          "ValueEvent" = [ "Event" ];
          "VideoStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "VideoTrackList" = [ "EventTarget" ];
          "VrDisplay" = [ "EventTarget" ];
          "VttCue" = [ "EventTarget" "TextTrackCue" ];
          "WakeLockSentinel" = [ "EventTarget" ];
          "WaveShaperNode" = [ "AudioNode" "EventTarget" ];
          "WebGlContextEvent" = [ "Event" ];
          "WebKitCssMatrix" = [ "DomMatrix" "DomMatrixReadOnly" ];
          "WebSocket" = [ "EventTarget" ];
          "WebTransportError" = [ "DomException" ];
          "WebTransportReceiveStream" = [ "ReadableStream" ];
          "WebTransportSendStream" = [ "WritableStream" ];
          "WheelEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "Window" = [ "EventTarget" ];
          "WindowClient" = [ "Client" ];
          "Worker" = [ "EventTarget" ];
          "WorkerDebuggerGlobalScope" = [ "EventTarget" ];
          "WorkerGlobalScope" = [ "EventTarget" ];
          "XmlDocument" = [ "Document" "EventTarget" "Node" ];
          "XmlHttpRequest" = [ "EventTarget" "XmlHttpRequestEventTarget" ];
          "XmlHttpRequestEventTarget" = [ "EventTarget" ];
          "XmlHttpRequestUpload" = [ "EventTarget" "XmlHttpRequestEventTarget" ];
          "XrBoundedReferenceSpace" = [ "EventTarget" "XrReferenceSpace" "XrSpace" ];
          "XrInputSourceEvent" = [ "Event" ];
          "XrInputSourcesChangeEvent" = [ "Event" ];
          "XrJointPose" = [ "XrPose" ];
          "XrJointSpace" = [ "EventTarget" "XrSpace" ];
          "XrLayer" = [ "EventTarget" ];
          "XrPermissionStatus" = [ "EventTarget" "PermissionStatus" ];
          "XrReferenceSpace" = [ "EventTarget" "XrSpace" ];
          "XrReferenceSpaceEvent" = [ "Event" ];
          "XrSession" = [ "EventTarget" ];
          "XrSessionEvent" = [ "Event" ];
          "XrSpace" = [ "EventTarget" ];
          "XrSystem" = [ "EventTarget" ];
          "XrViewerPose" = [ "XrPose" ];
          "XrWebGlLayer" = [ "EventTarget" "XrLayer" ];
        };
        resolvedDefaultFeatures = [ "Crypto" "Event" "EventTarget" "MessageEvent" "Performance" "Window" "Worker" ];
      };
      "web-time" = rec {
        crateName = "web-time";
        version = "1.1.0";
        edition = "2021";
        sha256 = "1fx05yqx83dhx628wb70fyy10yjfq1jpl20qfqhdkymi13rq0ras";
        libName = "web_time";
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "webpki-root-certs 0.26.11" = rec {
        crateName = "webpki-root-certs";
        version = "0.26.11";
        edition = "2021";
        sha256 = "0gir7r0pb4lirqfx7gzgcw3pz3aj4hfmykri62svyvhlj7pz1ivm";
        libName = "webpki_root_certs";
        dependencies = [
          {
            name = "webpki-root-certs";
            packageId = "webpki-root-certs 1.0.0";
            rename = "parent";
          }
        ];

      };
      "webpki-root-certs 1.0.0" = rec {
        crateName = "webpki-root-certs";
        version = "1.0.0";
        edition = "2021";
        sha256 = "195i7hqadrck4pqk6bqmy3phzjpvsfgbxsh3bili51wz39z3za01";
        libName = "webpki_root_certs";
        dependencies = [
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            usesDefaultFeatures = false;
          }
        ];

      };
      "webpki-roots 0.25.4" = rec {
        crateName = "webpki-roots";
        version = "0.25.4";
        edition = "2018";
        sha256 = "1qgqa615gc1cgklls4bkjp9jv9pvv3jnl82lc6wd7dkximywa82z";
        libName = "webpki_roots";

      };
      "webpki-roots 0.26.11" = rec {
        crateName = "webpki-roots";
        version = "0.26.11";
        edition = "2021";
        sha256 = "1agpayg5zzf7m1a01q30jahlgmn5nwggbabdhq0in008pf5c66sj";
        libName = "webpki_roots";
        dependencies = [
          {
            name = "webpki-roots";
            packageId = "webpki-roots 1.0.0";
            rename = "parent";
          }
        ];

      };
      "webpki-roots 1.0.0" = rec {
        crateName = "webpki-roots";
        version = "1.0.0";
        edition = "2021";
        sha256 = "1nyg365shpxkbazrsvh9c4cv7ar16xnfq62w48xdmwn43j6p6lr8";
        libName = "webpki_roots";
        dependencies = [
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            usesDefaultFeatures = false;
          }
        ];

      };
      "whoami" = rec {
        crateName = "whoami";
        version = "1.6.0";
        edition = "2018";
        sha256 = "19q2vm5ax3bgwffbywn4ad62anc1f4l1ky61h0y2qjdb30qx3539";
        dependencies = [
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.5.12";
            target = { target, features }: (("redox" == target."os" or null) && (!("wasm32" == target."arch" or null)));
          }
          {
            name = "wasite";
            packageId = "wasite";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("wasi" == target."os" or null));
          }
        ];
        features = {
          "default" = [ "web" ];
          "web" = [ "web-sys" ];
          "web-sys" = [ "dep:web-sys" ];
        };
      };
      "wide" = rec {
        crateName = "wide";
        version = "0.7.32";
        edition = "2018";
        sha256 = "08mb6iqdscqiqrbfkjrnfr876ah4cc0cx5pjilz3yqw1k9mmgda1";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "safe_arch";
            packageId = "safe_arch";
            features = [ "bytemuck" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "widestring" = rec {
        crateName = "widestring";
        version = "1.2.0";
        edition = "2021";
        sha256 = "0zg04qvpk2xysbbwhdgyilgn4p9igvyj9fhzl7pckam1khvz6z6x";
        features = {
          "debugger_visualizer" = [ "alloc" ];
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.9";
        edition = "2015";
        sha256 = "06gl025x418lchw1wxj64ycr7gha83m44cjr5sarhynd9xkrm0sw";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "impl-default" "iphlpapi" "iptypes" "knownfolders" "minwinbase" "minwindef" "netioapi" "ntdef" "ntsecapi" "ntstatus" "objbase" "processenv" "processthreadsapi" "profileapi" "shlobj" "std" "synchapi" "winbase" "wincon" "winerror" "winnt" "winuser" "ws2def" "ws2ipdef" "wtypesbase" ];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        libName = "winapi_i686_pc_windows_gnu";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.9";
        edition = "2021";
        sha256 = "1fqhkcl9scd230cnfj8apfficpf5c9vhwnk4yy9xfc1sw69iq8ng";
        libName = "winapi_util";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_Console" "Win32_System_SystemInformation" ];
          }
        ];

      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        libName = "winapi_x86_64_pc_windows_gnu";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "windows" = rec {
        crateName = "windows";
        version = "0.53.0";
        edition = "2021";
        sha256 = "0f5mjwrnrxx3ackid0gv3003vsgr8nisxvhnnymdqh1iz14czigg";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-core";
            packageId = "windows-core 0.53.0";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "AI" = [ "Foundation" ];
          "AI_MachineLearning" = [ "AI" ];
          "ApplicationModel" = [ "Foundation" ];
          "ApplicationModel_Activation" = [ "ApplicationModel" ];
          "ApplicationModel_AppExtensions" = [ "ApplicationModel" ];
          "ApplicationModel_AppService" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments_AppointmentsProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Appointments_DataProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Background" = [ "ApplicationModel" ];
          "ApplicationModel_Calls" = [ "ApplicationModel" ];
          "ApplicationModel_Calls_Background" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Calls_Provider" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Chat" = [ "ApplicationModel" ];
          "ApplicationModel_CommunicationBlocking" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts_DataProvider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_Contacts_Provider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_ConversationalAgent" = [ "ApplicationModel" ];
          "ApplicationModel_Core" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer_DragDrop" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_DataTransfer_DragDrop_Core" = [ "ApplicationModel_DataTransfer_DragDrop" ];
          "ApplicationModel_DataTransfer_ShareTarget" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_Email" = [ "ApplicationModel" ];
          "ApplicationModel_Email_DataProvider" = [ "ApplicationModel_Email" ];
          "ApplicationModel_ExtendedExecution" = [ "ApplicationModel" ];
          "ApplicationModel_ExtendedExecution_Foreground" = [ "ApplicationModel_ExtendedExecution" ];
          "ApplicationModel_Holographic" = [ "ApplicationModel" ];
          "ApplicationModel_LockScreen" = [ "ApplicationModel" ];
          "ApplicationModel_Payments" = [ "ApplicationModel" ];
          "ApplicationModel_Payments_Provider" = [ "ApplicationModel_Payments" ];
          "ApplicationModel_Preview" = [ "ApplicationModel" ];
          "ApplicationModel_Preview_Holographic" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_InkWorkspace" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_Notes" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Resources" = [ "ApplicationModel" ];
          "ApplicationModel_Resources_Core" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Resources_Management" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Search" = [ "ApplicationModel" ];
          "ApplicationModel_Search_Core" = [ "ApplicationModel_Search" ];
          "ApplicationModel_Store" = [ "ApplicationModel" ];
          "ApplicationModel_Store_LicenseManagement" = [ "ApplicationModel_Store" ];
          "ApplicationModel_Store_Preview" = [ "ApplicationModel_Store" ];
          "ApplicationModel_Store_Preview_InstallControl" = [ "ApplicationModel_Store_Preview" ];
          "ApplicationModel_UserActivities" = [ "ApplicationModel" ];
          "ApplicationModel_UserActivities_Core" = [ "ApplicationModel_UserActivities" ];
          "ApplicationModel_UserDataAccounts" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataAccounts_Provider" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataAccounts_SystemAccess" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataTasks" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataTasks_DataProvider" = [ "ApplicationModel_UserDataTasks" ];
          "ApplicationModel_VoiceCommands" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet_System" = [ "ApplicationModel_Wallet" ];
          "Data" = [ "Foundation" ];
          "Data_Html" = [ "Data" ];
          "Data_Json" = [ "Data" ];
          "Data_Pdf" = [ "Data" ];
          "Data_Text" = [ "Data" ];
          "Data_Xml" = [ "Data" ];
          "Data_Xml_Dom" = [ "Data_Xml" ];
          "Data_Xml_Xsl" = [ "Data_Xml" ];
          "Devices" = [ "Foundation" ];
          "Devices_Adc" = [ "Devices" ];
          "Devices_Adc_Provider" = [ "Devices_Adc" ];
          "Devices_Background" = [ "Devices" ];
          "Devices_Bluetooth" = [ "Devices" ];
          "Devices_Bluetooth_Advertisement" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Background" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_GenericAttributeProfile" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Rfcomm" = [ "Devices_Bluetooth" ];
          "Devices_Custom" = [ "Devices" ];
          "Devices_Display" = [ "Devices" ];
          "Devices_Display_Core" = [ "Devices_Display" ];
          "Devices_Enumeration" = [ "Devices" ];
          "Devices_Enumeration_Pnp" = [ "Devices_Enumeration" ];
          "Devices_Geolocation" = [ "Devices" ];
          "Devices_Geolocation_Geofencing" = [ "Devices_Geolocation" ];
          "Devices_Geolocation_Provider" = [ "Devices_Geolocation" ];
          "Devices_Gpio" = [ "Devices" ];
          "Devices_Gpio_Provider" = [ "Devices_Gpio" ];
          "Devices_Haptics" = [ "Devices" ];
          "Devices_HumanInterfaceDevice" = [ "Devices" ];
          "Devices_I2c" = [ "Devices" ];
          "Devices_I2c_Provider" = [ "Devices_I2c" ];
          "Devices_Input" = [ "Devices" ];
          "Devices_Input_Preview" = [ "Devices_Input" ];
          "Devices_Lights" = [ "Devices" ];
          "Devices_Lights_Effects" = [ "Devices_Lights" ];
          "Devices_Midi" = [ "Devices" ];
          "Devices_PointOfService" = [ "Devices" ];
          "Devices_PointOfService_Provider" = [ "Devices_PointOfService" ];
          "Devices_Portable" = [ "Devices" ];
          "Devices_Power" = [ "Devices" ];
          "Devices_Printers" = [ "Devices" ];
          "Devices_Printers_Extensions" = [ "Devices_Printers" ];
          "Devices_Pwm" = [ "Devices" ];
          "Devices_Pwm_Provider" = [ "Devices_Pwm" ];
          "Devices_Radios" = [ "Devices" ];
          "Devices_Scanners" = [ "Devices" ];
          "Devices_Sensors" = [ "Devices" ];
          "Devices_Sensors_Custom" = [ "Devices_Sensors" ];
          "Devices_SerialCommunication" = [ "Devices" ];
          "Devices_SmartCards" = [ "Devices" ];
          "Devices_Sms" = [ "Devices" ];
          "Devices_Spi" = [ "Devices" ];
          "Devices_Spi_Provider" = [ "Devices_Spi" ];
          "Devices_Usb" = [ "Devices" ];
          "Devices_WiFi" = [ "Devices" ];
          "Devices_WiFiDirect" = [ "Devices" ];
          "Devices_WiFiDirect_Services" = [ "Devices_WiFiDirect" ];
          "Embedded" = [ "Foundation" ];
          "Embedded_DeviceLockdown" = [ "Embedded" ];
          "Foundation_Collections" = [ "Foundation" ];
          "Foundation_Diagnostics" = [ "Foundation" ];
          "Foundation_Metadata" = [ "Foundation" ];
          "Foundation_Numerics" = [ "Foundation" ];
          "Gaming" = [ "Foundation" ];
          "Gaming_Input" = [ "Gaming" ];
          "Gaming_Input_Custom" = [ "Gaming_Input" ];
          "Gaming_Input_ForceFeedback" = [ "Gaming_Input" ];
          "Gaming_Input_Preview" = [ "Gaming_Input" ];
          "Gaming_Preview" = [ "Gaming" ];
          "Gaming_Preview_GamesEnumeration" = [ "Gaming_Preview" ];
          "Gaming_UI" = [ "Gaming" ];
          "Gaming_XboxLive" = [ "Gaming" ];
          "Gaming_XboxLive_Storage" = [ "Gaming_XboxLive" ];
          "Globalization" = [ "Foundation" ];
          "Globalization_Collation" = [ "Globalization" ];
          "Globalization_DateTimeFormatting" = [ "Globalization" ];
          "Globalization_Fonts" = [ "Globalization" ];
          "Globalization_NumberFormatting" = [ "Globalization" ];
          "Globalization_PhoneNumberFormatting" = [ "Globalization" ];
          "Graphics" = [ "Foundation" ];
          "Graphics_Capture" = [ "Graphics" ];
          "Graphics_DirectX" = [ "Graphics" ];
          "Graphics_DirectX_Direct3D11" = [ "Graphics_DirectX" ];
          "Graphics_Display" = [ "Graphics" ];
          "Graphics_Display_Core" = [ "Graphics_Display" ];
          "Graphics_Effects" = [ "Graphics" ];
          "Graphics_Holographic" = [ "Graphics" ];
          "Graphics_Imaging" = [ "Graphics" ];
          "Graphics_Printing" = [ "Graphics" ];
          "Graphics_Printing3D" = [ "Graphics" ];
          "Graphics_Printing_OptionDetails" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintSupport" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintTicket" = [ "Graphics_Printing" ];
          "Graphics_Printing_Workflow" = [ "Graphics_Printing" ];
          "Management" = [ "Foundation" ];
          "Management_Core" = [ "Management" ];
          "Management_Deployment" = [ "Management" ];
          "Management_Deployment_Preview" = [ "Management_Deployment" ];
          "Management_Policies" = [ "Management" ];
          "Management_Update" = [ "Management" ];
          "Management_Workplace" = [ "Management" ];
          "Media" = [ "Foundation" ];
          "Media_AppBroadcasting" = [ "Media" ];
          "Media_AppRecording" = [ "Media" ];
          "Media_Audio" = [ "Media" ];
          "Media_Capture" = [ "Media" ];
          "Media_Capture_Core" = [ "Media_Capture" ];
          "Media_Capture_Frames" = [ "Media_Capture" ];
          "Media_Casting" = [ "Media" ];
          "Media_ClosedCaptioning" = [ "Media" ];
          "Media_ContentRestrictions" = [ "Media" ];
          "Media_Control" = [ "Media" ];
          "Media_Core" = [ "Media" ];
          "Media_Core_Preview" = [ "Media_Core" ];
          "Media_Devices" = [ "Media" ];
          "Media_Devices_Core" = [ "Media_Devices" ];
          "Media_DialProtocol" = [ "Media" ];
          "Media_Editing" = [ "Media" ];
          "Media_Effects" = [ "Media" ];
          "Media_FaceAnalysis" = [ "Media" ];
          "Media_Import" = [ "Media" ];
          "Media_MediaProperties" = [ "Media" ];
          "Media_Miracast" = [ "Media" ];
          "Media_Ocr" = [ "Media" ];
          "Media_PlayTo" = [ "Media" ];
          "Media_Playback" = [ "Media" ];
          "Media_Playlists" = [ "Media" ];
          "Media_Protection" = [ "Media" ];
          "Media_Protection_PlayReady" = [ "Media_Protection" ];
          "Media_Render" = [ "Media" ];
          "Media_SpeechRecognition" = [ "Media" ];
          "Media_SpeechSynthesis" = [ "Media" ];
          "Media_Streaming" = [ "Media" ];
          "Media_Streaming_Adaptive" = [ "Media_Streaming" ];
          "Media_Transcoding" = [ "Media" ];
          "Networking" = [ "Foundation" ];
          "Networking_BackgroundTransfer" = [ "Networking" ];
          "Networking_Connectivity" = [ "Networking" ];
          "Networking_NetworkOperators" = [ "Networking" ];
          "Networking_Proximity" = [ "Networking" ];
          "Networking_PushNotifications" = [ "Networking" ];
          "Networking_ServiceDiscovery" = [ "Networking" ];
          "Networking_ServiceDiscovery_Dnssd" = [ "Networking_ServiceDiscovery" ];
          "Networking_Sockets" = [ "Networking" ];
          "Networking_Vpn" = [ "Networking" ];
          "Networking_XboxLive" = [ "Networking" ];
          "Perception" = [ "Foundation" ];
          "Perception_Automation" = [ "Perception" ];
          "Perception_Automation_Core" = [ "Perception_Automation" ];
          "Perception_People" = [ "Perception" ];
          "Perception_Spatial" = [ "Perception" ];
          "Perception_Spatial_Preview" = [ "Perception_Spatial" ];
          "Perception_Spatial_Surfaces" = [ "Perception_Spatial" ];
          "Phone" = [ "Foundation" ];
          "Phone_ApplicationModel" = [ "Phone" ];
          "Phone_Devices" = [ "Phone" ];
          "Phone_Devices_Notification" = [ "Phone_Devices" ];
          "Phone_Devices_Power" = [ "Phone_Devices" ];
          "Phone_Management" = [ "Phone" ];
          "Phone_Management_Deployment" = [ "Phone_Management" ];
          "Phone_Media" = [ "Phone" ];
          "Phone_Media_Devices" = [ "Phone_Media" ];
          "Phone_Notification" = [ "Phone" ];
          "Phone_Notification_Management" = [ "Phone_Notification" ];
          "Phone_PersonalInformation" = [ "Phone" ];
          "Phone_PersonalInformation_Provisioning" = [ "Phone_PersonalInformation" ];
          "Phone_Speech" = [ "Phone" ];
          "Phone_Speech_Recognition" = [ "Phone_Speech" ];
          "Phone_StartScreen" = [ "Phone" ];
          "Phone_System" = [ "Phone" ];
          "Phone_System_Power" = [ "Phone_System" ];
          "Phone_System_Profile" = [ "Phone_System" ];
          "Phone_System_UserProfile" = [ "Phone_System" ];
          "Phone_System_UserProfile_GameServices" = [ "Phone_System_UserProfile" ];
          "Phone_System_UserProfile_GameServices_Core" = [ "Phone_System_UserProfile_GameServices" ];
          "Phone_UI" = [ "Phone" ];
          "Phone_UI_Input" = [ "Phone_UI" ];
          "Security" = [ "Foundation" ];
          "Security_Authentication" = [ "Security" ];
          "Security_Authentication_Identity" = [ "Security_Authentication" ];
          "Security_Authentication_Identity_Core" = [ "Security_Authentication_Identity" ];
          "Security_Authentication_OnlineId" = [ "Security_Authentication" ];
          "Security_Authentication_Web" = [ "Security_Authentication" ];
          "Security_Authentication_Web_Core" = [ "Security_Authentication_Web" ];
          "Security_Authentication_Web_Provider" = [ "Security_Authentication_Web" ];
          "Security_Authorization" = [ "Security" ];
          "Security_Authorization_AppCapabilityAccess" = [ "Security_Authorization" ];
          "Security_Credentials" = [ "Security" ];
          "Security_Credentials_UI" = [ "Security_Credentials" ];
          "Security_Cryptography" = [ "Security" ];
          "Security_Cryptography_Certificates" = [ "Security_Cryptography" ];
          "Security_Cryptography_Core" = [ "Security_Cryptography" ];
          "Security_Cryptography_DataProtection" = [ "Security_Cryptography" ];
          "Security_DataProtection" = [ "Security" ];
          "Security_EnterpriseData" = [ "Security" ];
          "Security_ExchangeActiveSyncProvisioning" = [ "Security" ];
          "Security_Isolation" = [ "Security" ];
          "Services" = [ "Foundation" ];
          "Services_Maps" = [ "Services" ];
          "Services_Maps_Guidance" = [ "Services_Maps" ];
          "Services_Maps_LocalSearch" = [ "Services_Maps" ];
          "Services_Maps_OfflineMaps" = [ "Services_Maps" ];
          "Services_Store" = [ "Services" ];
          "Services_TargetedContent" = [ "Services" ];
          "Storage" = [ "Foundation" ];
          "Storage_AccessCache" = [ "Storage" ];
          "Storage_BulkAccess" = [ "Storage" ];
          "Storage_Compression" = [ "Storage" ];
          "Storage_FileProperties" = [ "Storage" ];
          "Storage_Pickers" = [ "Storage" ];
          "Storage_Pickers_Provider" = [ "Storage_Pickers" ];
          "Storage_Provider" = [ "Storage" ];
          "Storage_Search" = [ "Storage" ];
          "Storage_Streams" = [ "Storage" ];
          "System" = [ "Foundation" ];
          "System_Diagnostics" = [ "System" ];
          "System_Diagnostics_DevicePortal" = [ "System_Diagnostics" ];
          "System_Diagnostics_Telemetry" = [ "System_Diagnostics" ];
          "System_Diagnostics_TraceReporting" = [ "System_Diagnostics" ];
          "System_Display" = [ "System" ];
          "System_Implementation" = [ "System" ];
          "System_Implementation_FileExplorer" = [ "System_Implementation" ];
          "System_Inventory" = [ "System" ];
          "System_Power" = [ "System" ];
          "System_Profile" = [ "System" ];
          "System_Profile_SystemManufacturers" = [ "System_Profile" ];
          "System_RemoteDesktop" = [ "System" ];
          "System_RemoteDesktop_Input" = [ "System_RemoteDesktop" ];
          "System_RemoteDesktop_Provider" = [ "System_RemoteDesktop" ];
          "System_RemoteSystems" = [ "System" ];
          "System_Threading" = [ "System" ];
          "System_Threading_Core" = [ "System_Threading" ];
          "System_Update" = [ "System" ];
          "System_UserProfile" = [ "System" ];
          "UI" = [ "Foundation" ];
          "UI_Accessibility" = [ "UI" ];
          "UI_ApplicationSettings" = [ "UI" ];
          "UI_Composition" = [ "UI" ];
          "UI_Composition_Core" = [ "UI_Composition" ];
          "UI_Composition_Desktop" = [ "UI_Composition" ];
          "UI_Composition_Diagnostics" = [ "UI_Composition" ];
          "UI_Composition_Effects" = [ "UI_Composition" ];
          "UI_Composition_Interactions" = [ "UI_Composition" ];
          "UI_Composition_Scenes" = [ "UI_Composition" ];
          "UI_Core" = [ "UI" ];
          "UI_Core_AnimationMetrics" = [ "UI_Core" ];
          "UI_Core_Preview" = [ "UI_Core" ];
          "UI_Input" = [ "UI" ];
          "UI_Input_Core" = [ "UI_Input" ];
          "UI_Input_Inking" = [ "UI_Input" ];
          "UI_Input_Inking_Analysis" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Core" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Preview" = [ "UI_Input_Inking" ];
          "UI_Input_Preview" = [ "UI_Input" ];
          "UI_Input_Preview_Injection" = [ "UI_Input_Preview" ];
          "UI_Input_Spatial" = [ "UI_Input" ];
          "UI_Notifications" = [ "UI" ];
          "UI_Notifications_Management" = [ "UI_Notifications" ];
          "UI_Notifications_Preview" = [ "UI_Notifications" ];
          "UI_Popups" = [ "UI" ];
          "UI_Shell" = [ "UI" ];
          "UI_StartScreen" = [ "UI" ];
          "UI_Text" = [ "UI" ];
          "UI_Text_Core" = [ "UI_Text" ];
          "UI_UIAutomation" = [ "UI" ];
          "UI_UIAutomation_Core" = [ "UI_UIAutomation" ];
          "UI_ViewManagement" = [ "UI" ];
          "UI_ViewManagement_Core" = [ "UI_ViewManagement" ];
          "UI_WebUI" = [ "UI" ];
          "UI_WebUI_Core" = [ "UI_WebUI" ];
          "UI_WindowManagement" = [ "UI" ];
          "UI_WindowManagement_Preview" = [ "UI_WindowManagement" ];
          "Wdk" = [ "Win32_Foundation" ];
          "Wdk_Devices" = [ "Wdk" ];
          "Wdk_Devices_HumanInterfaceDevice" = [ "Wdk_Devices" ];
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_NetworkManagement" = [ "Wdk" ];
          "Wdk_NetworkManagement_Ndis" = [ "Wdk_NetworkManagement" ];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = [ "Wdk_NetworkManagement" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Web" = [ "Foundation" ];
          "Web_AtomPub" = [ "Web" ];
          "Web_Http" = [ "Web" ];
          "Web_Http_Diagnostics" = [ "Web_Http" ];
          "Web_Http_Filters" = [ "Web_Http" ];
          "Web_Http_Headers" = [ "Web_Http" ];
          "Web_Syndication" = [ "Web" ];
          "Web_UI" = [ "Web" ];
          "Web_UI_Interop" = [ "Web_UI" ];
          "Win32" = [ "Win32_Foundation" ];
          "Win32_AI" = [ "Win32" ];
          "Win32_AI_MachineLearning" = [ "Win32_AI" ];
          "Win32_AI_MachineLearning_DirectML" = [ "Win32_AI_MachineLearning" ];
          "Win32_AI_MachineLearning_WinML" = [ "Win32_AI_MachineLearning" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_CompositionSwapchain" = [ "Win32_Graphics" ];
          "Win32_Graphics_DXCore" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D_Common" = [ "Win32_Graphics_Direct2D" ];
          "Win32_Graphics_Direct3D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D10" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D_Dxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_Direct3D_Fxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_DirectComposition" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectDraw" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectManipulation" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectWrite" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi_Common" = [ "Win32_Graphics_Dxgi" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging_D2D" = [ "Win32_Graphics_Imaging" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectSound" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DirectShow" = [ "Win32_Media" ];
          "Win32_Media_DirectShow_Tv" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DirectShow_Xml" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaFoundation" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_PictureAcquisition" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_TraceLogging" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_SideShow" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_TransactionServer" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WinRT" = [ "Win32_System" ];
          "Win32_System_WinRT_AllJoyn" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Composition" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_CoreInputView" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Direct3D11" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Display" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics_Capture" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Direct2D" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Imaging" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Holographic" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Isolation" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_ML" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Media" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Metadata" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Pdf" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Printing" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Shell" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Storage" = [ "Win32_System_WinRT" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
          "implement" = [ "windows-implement" "windows-interface" "windows-core/implement" ];
          "windows-implement" = [ "dep:windows-implement" ];
          "windows-interface" = [ "dep:windows-interface" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_NetworkManagement" "Win32_NetworkManagement_IpHelper" "Win32_NetworkManagement_Ndis" "Win32_Networking" "Win32_Networking_WinSock" "default" ];
      };
      "windows-core 0.53.0" = rec {
        crateName = "windows-core";
        version = "0.53.0";
        edition = "2021";
        sha256 = "1pd58vj252p28xznq7mdcvdw0npxn7dcwnm5kymz2xv3ba4mpk4x";
        libName = "windows_core";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-result";
            packageId = "windows-result 0.1.2";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "windows-core 0.61.0" = rec {
        crateName = "windows-core";
        version = "0.61.0";
        edition = "2021";
        sha256 = "104915nsby2cgp322pqqkmj2r82v5sg4hil0hxddg1hc67gc2qs7";
        libName = "windows_core";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-implement";
            packageId = "windows-implement";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-interface";
            packageId = "windows-interface";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-link";
            packageId = "windows-link";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-result";
            packageId = "windows-result 0.3.2";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-strings";
            packageId = "windows-strings";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "windows-result/std" "windows-strings/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "windows-implement" = rec {
        crateName = "windows-implement";
        version = "0.60.0";
        edition = "2021";
        sha256 = "0dm88k3hlaax85xkls4gf597ar4z8m5vzjjagzk910ph7b8xszx4";
        procMacro = true;
        libName = "windows_implement";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "parsing" "proc-macro" "printing" "full" "clone-impls" ];
          }
        ];

      };
      "windows-interface" = rec {
        crateName = "windows-interface";
        version = "0.59.1";
        edition = "2021";
        sha256 = "1a4zr8740gyzzhq02xgl6vx8l669jwfby57xgf0zmkcdkyv134mx";
        procMacro = true;
        libName = "windows_interface";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "parsing" "proc-macro" "printing" "full" "clone-impls" ];
          }
        ];

      };
      "windows-link" = rec {
        crateName = "windows-link";
        version = "0.1.1";
        edition = "2021";
        sha256 = "0f2cq7imbrppsmmnz8899hfhg07cp5gq6rh0bjhb1qb6nwshk13n";
        libName = "windows_link";
        authors = [
          "Microsoft"
        ];

      };
      "windows-result 0.1.2" = rec {
        crateName = "windows-result";
        version = "0.1.2";
        edition = "2021";
        sha256 = "1y274q1v0vy21lhkgslpxpq1m08hvr1mcs2l88h1b1gcx0136f2y";
        libName = "windows_result";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "windows-result 0.3.2" = rec {
        crateName = "windows-result";
        version = "0.3.2";
        edition = "2021";
        sha256 = "0li2f76anf0rg7i966d9qs5iprsg555g9rgyzj7gcpfr9wdd2ky6";
        libName = "windows_result";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-link";
            packageId = "windows-link";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "windows-strings" = rec {
        crateName = "windows-strings";
        version = "0.4.0";
        edition = "2021";
        sha256 = "15rg6a0ha1d231wwps2qlgyqrgkyj1r8v9vsb8nlbvih4ijajavs";
        libName = "windows_strings";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-link";
            packageId = "windows-link";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "windows-sys 0.45.0" = rec {
        crateName = "windows-sys";
        version = "0.45.0";
        edition = "2018";
        sha256 = "1l36bcqm4g89pknfp8r9rl1w4bn017q6a8qlx8viv0xjxzjkna3m";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.42.2";
            target = { target, features }: (!(target."windows_raw_dylib" or false));
          }
        ];
        features = {
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_Globalization" "Win32_NetworkManagement" "Win32_NetworkManagement_IpHelper" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_SystemInformation" "Win32_System_Threading" "default" ];
      };
      "windows-sys 0.48.0" = rec {
        crateName = "windows-sys";
        version = "0.48.0";
        edition = "2018";
        sha256 = "1aan23v5gs7gya1lc46hqn9mdh8yph3fhxmhxlw36pn6pqc28zb7";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.48.5";
          }
        ];
        features = {
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_Globalization" "Win32_NetworkManagement" "Win32_NetworkManagement_IpHelper" "Win32_NetworkManagement_Ndis" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Com" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_IO" "Win32_System_Memory" "Win32_System_Pipes" "Win32_System_Registry" "Win32_System_Threading" "Win32_System_Time" "Win32_System_WindowsProgramming" "Win32_UI" "Win32_UI_Shell" "default" ];
      };
      "windows-sys 0.52.0" = rec {
        crateName = "windows-sys";
        version = "0.52.0";
        edition = "2021";
        sha256 = "0gd3v4ji88490zgb6b5mq5zgbvwv7zx1ibn8v3x83rwcdbryaar8";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Wdk" "Wdk_Foundation" "Wdk_Storage" "Wdk_Storage_FileSystem" "Wdk_System" "Wdk_System_IO" "Win32" "Win32_Foundation" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Console" "Win32_System_IO" "Win32_System_Pipes" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "default" ];
      };
      "windows-sys 0.59.0" = rec {
        crateName = "windows-sys";
        version = "0.59.0";
        edition = "2021";
        sha256 = "0fw5672ziw8b3zpmnbp9pdv1famk74f1l9fcbc3zsrzdg56vqf0y";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "Wdk" = [ "Win32_Foundation" ];
          "Wdk_Devices" = [ "Wdk" ];
          "Wdk_Devices_Bluetooth" = [ "Wdk_Devices" ];
          "Wdk_Devices_HumanInterfaceDevice" = [ "Wdk_Devices" ];
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_NetworkManagement" = [ "Wdk" ];
          "Wdk_NetworkManagement_Ndis" = [ "Wdk_NetworkManagement" ];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = [ "Wdk_NetworkManagement" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_Memory" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32" = [ "Win32_Foundation" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_TraceLogging" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Wdk" "Wdk_Foundation" "Wdk_Storage" "Wdk_Storage_FileSystem" "Win32" "Win32_Foundation" "Win32_NetworkManagement" "Win32_NetworkManagement_IpHelper" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Security_Authentication" "Win32_Security_Authentication_Identity" "Win32_Security_Credentials" "Win32_Security_Cryptography" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Com" "Win32_System_Console" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_IO" "Win32_System_LibraryLoader" "Win32_System_Memory" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI" "Win32_UI_Input" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Shell" "default" ];
      };
      "windows-targets 0.42.2" = rec {
        crateName = "windows-targets";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0wfhnib2fisxlx8c507dbmh97kgij4r6kcxdi0f9nk6l1k080lcf";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-msvc");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-uwp-windows-msvc");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-gnu");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-uwp-windows-gnu");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-msvc");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-uwp-windows-msvc");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnu");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-uwp-windows-gnu");
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-msvc");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-uwp-windows-msvc");
          }
        ];

      };
      "windows-targets 0.48.5" = rec {
        crateName = "windows-targets";
        version = "0.48.5";
        edition = "2018";
        sha256 = "034ljxqshifs1lan89xwpcy1hp0lhdh4b5n0d2z4fwjx2piacbws";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.48.5";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.48.5";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.48.5";
            target = { target, features }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.48.5";
            target = { target, features }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.48.5";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.48.5";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.48.5";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows-targets 0.52.6" = rec {
        crateName = "windows-targets";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0wwrx625nwlfp7k93r2rra568gad1mwd888h1jwnl0vfg5r4ywlv";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.52.6";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.52.6";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.52.6";
            target = { target, features }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnullvm";
            packageId = "windows_i686_gnullvm 0.52.6";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-gnullvm");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.52.6";
            target = { target, features }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.52.6";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.52.6";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.52.6";
            target = { target, features }: ((("x86_64" == target."arch" or null) || ("arm64ec" == target."arch" or null)) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows-targets 0.53.0" = rec {
        crateName = "windows-targets";
        version = "0.53.0";
        edition = "2021";
        sha256 = "12yakpjizhfpppz1i3zgcwxlbar8axrp9j87fmywpydarvlcgr5i";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.53.0";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.53.0";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.53.0";
            target = { target, features }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnullvm";
            packageId = "windows_i686_gnullvm 0.53.0";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-gnullvm");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.53.0";
            target = { target, features }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.53.0";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.53.0";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.53.0";
            target = { target, features }: ((("x86_64" == target."arch" or null) || ("arm64ec" == target."arch" or null)) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows_aarch64_gnullvm 0.42.2" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.42.2";
        edition = "2018";
        sha256 = "1y4q0qmvl0lvp7syxvfykafvmwal5hrjb4fmv04bqs0bawc52yjr";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_gnullvm 0.48.5" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1n05v7qblg1ci3i567inc7xrkmywczxrs1z3lj3rkkxw18py6f1b";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_gnullvm 0.52.6" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "1lrcq38cr2arvmz19v32qaggvj8bh1640mdm9c2fr877h0hn591j";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_gnullvm 0.53.0" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.53.0";
        edition = "2021";
        sha256 = "0r77pbpbcf8bq4yfwpz2hpq3vns8m0yacpvs2i5cn6fx1pwxbf46";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.42.2" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0hsdikjl5sa1fva5qskpwlxzpc5q9l909fpl1w6yy1hglrj8i3p0";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.48.5" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1g5l4ry968p73g6bg6jgyvy9lb8fyhcs54067yzxpcpkf44k2dfw";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.52.6" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0sfl0nysnz32yyfh773hpi49b1q700ah6y7sacmjbqjjn5xjmv09";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.53.0" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.53.0";
        edition = "2021";
        sha256 = "0v766yqw51pzxxwp203yqy39ijgjamp54hhdbsyqq6x1c8gilrf7";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.42.2" = rec {
        crateName = "windows_i686_gnu";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0kx866dfrby88lqs9v1vgmrkk1z6af9lhaghh5maj7d4imyr47f6";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.48.5" = rec {
        crateName = "windows_i686_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0gklnglwd9ilqx7ac3cn8hbhkraqisd0n83jxzf9837nvvkiand7";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.52.6" = rec {
        crateName = "windows_i686_gnu";
        version = "0.52.6";
        edition = "2021";
        sha256 = "02zspglbykh1jh9pi7gn8g1f97jh1rrccni9ivmrfbl0mgamm6wf";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.53.0" = rec {
        crateName = "windows_i686_gnu";
        version = "0.53.0";
        edition = "2021";
        sha256 = "1hvjc8nv95sx5vdd79fivn8bpm7i517dqyf4yvsqgwrmkmjngp61";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnullvm 0.52.6" = rec {
        crateName = "windows_i686_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0rpdx1537mw6slcpqa0rm3qixmsb79nbhqy5fsm3q2q9ik9m5vhf";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnullvm 0.53.0" = rec {
        crateName = "windows_i686_gnullvm";
        version = "0.53.0";
        edition = "2021";
        sha256 = "04df1in2k91qyf1wzizvh560bvyzq20yf68k8xa66vdzxnywrrlw";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.42.2" = rec {
        crateName = "windows_i686_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0q0h9m2aq1pygc199pa5jgc952qhcnf0zn688454i7v4xjv41n24";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.48.5" = rec {
        crateName = "windows_i686_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "01m4rik437dl9rdf0ndnm2syh10hizvq0dajdkv2fjqcywrw4mcg";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.52.6" = rec {
        crateName = "windows_i686_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0rkcqmp4zzmfvrrrx01260q3xkpzi6fzi2x2pgdcdry50ny4h294";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.53.0" = rec {
        crateName = "windows_i686_msvc";
        version = "0.53.0";
        edition = "2021";
        sha256 = "0pcvb25fkvqnp91z25qr5x61wyya12lx8p7nsa137cbb82ayw7sq";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.42.2" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0dnbf2xnp3xrvy8v9mgs3var4zq9v9yh9kv79035rdgyp2w15scd";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.48.5" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "13kiqqcvz2vnyxzydjh73hwgigsdr2z1xpzx313kxll34nyhmm2k";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.52.6" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0y0sifqcb56a56mvn7xjgs8g43p33mfqkd8wj1yhrgxzma05qyhl";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.53.0" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.53.0";
        edition = "2021";
        sha256 = "1flh84xkssn1n6m1riddipydcksp2pdl45vdf70jygx3ksnbam9f";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.42.2" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.42.2";
        edition = "2018";
        sha256 = "18wl9r8qbsl475j39zvawlidp1bsbinliwfymr43fibdld31pm16";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.48.5" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1k24810wfbgz8k48c2yknqjmiigmql6kk3knmddkv8k8g1v54yqb";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.52.6" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "03gda7zjx1qh8k9nnlgb7m3w3s1xkysg55hkd1wjch8pqhyv5m94";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.53.0" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.53.0";
        edition = "2021";
        sha256 = "0mvc8119xpbi3q2m6mrjcdzl6afx4wffacp13v76g4jrs1fh6vha";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.42.2" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "1w5r0q0yzx827d10dpjza2ww0j8iajqhmb54s735hhaj66imvv4s";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.48.5" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0f4mdp895kkjh9zv8dxvn4pc10xr7839lf5pa9l0193i2pkgr57d";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.52.6" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "1v7rb5cibyzx8vak29pdrk8nx9hycsjs4w0jgms08qk49jl6v7sq";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.53.0" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.53.0";
        edition = "2021";
        sha256 = "11h4i28hq0zlnjcaqi2xdxr7ibnpa8djfggch9rki1zzb8qi8517";
        authors = [
          "Microsoft"
        ];

      };
      "winnow" = rec {
        crateName = "winnow";
        version = "0.7.10";
        edition = "2021";
        sha256 = "1v69byry8fyarzl83wij6f1h3zxnw69assp9kdfb10cdfk42hsf0";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = [ "std" "dep:anstream" "dep:anstyle" "dep:is-terminal" "dep:terminal_size" ];
          "default" = [ "std" ];
          "simd" = [ "dep:memchr" ];
          "std" = [ "alloc" "memchr?/std" ];
          "unstable-doc" = [ "alloc" "std" "simd" "unstable-recover" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "winreg" = rec {
        crateName = "winreg";
        version = "0.50.0";
        edition = "2018";
        sha256 = "1cddmp929k882mdh6i9f2as848f13qqna6czwsqzkh1pqnr5fkjj";
        authors = [
          "Igor Shaula <gentoo90@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            features = [ "Win32_Foundation" "Win32_System_Time" "Win32_System_Registry" "Win32_Security" "Win32_Storage_FileSystem" "Win32_System_Diagnostics_Debug" ];
          }
        ];
        features = {
          "chrono" = [ "dep:chrono" ];
          "serde" = [ "dep:serde" ];
          "serialization-serde" = [ "transactions" "serde" ];
        };
      };
      "wit-bindgen-rt" = rec {
        crateName = "wit-bindgen-rt";
        version = "0.39.0";
        edition = "2021";
        sha256 = "1hd65pa5hp0nl664m94bg554h4zlhrzmkjsf6lsgsb7yc4734hkg";
        libName = "wit_bindgen_rt";
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
            optional = true;
          }
        ];
        features = {
          "async" = [ "dep:futures" "dep:once_cell" ];
          "bitflags" = [ "dep:bitflags" ];
        };
        resolvedDefaultFeatures = [ "bitflags" ];
      };
      "writeable" = rec {
        crateName = "writeable";
        version = "0.6.1";
        edition = "2021";
        sha256 = "1fx29zncvbrqzgz7li88vzdm8zvgwgwy2r9bnjqxya09pfwi0bza";
        authors = [
          "The ICU4X Project Developers"
        ];
        features = {
          "either" = [ "dep:either" ];
        };
      };
      "wyz" = rec {
        crateName = "wyz";
        version = "0.5.1";
        edition = "2018";
        sha256 = "1vdrfy7i2bznnzjdl9vvrzljvs4s3qm8bnlgqwln6a941gy61wq5";
        authors = [
          "myrrlyn <self@myrrlyn.dev>"
        ];
        dependencies = [
          {
            name = "tap";
            packageId = "tap";
          }
        ];
        features = {
          "default" = [ "std" ];
          "garbage" = [ "once_cell" "typemap" ];
          "once_cell" = [ "dep:once_cell" ];
          "std" = [ "alloc" ];
          "typemap" = [ "dep:typemap" ];
        };
      };
      "x25519-dalek" = rec {
        crateName = "x25519-dalek";
        version = "2.0.1";
        edition = "2021";
        sha256 = "0xyjgqpsa0q6pprakdp58q1hy45rf8wnqqscgzx0gyw13hr6ir67";
        libName = "x25519_dalek";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "DebugSteven <debugsteven@gmail.com>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
            features = [ "getrandom" ];
          }
        ];
        features = {
          "alloc" = [ "curve25519-dalek/alloc" "serde?/alloc" "zeroize?/alloc" ];
          "default" = [ "alloc" "precomputed-tables" "zeroize" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "precomputed-tables" = [ "curve25519-dalek/precomputed-tables" ];
          "serde" = [ "dep:serde" "curve25519-dalek/serde" ];
          "zeroize" = [ "dep:zeroize" "curve25519-dalek/zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "precomputed-tables" "static_secrets" "zeroize" ];
      };
      "x509-parser 0.16.0" = rec {
        crateName = "x509-parser";
        version = "0.16.0";
        edition = "2018";
        sha256 = "0s8zyl6fafkzpylcpcn08bmcmrzzcb6gfjx2h8zny3bh60pidg7w";
        libName = "x509_parser";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "asn1-rs";
            packageId = "asn1-rs 0.6.2";
            features = [ "datetime" ];
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "der-parser";
            packageId = "der-parser 9.0.0";
            features = [ "bigint" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "nom";
            packageId = "nom";
          }
          {
            name = "oid-registry";
            packageId = "oid-registry 0.7.1";
            features = [ "crypto" "x509" "x962" ];
          }
          {
            name = "rusticata-macros";
            packageId = "rusticata-macros";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "time";
            packageId = "time";
            features = [ "formatting" ];
          }
        ];
        features = {
          "ring" = [ "dep:ring" ];
          "verify" = [ "ring" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "x509-parser 0.17.0" = rec {
        crateName = "x509-parser";
        version = "0.17.0";
        edition = "2018";
        sha256 = "0q1lymkm13n6sibgzwgfhzi11lysz2ff7abm99nk80n4q0wz6sa5";
        libName = "x509_parser";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "asn1-rs";
            packageId = "asn1-rs 0.7.1";
            features = [ "datetime" ];
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "der-parser";
            packageId = "der-parser 10.0.0";
            features = [ "bigint" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "nom";
            packageId = "nom";
          }
          {
            name = "oid-registry";
            packageId = "oid-registry 0.8.1";
            features = [ "crypto" "x509" "x962" ];
          }
          {
            name = "rusticata-macros";
            packageId = "rusticata-macros";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "time";
            packageId = "time";
            features = [ "formatting" ];
          }
        ];
        features = {
          "ring" = [ "dep:ring" ];
          "verify" = [ "ring" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "xml-rs" = rec {
        crateName = "xml-rs";
        version = "0.8.26";
        edition = "2021";
        crateBin = [];
        sha256 = "1nkbzksai36pvx3ag1fn9b5cffwb1ldl66aglwcip42nkdnyfb56";
        libName = "xml";
        authors = [
          "Vladimir Matveev <vmatveev@citrine.cc>"
        ];

      };
      "xmltree" = rec {
        crateName = "xmltree";
        version = "0.10.3";
        edition = "2018";
        sha256 = "1jqzwhr1a5cknflsshhhjlllmd1xi04qdkjsls2bnmv5mxgagn6p";
        authors = [
          "Andrew Chin <achin@eminence32.net>"
        ];
        dependencies = [
          {
            name = "xml-rs";
            packageId = "xml-rs";
          }
        ];
        features = {
          "attribute-order" = [ "indexmap" ];
          "indexmap" = [ "dep:indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "yamux 0.12.1" = rec {
        crateName = "yamux";
        version = "0.12.1";
        edition = "2018";
        sha256 = "0xmpsk686lh8x2b0331xd69mifvy321g1a8994adrwhrwr51dl4y";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "nohash-hasher";
            packageId = "nohash-hasher";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        devDependencies = [
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
            features = [ "executor" ];
          }
        ];

      };
      "yamux 0.13.5" = rec {
        crateName = "yamux";
        version = "0.13.5";
        edition = "2021";
        sha256 = "0zih55njclzlxbn9mbj77s61s8nqifiib4a1vq6kzi9d3jnsr89x";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
            features = [ "std" "executor" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "nohash-hasher";
            packageId = "nohash-hasher";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.3";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "rand";
            packageId = "rand 0.9.1";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "web-time";
            packageId = "web-time";
          }
        ];
        devDependencies = [
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
            features = [ "executor" ];
          }
        ];

      };
      "yansi" = rec {
        crateName = "yansi";
        version = "1.0.1";
        edition = "2021";
        sha256 = "0jdh55jyv0dpd38ij4qh60zglbw9aa8wafqai6m0wa7xaxk3mrfg";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        features = {
          "default" = [ "std" ];
          "detect-env" = [ "std" ];
          "detect-tty" = [ "is-terminal" "std" ];
          "hyperlink" = [ "std" ];
          "is-terminal" = [ "dep:is-terminal" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "yasna" = rec {
        crateName = "yasna";
        version = "0.5.2";
        edition = "2018";
        sha256 = "1ka4ixrplnrfqyl1kymdj8cwpdp2k0kdr73b57hilcn1kiab6yz1";
        authors = [
          "Masaki Hara <ackie.h.gmai@gmail.com>"
        ];
        dependencies = [
          {
            name = "time";
            packageId = "time";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "bit-vec" = [ "dep:bit-vec" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "time" = [ "dep:time" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "time" ];
      };
      "yoke" = rec {
        crateName = "yoke";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1k4mfr48vgi7wh066y11b7v1ilakghlnlhw9snzz8vi2p00vnhaz";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
          {
            name = "yoke-derive";
            packageId = "yoke-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "stable_deref_trait/alloc" "serde?/alloc" "zerofrom/alloc" ];
          "default" = [ "alloc" "zerofrom" ];
          "derive" = [ "dep:yoke-derive" "zerofrom/derive" ];
          "serde" = [ "dep:serde" ];
          "zerofrom" = [ "dep:zerofrom" ];
        };
        resolvedDefaultFeatures = [ "alloc" "derive" "zerofrom" ];
      };
      "yoke-derive" = rec {
        crateName = "yoke-derive";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1dha5jrjz9jaq8kmxq1aag86b98zbnm9lyjrihy5sv716sbkrniq";
        procMacro = true;
        libName = "yoke_derive";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "fold" ];
          }
          {
            name = "synstructure";
            packageId = "synstructure 0.13.2";
          }
        ];

      };
      "zerocopy" = rec {
        crateName = "zerocopy";
        version = "0.8.25";
        edition = "2021";
        sha256 = "1jx07cd3b3456c9al9zjqqdzpf1abb0vf6z0fj8xnb93hfajsw51";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
          "Jack Wrenn <jswrenn@amazon.com>"
        ];
        dependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            optional = true;
          }
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
          }
        ];
        features = {
          "__internal_use_only_features_that_work_on_stable" = [ "alloc" "derive" "simd" "std" ];
          "derive" = [ "zerocopy-derive" ];
          "simd-nightly" = [ "simd" ];
          "std" = [ "alloc" ];
          "zerocopy-derive" = [ "dep:zerocopy-derive" ];
        };
        resolvedDefaultFeatures = [ "simd" ];
      };
      "zerocopy-derive" = rec {
        crateName = "zerocopy-derive";
        version = "0.8.25";
        edition = "2021";
        sha256 = "1vsmpq0hp61xpqj9yk8b5jihkqkff05q1wv3l2568mhifl6y59i8";
        procMacro = true;
        libName = "zerocopy_derive";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
          "Jack Wrenn <jswrenn@amazon.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "zerofrom" = rec {
        crateName = "zerofrom";
        version = "0.1.6";
        edition = "2021";
        sha256 = "19dyky67zkjichsb7ykhv0aqws3q0jfvzww76l66c19y6gh45k2h";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "zerofrom-derive";
            packageId = "zerofrom-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "derive" = [ "dep:zerofrom-derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "derive" ];
      };
      "zerofrom-derive" = rec {
        crateName = "zerofrom-derive";
        version = "0.1.6";
        edition = "2021";
        sha256 = "00l5niw7c1b0lf1vhvajpjmcnbdp2vn96jg4nmkhq2db0rp5s7np";
        procMacro = true;
        libName = "zerofrom_derive";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "fold" ];
          }
          {
            name = "synstructure";
            packageId = "synstructure 0.13.2";
          }
        ];

      };
      "zeroize" = rec {
        crateName = "zeroize";
        version = "1.8.1";
        edition = "2021";
        sha256 = "1pjdrmjwmszpxfd7r860jx54cyk94qk59x13sc307cvr5256glyf";
        authors = [
          "The RustCrypto Project Developers"
        ];
        dependencies = [
          {
            name = "zeroize_derive";
            packageId = "zeroize_derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "derive" = [ "zeroize_derive" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "zeroize_derive" = [ "dep:zeroize_derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" "zeroize_derive" ];
      };
      "zeroize_derive" = rec {
        crateName = "zeroize_derive";
        version = "1.4.2";
        edition = "2021";
        sha256 = "0sczjlqjdmrp3wn62g7mw6p438c9j4jgp2f9zamd56991mdycdnf";
        procMacro = true;
        authors = [
          "The RustCrypto Project Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "extra-traits" "visit" ];
          }
        ];

      };
      "zerotrie" = rec {
        crateName = "zerotrie";
        version = "0.2.2";
        edition = "2021";
        sha256 = "15gmka7vw5k0d24s0vxgymr2j6zn2iwl12wpmpnpjgsqg3abpw1n";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "yoke";
            packageId = "yoke";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "databake" = [ "dep:databake" "zerovec?/databake" ];
          "litemap" = [ "dep:litemap" "alloc" ];
          "serde" = [ "dep:serde" "dep:litemap" "alloc" "litemap/serde" "zerovec?/serde" ];
          "yoke" = [ "dep:yoke" ];
          "zerofrom" = [ "dep:zerofrom" ];
          "zerovec" = [ "dep:zerovec" ];
        };
        resolvedDefaultFeatures = [ "yoke" "zerofrom" ];
      };
      "zerovec" = rec {
        crateName = "zerovec";
        version = "0.11.2";
        edition = "2021";
        sha256 = "0a2457fmz39k9vrrj3rm82q5ykdhgxgbwfz2r6fa6nq11q4fn1aa";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "yoke";
            packageId = "yoke";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec-derive";
            packageId = "zerovec-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "yoke";
            packageId = "yoke";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "databake" = [ "dep:databake" ];
          "derive" = [ "dep:zerovec-derive" ];
          "hashmap" = [ "dep:twox-hash" "alloc" ];
          "serde" = [ "dep:serde" "alloc" ];
          "yoke" = [ "dep:yoke" ];
        };
        resolvedDefaultFeatures = [ "alloc" "derive" "yoke" ];
      };
      "zerovec-derive" = rec {
        crateName = "zerovec-derive";
        version = "0.11.1";
        edition = "2021";
        sha256 = "13zms8hj7vzpfswypwggyfr4ckmyc7v3di49pmj8r1qcz9z275jv";
        procMacro = true;
        libName = "zerovec_derive";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" ];
          }
        ];

      };
      "zstd 0.11.2+zstd.1.5.2" = rec {
        crateName = "zstd";
        version = "0.11.2+zstd.1.5.2";
        edition = "2018";
        sha256 = "1r7xlmgnifhxbfyid8vkcnd5ip16gx9hf89d1l0lzrpc4q1rdk10";
        authors = [
          "Alexandre Bury <alexandre.bury@gmail.com>"
        ];
        dependencies = [
          {
            name = "zstd-safe";
            packageId = "zstd-safe 5.0.2+zstd.1.5.2";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "arrays" = [ "zstd-safe/arrays" ];
          "bindgen" = [ "zstd-safe/bindgen" ];
          "debug" = [ "zstd-safe/debug" ];
          "default" = [ "legacy" "arrays" "zdict_builder" ];
          "experimental" = [ "zstd-safe/experimental" ];
          "legacy" = [ "zstd-safe/legacy" ];
          "no_asm" = [ "zstd-safe/no_asm" ];
          "pkg-config" = [ "zstd-safe/pkg-config" ];
          "thin" = [ "zstd-safe/thin" ];
          "zdict_builder" = [ "zstd-safe/zdict_builder" ];
          "zstdmt" = [ "zstd-safe/zstdmt" ];
        };
      };
      "zstd 0.12.4" = rec {
        crateName = "zstd";
        version = "0.12.4";
        edition = "2018";
        sha256 = "0g654jj8z25rvzli2b1231pcp9y7n6vk44jaqwgifh9n2xg5j9qs";
        authors = [
          "Alexandre Bury <alexandre.bury@gmail.com>"
        ];
        dependencies = [
          {
            name = "zstd-safe";
            packageId = "zstd-safe 6.0.6";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "arrays" = [ "zstd-safe/arrays" ];
          "bindgen" = [ "zstd-safe/bindgen" ];
          "debug" = [ "zstd-safe/debug" ];
          "default" = [ "legacy" "arrays" "zdict_builder" ];
          "experimental" = [ "zstd-safe/experimental" ];
          "fat-lto" = [ "zstd-safe/fat-lto" ];
          "legacy" = [ "zstd-safe/legacy" ];
          "no_asm" = [ "zstd-safe/no_asm" ];
          "pkg-config" = [ "zstd-safe/pkg-config" ];
          "thin" = [ "zstd-safe/thin" ];
          "thin-lto" = [ "zstd-safe/thin-lto" ];
          "zdict_builder" = [ "zstd-safe/zdict_builder" ];
          "zstdmt" = [ "zstd-safe/zstdmt" ];
        };
      };
      "zstd-safe 5.0.2+zstd.1.5.2" = rec {
        crateName = "zstd-safe";
        version = "5.0.2+zstd.1.5.2";
        edition = "2018";
        sha256 = "1nzl4q3xl68pq58g9xlym299bvjdii8cl7ix595ym7jgw22maahx";
        libName = "zstd_safe";
        authors = [
          "Alexandre Bury <alexandre.bury@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "zstd-sys";
            packageId = "zstd-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bindgen" = [ "zstd-sys/bindgen" ];
          "debug" = [ "zstd-sys/debug" ];
          "default" = [ "legacy" "arrays" "zdict_builder" ];
          "experimental" = [ "zstd-sys/experimental" ];
          "legacy" = [ "zstd-sys/legacy" ];
          "no_asm" = [ "zstd-sys/no_asm" ];
          "pkg-config" = [ "zstd-sys/pkg-config" ];
          "std" = [ "zstd-sys/std" ];
          "thin" = [ "zstd-sys/thin" ];
          "zdict_builder" = [ "zstd-sys/zdict_builder" ];
          "zstdmt" = [ "zstd-sys/zstdmt" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "zstd-safe 6.0.6" = rec {
        crateName = "zstd-safe";
        version = "6.0.6";
        edition = "2018";
        sha256 = "10cm0v8sw3jz3pi0wlwx9mbb2l25lm28w638a5n5xscfnk8gz67f";
        libName = "zstd_safe";
        authors = [
          "Alexandre Bury <alexandre.bury@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "zstd-sys";
            packageId = "zstd-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bindgen" = [ "zstd-sys/bindgen" ];
          "debug" = [ "zstd-sys/debug" ];
          "default" = [ "legacy" "arrays" "zdict_builder" ];
          "experimental" = [ "zstd-sys/experimental" ];
          "fat-lto" = [ "zstd-sys/fat-lto" ];
          "legacy" = [ "zstd-sys/legacy" ];
          "no_asm" = [ "zstd-sys/no_asm" ];
          "pkg-config" = [ "zstd-sys/pkg-config" ];
          "std" = [ "zstd-sys/std" ];
          "thin" = [ "zstd-sys/thin" ];
          "thin-lto" = [ "zstd-sys/thin-lto" ];
          "zdict_builder" = [ "zstd-sys/zdict_builder" ];
          "zstdmt" = [ "zstd-sys/zstdmt" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "zstd-sys" = rec {
        crateName = "zstd-sys";
        version = "2.0.15+zstd.1.5.7";
        edition = "2018";
        links = "zstd";
        sha256 = "0dx2l7dyw1p7x7g3p1pfd25ip36hr22hvmgixm6cgl4pvlyii0gb";
        libName = "zstd_sys";
        authors = [
          "Alexandre Bury <alexandre.bury@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            features = [ "parallel" ];
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "bindgen" = [ "dep:bindgen" ];
          "default" = [ "legacy" "zdict_builder" "bindgen" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
    This corresponds roughly to what buildRustCrate is setting.
  */
  makeDefaultTarget = platform: {
    unix = platform.isUnix;
    windows = platform.isWindows;
    fuchsia = true;
    test = false;

    inherit (platform.rust.platform)
      arch
      os
      vendor;
    family = platform.rust.platform.target-family;
    env = "gnu";
    endian =
      if platform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString platform.parsed.cpu.bits;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
    of crate given as the second argument.

    testCrateFlags: list of flags to pass to the test exectuable
    testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs, testPreRun, testPostRun }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    assert builtins.typeOf testPreRun == "string";
    assert builtins.typeOf testPostRun == "string";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test =
        let
          drv = testCrate.override
            (
              _: {
                buildTests = true;
              }
            );
          # If the user hasn't set any pre/post commands, we don't want to
          # insert empty lines. This means that any existing users of crate2nix
          # don't get a spurious rebuild unless they set these explicitly.
          testCommand = pkgs.lib.concatStringsSep "\n"
            (pkgs.lib.filter (s: s != "") [
              testPreRun
              "$f $testCrateFlags 2>&1 | tee -a $out"
              testPostRun
            ]);
        in
        pkgs.runCommand "run-tests-${testCrate.name}"
          {
            inherit testCrateFlags;
            buildInputs = testInputs;
          } ''
          set -e

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          # It's necessary to locate the source in $NIX_BUILD_TOP/source/
          # instead of $NIX_BUILD_TOP/
          # because we compiled those test binaries in the former and not the latter.
          # So all paths will expect source tree to be there and not in the build top directly.
          # For example: $NIX_BUILD_TOP := /build in general, if you ask yourself.
          # NOTE: There could be edge cases if `crate.sourceRoot` does exist but
          # it's very hard to reason about them.
          # Open a bug if you run into this!
          mkdir -p source/
          cd source/

          ${pkgs.buildPackages.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            ${testCommand}
          done
        '';
    in
    pkgs.runCommand "${crate.name}-linked"
      {
        inherit (crate) outputs crateName;
        passthru = (crate.passthru or { }) // {
          inherit test;
        };
      }
      (lib.optionalString (stdenv.buildPlatform.canExecute stdenv.hostPlatform) ''
        echo tested by ${test}
      '' + ''
        ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
      '');

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateForPkgsFunc ? null
    , runTests ? false
    , testCrateFlags ? [ ]
    , testInputs ? [ ]
      # Any command to run immediatelly before a test is executed.
    , testPreRun ? ""
      # Any command run immediatelly after a test is executed.
    , testPostRun ? ""
    }:
    lib.makeOverridable
      (
        { features
        , crateOverrides
        , runTests
        , testCrateFlags
        , testInputs
        , testPreRun
        , testPostRun
        }:
        let
          buildRustCrateForPkgsFuncOverriden =
            if buildRustCrateForPkgsFunc != null
            then buildRustCrateForPkgsFunc
            else
              (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrateForPkgs
                else
                  pkgs: (buildRustCrateForPkgs pkgs).override {
                    defaultCrateOverrides = crateOverrides;
                  }
              );
          builtRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = false;
          };
          builtTestRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = true;
          };
          drv = builtRustCrates.crates.${packageId};
          testDrv = builtTestRustCrates.crates.${packageId};
          derivation =
            if runTests then
              crateWithTest
                {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs testPreRun testPostRun;
                }
            else drv;
        in
        derivation
      )
      { inherit features crateOverrides runTests testCrateFlags testInputs testPreRun testPostRun; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
    for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateForPkgsFunc
    , runTests
    , makeTarget ? makeDefaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs (makeTarget stdenv.hostPlatform));
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures
          (
            args // {
              inherit rootPackageId;
              target = makeTarget stdenv.hostPlatform // { test = runTests; };
            }
          );
        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
        mkBuiltByPackageIdByPkgs = pkgs:
          let
            self = {
              crates = lib.mapAttrs (packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId) crateConfigs;
              target = makeTarget stdenv.hostPlatform;
              build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
            };
          in
          self;
        buildByPackageIdForPkgsImpl = self: pkgs: packageId:
          let
            features = mergedFeatures."${packageId}" or [ ];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or [ ]);
            dependencies =
              dependencyDerivations {
                inherit features;
                inherit (self) target;
                buildByPackageId = depPackageId:
                  # proc_macro crates must be compiled for the build architecture
                  if crateConfigs.${depPackageId}.procMacro or false
                  then self.build.crates.${depPackageId}
                  else self.crates.${depPackageId};
                dependencies =
                  (crateConfig.dependencies or [ ])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit features;
                inherit (self.build) target;
                buildByPackageId = depPackageId:
                  self.build.crates.${depPackageId};
                dependencies = crateConfig.buildDependencies or [ ];
              };
            dependenciesWithRenames =
              let
                buildDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self) target;
                  dependencies = crateConfig.dependencies or [ ] ++ devDependencies;
                };
                hostDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self.build) target;
                  dependencies = crateConfig.buildDependencies or [ ];
                };
              in
              lib.filter (d: d ? "rename") (hostDeps ++ buildDeps);
            # Crate renames have the form:
            #
            # {
            #    crate_name = [
            #       { version = "1.2.3"; rename = "crate_name01"; }
            #    ];
            #    # ...
            # }
            crateRenames =
              let
                grouped =
                  lib.groupBy
                    (dependency: dependency.name)
                    dependenciesWithRenames;
                versionAndRename = dep:
                  let
                    package = crateConfigs."${dep.packageId}";
                  in
                  { inherit (dep) rename; inherit (package) version; };
              in
              lib.mapAttrs (name: builtins.map versionAndRename) grouped;
          in
          buildRustCrateForPkgsFunc pkgs
            (
              crateConfig // {
                src = crateConfig.src or (
                  pkgs.fetchurl rec {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 =
                      assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                      crateConfig.sha256;
                  }
                );
                extraRustcOpts = lib.lists.optional (targetFeatures != [ ]) "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
      builtByPackageIdByPkgs;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { buildByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: buildByPackageId dependency.packageId;
      in
      map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
    be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: sanitizeForJson) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? makeDefaultTarget stdenv.hostPlatform }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateForPkgsFunc = _: lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson
          (
            buildRustCrateWithFeatures {
              buildRustCrateForPkgsFunc = _: crate: {
                "01_crateName" = crate.crateName or false;
                "02_features" = crate.features or [ ];
                "03_dependencies" = crate.dependencies or [ ];
              };
              inherit packageId;
            }
          );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
    { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
    features.

    This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) { } [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or [ ]) != (v."cargo".resolved_default_features or [ ])
          )
          combined;
      in
      builtins.toJSON {
        inherit onlyInCargo onlyInCrate2Nix differentFeatures;
      };

  /* Returns an attrset mapping packageId to the list of enabled features.

    If multiple paths to a dependency enable different features, the
    corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? { }
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or { }) features;
        enabledFeatures = enableFeatures (crateConfig.dependencies or [ ]) expandedFeatures;
        depWithResolvedFeatures = dependency:
          let
            inherit (dependency) packageId;
            features = dependencyFeatures enabledFeatures dependency;
          in
          { inherit packageId features; };
        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = enabledFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
          foldOverCache
            (
              cache: { packageId, features }:
                let
                  cacheFeatures = cache.${packageId} or [ ];
                  combinedFeatures = sortedUnique (cacheFeatures ++ features);
                in
                if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                then cache
                else
                  mergePackageFeatures {
                    features = combinedFeatures;
                    featuresByPackageId = cache;
                    inherit crateConfigs packageId target runTests rootPackageId;
                  }
            );
        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [ ];
            combinedFeatures = sortedUnique (cacheFeatures ++ enabledFeatures);
          in
          featuresByPackageId // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep"
            (
              crateConfig.dependencies or [ ]
              ++ lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig.devDependencies or [ ])
            );
        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or [ ]);
      in
      cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
        let
          targetFunc = dep.target or (features: true);
        in
        targetFunc { inherit features target; }
        && (
          !(dep.optional or false)
          || builtins.any (doesFeatureEnableDependency dep) features
        )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = dependency: feature:
    let
      name = dependency.rename or dependency.name;
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
    feature == name || feature == "dep:" + name || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
    rules in featureMap.

    featureMap is an attribute set which maps feature names to lists of further
    feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeaturesNoCycle = oldSeen: inputFeatures:
        if inputFeatures != [ ]
        then
          let
            # The feature we're currently expanding.
            feature = builtins.head inputFeatures;
            # All the features we've seen/expanded so far, including the one
            # we're currently processing.
            seen = oldSeen // { ${feature} = 1; };
            # Expand the feature but be careful to not re-introduce a feature
            # that we've already seen: this can easily cause a cycle, see issue
            # #209.
            enables = builtins.filter (f: !(seen ? "${f}")) (featureMap."${feature}" or [ ]);
          in
          [ feature ] ++ (expandFeaturesNoCycle seen (builtins.tail inputFeatures ++ enables))
        # No more features left, nothing to expand to.
        else [ ];
      outFeatures = expandFeaturesNoCycle { } inputFeatures;
    in
    sortedUnique outFeatures;

  /* This function adds optional dependencies as features if they are enabled
    indirectly by dependency features. This function mimics Cargo's behavior
    described in a note at:
    https://doc.rust-lang.org/nightly/cargo/reference/features.html#dependency-features
  */
  enableFeatures = dependencies: features:
    assert (builtins.isList features);
    assert (builtins.isList dependencies);
    let
      additionalFeatures = lib.concatMap
        (
          dependency:
            assert (builtins.isAttrs dependency);
            let
              enabled = builtins.any (doesFeatureEnableDependency dependency) features;
            in
            if (dependency.optional or false) && enabled
            then [ (dependency.rename or dependency.name) ]
            else [ ]
        )
        dependencies;
    in
    sortedUnique (features ++ additionalFeatures);

  /*
    Returns the actual features for the given dependency.

    features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil =
        if dependency.usesDefaultFeatures or true
        then [ "default" ]
        else [ ];
      explicitFeatures = dependency.features or [ ];
      additionalDependencyFeatures =
        let
          name = dependency.rename or dependency.name;
          stripPrefixMatch = prefix: s:
            if lib.hasPrefix prefix s
            then lib.removePrefix prefix s
            else null;
          extractFeature = feature: lib.findFirst
            (f: f != null)
            null
            (map (prefix: stripPrefixMatch prefix feature) [
              (name + "/")
              (name + "?/")
            ]);
          dependencyFeatures = lib.filter (f: f != null) (map extractFeature features);
        in
        dependencyFeatures;
    in
    defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) { } features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
    builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #
  };
}

